name: Setup SSL Certificate (disabled)

on:
  workflow_dispatch:
    inputs:
      disabled:
        description: 'This workflow is disabled; use Deploy to AWS only.'
        required: false
        default: 'true'

env:
  AWS_REGION: us-east-1
  DOMAIN_NAME: precisely-prototype.universalagi.com

jobs:
  request-certificate:
    name: Request SSL Certificate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check if certificate already exists
      id: check-cert
      run: |
        EXISTING_CERT=$(aws acm list-certificates \
          --region ${{ env.AWS_REGION }} \
          --query "CertificateSummaryList[?DomainName=='${{ env.DOMAIN_NAME }}' && Status=='ISSUED'].CertificateArn | [0]" \
          --output text)
        
        if [ "$EXISTING_CERT" != "None" ] && [ ! -z "$EXISTING_CERT" ]; then
          echo "✅ Certificate already exists: $EXISTING_CERT"
          echo "cert_arn=$EXISTING_CERT" >> $GITHUB_OUTPUT
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "📋 No existing certificate found"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Request new certificate
      if: steps.check-cert.outputs.exists == 'false'
      id: request-cert
      run: |
        CERT_ARN=$(aws acm request-certificate \
          --domain-name ${{ env.DOMAIN_NAME }} \
          --validation-method DNS \
          --region ${{ env.AWS_REGION }} \
          --query CertificateArn \
          --output text)
        
        echo "✅ Certificate requested: $CERT_ARN"
        echo "cert_arn=$CERT_ARN" >> $GITHUB_OUTPUT
        
        # Wait a bit for the certificate to be ready
        sleep 10

    - name: Get validation records
      id: validation
      run: |
        CERT_ARN="${{ steps.check-cert.outputs.cert_arn || steps.request-cert.outputs.cert_arn }}"
        
        echo "🔍 Getting validation records for certificate: $CERT_ARN"
        
        # Get validation records
        VALIDATION_INFO=$(aws acm describe-certificate \
          --certificate-arn "$CERT_ARN" \
          --region ${{ env.AWS_REGION }} \
          --query 'Certificate.DomainValidationOptions[0].ResourceRecord' \
          --output json)
        
        if [ "$VALIDATION_INFO" != "null" ]; then
          RECORD_NAME=$(echo $VALIDATION_INFO | jq -r '.Name')
          RECORD_VALUE=$(echo $VALIDATION_INFO | jq -r '.Value')
          
          echo "📋 DNS Validation Required:"
          echo "   Record Type: CNAME"
          echo "   Name: $RECORD_NAME"
          echo "   Value: $RECORD_VALUE"
          echo ""
          echo "record_name=$RECORD_NAME" >> $GITHUB_OUTPUT
          echo "record_value=$RECORD_VALUE" >> $GITHUB_OUTPUT
        fi

    - name: Update Terraform variables
      run: |
        CERT_ARN="${{ steps.check-cert.outputs.cert_arn || steps.request-cert.outputs.cert_arn }}"
        
        # Update the certificate ARN in Terraform
        cat > infrastructure/terraform/terraform.tfvars <<EOF
        certificate_arn = "$CERT_ARN"
        EOF
        
        # Commit the change
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add infrastructure/terraform/terraform.tfvars
        git commit -m "feat: add SSL certificate ARN for custom domain" || echo "No changes to commit"
        git push origin main || echo "No changes to push"

    - name: Summary
      run: |
        CERT_ARN="${{ steps.check-cert.outputs.cert_arn || steps.request-cert.outputs.cert_arn }}"
        
        echo "## 🔐 SSL Certificate Setup Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Domain:** ${{ env.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Certificate ARN:** \`$CERT_ARN\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-cert.outputs.exists }}" == "false" ]; then
          echo "### 📋 DNS Validation Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Add this CNAME record to your DNS provider:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Name | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| CNAME | \`${{ steps.validation.outputs.record_name }}\` | \`${{ steps.validation.outputs.record_value }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "After adding the DNS record, wait 5-30 minutes for validation." >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Using existing validated certificate" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Ensure DNS validation record is added (if new certificate)" >> $GITHUB_STEP_SUMMARY
        echo "2. The deployment workflow will automatically use this certificate" >> $GITHUB_STEP_SUMMARY
        echo "3. Your site will be available at https://${{ env.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY