{
  "dataset": "telco_5GTraffic",
  "description_number": 3,
  "timestamp": "20250808_084700",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "Source",
      "description": "This type represents network source identifiers using IPv4 address format for traffic analysis and network monitoring. Values follow standard IP address formatting with four decimal octets separated by periods, specifically identifying the originating address in network communications.",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.168.1.100",
        "10.0.0.1",
        "172.16.254.1",
        "203.0.113.45",
        "8.8.8.8",
        "127.0.0.1",
        "255.255.255.255",
        "0.0.0.0"
      ],
      "negativeContentExamples": [
        "192.168.1.256",
        "10.0.0",
        "172.16.254.1.1",
        "203.0.113",
        "8.8.8.8:80",
        "2001:db8::1",
        "192.168.1.100/24",
        "hostname.domain.com"
      ],
      "positiveHeaderExamples": [
        "Source_IP",
        "Src_IP_Address",
        "Origin_IP",
        "Source_IPv4",
        "Src_IP_Addr",
        "Client_IP",
        "Sender_IP",
        "From_IP"
      ],
      "negativeHeaderExamples": [
        "Source_Port",
        "Origin_Hostname",
        "Destination_IP",
        "Target_IP",
        "Dst_IP",
        "Server_IP",
        "Source_MAC",
        "IP_Range"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*source.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source_IP_Address"
          ],
          "negativeExamples": [
            "Destination_IP_Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*src.*ip.*addr.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Src_IP_Addr"
          ],
          "negativeExamples": [
            "Dst_IP_Addr"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*source.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source_IP"
          ],
          "negativeExamples": [
            "Source_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*src.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Src_IP"
          ],
          "negativeExamples": [
            "Src_MAC"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*origin.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Origin_IP"
          ],
          "negativeExamples": [
            "Origin_Hostname"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "IP"
          ],
          "negativeExamples": [
            "Port"
          ],
          "rationale": null
        }
      ],
      "priority": 2640,
      "explanation": "This semantic type specifically identifies IPv4 addresses that serve as source identifiers in network traffic analysis and monitoring systems. Unlike generic IPv4 addresses, this type is contextually aware of the source/origin role of the IP address in network communications. It's commonly used in firewall logs, network monitoring tools, intrusion detection systems, and traffic analysis applications where distinguishing between source and destination addresses is critical for security analysis and network troubleshooting. The type uses standard IPv4 validation patterns but is semantically distinguished by header patterns that indicate the source/origin context of the address.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T08:45:01.806785"
    },
    {
      "resultType": "generated",
      "semanticType": "Destination",
      "description": "This type represents network destination identifiers using IPv4 address format for traffic analysis and network monitoring. Values follow standard IP address formatting with four decimal octets separated by periods.",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.168.1.100",
        "10.0.0.1",
        "172.16.254.1",
        "203.0.113.45",
        "8.8.8.8",
        "255.255.255.255",
        "0.0.0.0",
        "127.0.0.1"
      ],
      "negativeContentExamples": [
        "192.168.1.256",
        "10.0.0",
        "172.16.254.1.1",
        "203.0.113",
        "8.8.8.8:80",
        "255.255.255.255/24",
        "192.168.1.100-200",
        "example.com"
      ],
      "positiveHeaderExamples": [
        "Destination_IP",
        "Dst_IP_Address",
        "dest_ip",
        "target_ip_addr",
        "destination_ipv4",
        "dst_ip",
        "remote_ip",
        "endpoint_ip"
      ],
      "negativeHeaderExamples": [
        "Destination_Port",
        "Destination_Hostname",
        "Source_IP",
        "src_ip_address",
        "destination_url",
        "dst_port",
        "target_domain",
        "remote_host"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*destination.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Destination_IP_Address"
          ],
          "negativeExamples": [
            "Source_IP_Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dest.*ip.*addr.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dest_ip_addr"
          ],
          "negativeExamples": [
            "src_ip_addr"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dst.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Dst_IP"
          ],
          "negativeExamples": [
            "Src_IP"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*destination.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Destination_IP"
          ],
          "negativeExamples": [
            "Destination_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*target.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "target_ip"
          ],
          "negativeExamples": [
            "target_port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "ip"
          ],
          "negativeExamples": [
            "port"
          ],
          "rationale": null
        }
      ],
      "priority": 2650,
      "explanation": "This semantic type specifically identifies IPv4 addresses that represent network destinations in traffic analysis, security monitoring, and network flow data. It extends the general IPADDRESS.IPV4 type by focusing on the contextual meaning of destination endpoints in network communications. This is particularly useful for analyzing network traffic patterns, identifying communication targets, and monitoring outbound connections. The type uses standard IPv4 validation patterns while providing header pattern matching that specifically identifies destination-related IP address columns in datasets commonly found in network logs, firewall records, and security monitoring systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T08:45:36.769986"
    },
    {
      "resultType": "generated",
      "semanticType": "Protocol",
      "description": "Network protocol names that specify communication standards and methods used for data transmission, representing different network communication technologies and standards.",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "HTTP",
        "HTTPS",
        "FTP",
        "SFTP",
        "SSH",
        "TCP",
        "UDP",
        "SMTP",
        "POP3",
        "IMAP",
        "DNS",
        "DHCP",
        "SNMP",
        "ICMP",
        "ARP",
        "RARP",
        "TELNET",
        "NTP",
        "LDAP",
        "TFTP",
        "SIP",
        "RTP",
        "RTCP",
        "BGP"
      ],
      "backout": "(?i)[A-Z]{2,5}[PS]?[0-9]?",
      "positiveContentExamples": [
        "HTTP",
        "HTTPS",
        "FTP",
        "TCP",
        "UDP",
        "SMTP",
        "DNS",
        "SSH"
      ],
      "negativeContentExamples": [
        "80",
        "443",
        "Apache",
        "Nginx",
        "MySQL",
        "PostgreSQL",
        "192.168.1.1",
        "localhost"
      ],
      "positiveHeaderExamples": [
        "Protocol_Type",
        "Network_Protocol",
        "Communication_Protocol",
        "Protocol_Name",
        "Net_Protocol",
        "Connection_Protocol",
        "Transport_Protocol",
        "Protocol"
      ],
      "negativeHeaderExamples": [
        "Service_Name",
        "Port_Number",
        "Server_Type",
        "Application_Name",
        "Database_Type",
        "Connection_String",
        "Host_Name",
        "IP_Address"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*network.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Network_Protocol"
          ],
          "negativeExamples": [
            "Network_Interface"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*communication.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Communication_Protocol"
          ],
          "negativeExamples": [
            "Communication_Method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*protocol.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Protocol_Type"
          ],
          "negativeExamples": [
            "Service_Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*net.*proto.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "net_proto"
          ],
          "negativeExamples": [
            "net_port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "protocol"
          ],
          "negativeExamples": [
            "service"
          ],
          "rationale": null
        }
      ],
      "priority": 2660,
      "explanation": "This semantic type identifies network protocol names used in data transmission and communication. It captures standard protocol identifiers like HTTP, TCP, UDP, FTP, etc. that specify how data should be transmitted across networks. The type uses a finite list approach since network protocols are well-defined standards with a limited set of commonly used values. The backout pattern provides fallback matching for protocol-like strings that may not be in the main list but follow typical protocol naming conventions (2-5 uppercase letters, possibly ending with 'P' or 'S', optionally followed by a digit). This is commonly found in network logs, configuration files, and system monitoring data where protocol identification is crucial for understanding communication patterns and troubleshooting network issues.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T08:46:20.245791"
    },
    {
      "resultType": "generated",
      "semanticType": "Length",
      "description": "Network packet size measurements expressed as positive integer values indicating transmission length in bytes for traffic analysis and performance monitoring",
      "pluginType": "regex",
      "regexPattern": "[1-9][0-9]{0,4}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "64",
        "1500",
        "576",
        "1024",
        "128",
        "9000",
        "512",
        "256"
      ],
      "negativeContentExamples": [
        "0",
        "-1500",
        "1500.5",
        "1,500",
        "1500 bytes",
        "abc",
        "100000"
      ],
      "positiveHeaderExamples": [
        "Packet_Length",
        "Length_Bytes",
        "pkt_size",
        "frame_length",
        "msg_size",
        "packet_len",
        "data_length",
        "transmission_size"
      ],
      "negativeHeaderExamples": [
        "Duration",
        "Payload_Size",
        "packet_count",
        "bandwidth",
        "timestamp",
        "source_port",
        "protocol_type",
        "error_rate"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*packet.*length.*bytes.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Packet_Length_Bytes"
          ],
          "negativeExamples": [
            "Packet_Duration_Seconds"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*packet.*size.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Packet_Size"
          ],
          "negativeExamples": [
            "Payload_Size"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*packet.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Packet_Length"
          ],
          "negativeExamples": [
            "Duration"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*pkt.*(len|size).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "pkt_len"
          ],
          "negativeExamples": [
            "pkt_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(frame|msg).*(len|size).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "frame_length"
          ],
          "negativeExamples": [
            "frame_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(length|size).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Length_Bytes"
          ],
          "negativeExamples": [
            "Duration"
          ],
          "rationale": null
        }
      ],
      "priority": 2670,
      "explanation": "This semantic type identifies network packet size measurements used in network traffic analysis and performance monitoring. It matches positive integer values typically ranging from 64 to 9000 bytes, representing the size of individual network packets. The pattern excludes zero, negative values, and very large numbers that would be unrealistic for standard network packet sizes. This type is commonly found in network logs, traffic analysis reports, and performance monitoring datasets where understanding packet size distribution is crucial for network optimization and troubleshooting.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T08:47:00.574852"
    }
  ]
}