{
  "dataset": "insurance",
  "description_number": 6,
  "timestamp": "20250808_104439",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "ID",
      "description": "Insurance policy number: positive whole number identifier used to uniquely identify insurance policies",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d{4,15}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "12345",
        "987654321",
        "1000001",
        "555777999",
        "123456789012345",
        "50000",
        "7890123",
        "999888777666"
      ],
      "negativeContentExamples": [
        "0",
        "01234",
        "-12345",
        "12345.67",
        "ABC123",
        "12-345",
        "1234",
        "12345678901234567"
      ],
      "positiveHeaderExamples": [
        "policy_number",
        "contract_id",
        "policy_contract_number",
        "insurance_policy_num",
        "policy_id",
        "contract_number",
        "pol_num",
        "policy_identifier"
      ],
      "negativeHeaderExamples": [
        "contract_date",
        "agent_id",
        "policy_amount",
        "premium_number",
        "claim_number",
        "customer_id",
        "policy_type",
        "account_number"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*contract.*number.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_contract_number"
          ],
          "negativeExamples": [
            "policy_contract_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*insurance.*policy.*number.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_policy_number"
          ],
          "negativeExamples": [
            "insurance_agent_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*num.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_num"
          ],
          "negativeExamples": [
            "policy_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_id"
          ],
          "negativeExamples": [
            "contract_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy"
          ],
          "negativeExamples": [
            "agent"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*number.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "number"
          ],
          "negativeExamples": [
            "date"
          ],
          "rationale": null
        }
      ],
      "priority": 4330,
      "explanation": "This semantic type identifies insurance policy numbers, which are positive whole number identifiers used to uniquely identify insurance policies and contracts. Policy numbers typically range from 5 to 15 digits, never start with zero, and are always positive integers without decimal points or special characters. They are commonly found in insurance databases, claims processing systems, and policy management applications. The pattern excludes leading zeros, negative numbers, and non-numeric characters to ensure proper identification of valid policy identifiers.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:27:58.359595"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_start_contract",
      "description": "Date when an insurance policy or contract coverage begins or becomes active",
      "pluginType": "regex",
      "regexPattern": "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{1,2}/\\d{1,2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|\\d{1,2}-\\d{1,2}-\\d{4}|\\d{2}\\.\\d{2}\\.\\d{4}|\\d{1,2}\\.\\d{1,2}\\.\\d{4}|\\d{8}|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|\\d{1,2}[a-zA-Z]{2}\\s+\\w+\\s+\\d{4}|\\w+\\s+\\d{1,2},?\\s+\\d{4}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2024-01-15",
        "03/15/2024",
        "1/1/2024",
        "15-03-2024",
        "15.03.2024",
        "20240315",
        "March 15, 2024",
        "15th Mar 2024"
      ],
      "negativeContentExamples": [
        "2024/15/03",
        "2024.25.15"
      ],
      "positiveHeaderExamples": [
        "policy_effective_date",
        "contract_effective_date",
        "coverage_start_date",
        "policy_start_date",
        "effective_date",
        "coverage_effective_dt",
        "policy_begin_date",
        "contract_start_date"
      ],
      "negativeHeaderExamples": [
        "policy_expiration_date",
        "transaction_date",
        "birth_date",
        "policy_renewal_date",
        "claim_date",
        "payment_date",
        "termination_date",
        "cancellation_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_effective_date"
          ],
          "negativeExamples": [
            "policy_expiration_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_effective_date"
          ],
          "negativeExamples": [
            "contract_termination_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*coverage.*start.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "coverage_start_date"
          ],
          "negativeExamples": [
            "coverage_end_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(policy|coverage).*start.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_start_date"
          ],
          "negativeExamples": [
            "policy_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "effective_date"
          ],
          "negativeExamples": [
            "transaction_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4340,
      "explanation": "This semantic type identifies dates that represent when insurance policies, contracts, or coverage periods become active or effective. It's specifically designed to distinguish policy effective dates from other types of dates in insurance and contract management systems. The type recognizes various date formats commonly used in business systems and focuses on header patterns that indicate the start or beginning of coverage rather than end dates, transaction dates, or personal dates like birth dates. This is crucial for insurance analytics, policy management, and compliance reporting where understanding when coverage begins is essential for risk assessment and regulatory requirements.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:28:32.281087"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_last_renewal",
      "description": "Date when a policy renewal was completed or became effective",
      "pluginType": "regex",
      "regexPattern": "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|\\d{1,2}/\\d{1,2}/\\d{4}|\\d{1,2}-\\d{1,2}-\\d{4}|\\d{4}/\\d{2}/\\d{2}|\\d{2}\\.\\d{2}\\.\\d{4}|\\d{4}\\.\\d{2}\\.\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2023-03-15",
        "03/15/2023",
        "15-03-2023",
        "3/15/2023",
        "2023/03/15",
        "15.03.2023",
        "2023.03.15",
        "12/01/2022"
      ],
      "negativeContentExamples": [
        "15/03/23",
        "March 15, 2023",
        "2023-03-15T10:30:00",
        "15-Mar-2023",
        "20230315",
        "2023/3/15/10:30",
        "invalid-date"
      ],
      "positiveHeaderExamples": [
        "renewal_completed_date",
        "last_renewal_date",
        "renewal_effective_date",
        "policy_renewal_date",
        "renewal_completion_dt",
        "completed_renewal_date",
        "renewal_dt",
        "effective_renewal_date"
      ],
      "negativeHeaderExamples": [
        "next_renewal_date",
        "renewal_due_date",
        "claim_date",
        "policy_start_date",
        "expiry_date",
        "renewal_amount",
        "renewal_premium",
        "issue_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*renewal.*completed.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_completed_date"
          ],
          "negativeExamples": [
            "renewal_start_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_effective_date"
          ],
          "negativeExamples": [
            "renewal_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*last.*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "last_renewal_date"
          ],
          "negativeExamples": [
            "next_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_renewal_date"
          ],
          "negativeExamples": [
            "policy_issue_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*dt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_dt"
          ],
          "negativeExamples": [
            "expiry_dt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4350,
      "explanation": "This semantic type identifies dates when policy renewals were completed or became effective. It's commonly used in insurance and subscription-based systems to track when a policy was last renewed. The pattern matches various date formats commonly found in datasets, while the header patterns focus on identifying columns that specifically relate to completed or effective renewal dates, distinguishing them from future renewal dates or other policy-related dates.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:29:03.877199"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_next_renewal",
      "description": "Date when a policy, contract, license, or other time-bound agreement expires or ends",
      "pluginType": "regex",
      "regexPattern": "(?i).*(expir|end|terminat|finish|conclud|ceas|laps).*date.*|.*date.*(expir|end|terminat|finish|conclud|ceas|laps).*|.*(renewal|renew).*date.*|.*date.*(renewal|renew).*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "2020-01-01",
        "01/01/2020",
        "2019-12-31T23:59:59",
        "January 1, 2021",
        "01-Jan-2020",
        "2021/01/01",
        "12/31/19",
        "2020-06-15 12:00:00"
      ],
      "positiveHeaderExamples": [
        "expiration_date",
        "policy_expiry_date",
        "contract_end_date",
        "license_expiration",
        "next_renewal_date",
        "scheduled_renewal_date",
        "termination_date",
        "expires_on"
      ],
      "negativeHeaderExamples": [
        "policy_issue_date",
        "last_renewal_date",
        "contract_start_date",
        "creation_date",
        "effective_date",
        "purchase_date",
        "birth_date",
        "modified_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*expir.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_expiration_date"
          ],
          "negativeExamples": [
            "policy_issue_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(contract|agreement).*end.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_end_date"
          ],
          "negativeExamples": [
            "contract_start_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(renewal|renew).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "next_renewal_date"
          ],
          "negativeExamples": [
            "last_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(expir|terminat|end).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "expiration_date"
          ],
          "negativeExamples": [
            "creation_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*(expir|end|terminat).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date_expires"
          ],
          "negativeExamples": [
            "date_created"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4360,
      "explanation": "This semantic type identifies dates that represent when policies, contracts, licenses, or other time-bound agreements expire or end. It's commonly used in insurance, subscription services, licensing systems, and contract management. The type focuses on future dates that indicate when something will cease to be valid or active, distinguishing them from historical dates like issue dates or start dates. This is particularly useful for identifying renewal opportunities, compliance tracking, and automated notifications for expiring agreements.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:29:42.368947"
    },
    {
      "resultType": "generated",
      "semanticType": "Distribution_channel",
      "description": "Identifies how a policy or product was sold, including distribution channels and sales methods",
      "pluginType": "regex",
      "regexPattern": "(?i)(online|web|internet|digital|direct|agent|broker|phone|telephone|call.?center|retail|branch|office|partner|affiliate|referral|email|mail|mobile|app|kiosk|field.?sales|door.?to.?door|telesales|telemarketing|inbound|outbound|face.?to.?face|in.?person|walk.?in|counter|over.?the.?counter|otc)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "Online",
        "Agent",
        "Direct",
        "Broker",
        "Phone",
        "Call Center"
      ],
      "negativeContentExamples": [
        "Credit Card",
        "Bank Transfer",
        "Monthly",
        "Premium",
        "Active",
        "Approved",
        "John Smith",
        "New York"
      ],
      "positiveHeaderExamples": [
        "sales_channel_code",
        "distribution_channel",
        "policy_sales_method",
        "channel_type",
        "sales_source",
        "distribution_method",
        "acquisition_channel",
        "origination_channel"
      ],
      "negativeHeaderExamples": [
        "channel_name",
        "payment_channel",
        "communication_channel",
        "tv_channel",
        "marketing_channel",
        "support_channel",
        "delivery_channel",
        "notification_channel"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*sales.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "sales_channel_code"
          ],
          "negativeExamples": [
            "channel_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*distribution.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "distribution_channel"
          ],
          "negativeExamples": [
            "payment_channel"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(sales|distribution).*method.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "sales_method"
          ],
          "negativeExamples": [
            "payment_method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(policy|product).*source.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_source"
          ],
          "negativeExamples": [
            "data_source"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "channel"
          ],
          "negativeExamples": [
            "tv_channel"
          ],
          "rationale": null
        }
      ],
      "priority": 4370,
      "explanation": "This semantic type identifies sales channels used in insurance and financial services to track how policies or products were sold to customers. It captures various distribution methods including direct sales, agent-based sales, online channels, phone sales, and retail locations. This information is crucial for analyzing sales performance, commission calculations, and understanding customer acquisition patterns across different channels.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:30:19.883728"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_birth",
      "description": "Date when a person was born, typically used for customer or policyholder birth dates",
      "pluginType": "regex",
      "regexPattern": "(?i).*birth.*date.*|(?i).*date.*birth.*|(?i).*dob.*|(?i).*born.*date.*|(?i).*birth.*day.*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "2025-01-15",
        "2024-12-31",
        "1850-05-10",
        "2030-06-20",
        "2023-03-15",
        "1800-01-01",
        "2026-08-12",
        "1899-12-31"
      ],
      "positiveHeaderExamples": [
        "date_of_birth",
        "dob",
        "customer_birthdate",
        "birth_date",
        "policyholder_dob",
        "member_birth_date",
        "patient_birthdate",
        "employee_date_of_birth"
      ],
      "negativeHeaderExamples": [
        "policy_start_date",
        "license_issue_date",
        "registration_date",
        "expiration_date",
        "hire_date",
        "contract_date",
        "renewal_date",
        "termination_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*birth.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_birth_date"
          ],
          "negativeExamples": [
            "customer_policy_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policyholder.*birth.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policyholder_birthdate"
          ],
          "negativeExamples": [
            "policyholder_start_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*of.*birth.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date_of_birth"
          ],
          "negativeExamples": [
            "date_of_issue"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*birth.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "birth_date"
          ],
          "negativeExamples": [
            "start_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dob.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dob"
          ],
          "negativeExamples": [
            "doi"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*birth.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "birth"
          ],
          "negativeExamples": [
            "death"
          ],
          "rationale": null
        }
      ],
      "priority": 4380,
      "explanation": "This semantic type identifies date fields that specifically represent when a person was born. It's commonly used in customer databases, insurance systems, healthcare records, and HR systems. The type distinguishes birth dates from other date fields like policy dates, hire dates, or transaction dates by looking for specific keywords like \"birth\", \"dob\" (date of birth), or phrases like \"date_of_birth\". This is particularly important in systems where multiple date fields exist and accurate identification of birth date fields is crucial for age calculations, eligibility determinations, and compliance requirements.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:30:56.823078"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_driving_licence",
      "description": "Date when a driver's license was first issued or renewed",
      "pluginType": "regex",
      "regexPattern": "(?i).*(licen[cs]e|driver).*(issue|issued|date|grant|effective|valid|start).*|.*(issue|issued|grant|effective|valid|start).*(licen[cs]e|driver).*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "2025-12-31",
        "1985-04-12",
        "DL123456789",
        "VALID",
        "EXPIRED",
        "Class C",
        "California",
        "John Smith"
      ],
      "positiveHeaderExamples": [
        "license_issue_date",
        "driver_license_date",
        "dl_issue_dt",
        "license_granted_date",
        "driver_lic_issue_date",
        "license_effective_date",
        "dl_start_date",
        "license_valid_from"
      ],
      "negativeHeaderExamples": [
        "license_number",
        "birth_date",
        "license_expiry_date",
        "license_class",
        "license_state",
        "driver_name",
        "license_status",
        "renewal_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*driver.*licen[cs]e.*(issue|issued|grant|effective|valid|start).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_license_issue_date"
          ],
          "negativeExamples": [
            "driver_license_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*licen[cs]e.*(issue|issued|grant|effective|valid|start).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "license_issue_date"
          ],
          "negativeExamples": [
            "license_expiration_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*driver.*licen[cs]e.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_license_date"
          ],
          "negativeExamples": [
            "driver_birth_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(dl|lic).*(issue|issued|grant|effective|valid|start).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dl_issue_dt"
          ],
          "negativeExamples": [
            "dl_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*licen[cs]e.*(dt|date).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "license_dt"
          ],
          "negativeExamples": [
            "license_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(issue|issued|grant|effective|valid|start).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "issue_date"
          ],
          "negativeExamples": [
            "birth_date"
          ],
          "rationale": null
        }
      ],
      "priority": 4390,
      "explanation": "This semantic type identifies dates when driver's licenses were first issued or granted to individuals. It focuses on the initial issuance date rather than renewal or expiration dates. The pattern matches column headers that contain license-related terms combined with issue/grant/effective date indicators. This is useful for tracking when individuals first became licensed drivers, analyzing licensing trends, or determining driving experience duration. The regex pattern is designed to catch various combinations of license terminology with date issuance indicators while avoiding expiration dates or other license-related but non-date fields.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:31:32.748975"
    },
    {
      "resultType": "generated",
      "semanticType": "Seniority",
      "description": "Number of years a customer has been with a company, representing customer tenure or loyalty duration",
      "pluginType": "regex",
      "regexPattern": "(?:\\d{1,2}(?:\\.\\d{1,2})?|\\d{1,2}\\s*years?|\\d{1,2}\\s*yrs?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "5",
        "12",
        "3.5",
        "25",
        "1.2",
        "8 years",
        "15 yrs",
        "0.5"
      ],
      "negativeContentExamples": [
        "125",
        "-3",
        "N/A",
        "Unknown",
        "2023-01-15",
        "Active",
        "Premium",
        "abc"
      ],
      "positiveHeaderExamples": [
        "customer_loyalty_years",
        "customer_tenure_years",
        "policyholder_seniority",
        "years_with_company",
        "member_tenure",
        "loyalty_duration",
        "customer_years",
        "tenure_years"
      ],
      "negativeHeaderExamples": [
        "vehicle_age",
        "policy_length",
        "customer_age",
        "warranty_years",
        "product_age",
        "contract_duration",
        "years_in_business",
        "employee_years"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*(?:loyalty|tenure).*years?.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_loyalty_years"
          ],
          "negativeExamples": [
            "customer_age_years"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:policyholder|member).*(?:seniority|tenure).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policyholder_seniority"
          ],
          "negativeExamples": [
            "policy_length"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*customer.*(?:tenure|years_with).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_tenure_years"
          ],
          "negativeExamples": [
            "vehicle_age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:loyalty|tenure|seniority).*years?.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "loyalty_years"
          ],
          "negativeExamples": [
            "warranty_years"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:years_with|time_with).*(?:company|us).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "years_with_company"
          ],
          "negativeExamples": [
            "years_in_business"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:tenure|seniority).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "tenure"
          ],
          "negativeExamples": [
            "duration"
          ],
          "rationale": null
        }
      ],
      "priority": 4400,
      "explanation": "This semantic type identifies data representing the number of years a customer has been associated with a company, indicating their loyalty or tenure. It captures numeric values typically ranging from 0 to around 50 years, often expressed as whole numbers or decimals (for partial years). This type is commonly used in customer relationship management, insurance, banking, and subscription-based businesses to analyze customer retention, segment customers by loyalty, and calculate lifetime value. The pattern distinguishes customer loyalty years from other time-based measurements like product age, warranty periods, or employee tenure by focusing specifically on the customer-company relationship duration.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:32:06.826205"
    },
    {
      "resultType": "generated",
      "semanticType": "Policies_in_force",
      "description": "Number representing the count of currently active insurance policies",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "5",
        "12",
        "0",
        "1",
        "25",
        "100",
        "3",
        "47"
      ],
      "negativeContentExamples": [
        "5.5",
        "-2",
        "12.99",
        "N/A",
        "unlimited",
        "3.14",
        "-10"
      ],
      "positiveHeaderExamples": [
        "active_policy_count",
        "policies_count",
        "total_policies_held",
        "current_policies",
        "active_policies_num",
        "policy_count_active",
        "num_active_policies",
        "policies_in_force"
      ],
      "negativeHeaderExamples": [
        "max_policies",
        "active_customers",
        "policy_premium",
        "expired_policies",
        "policy_types",
        "cancelled_policies",
        "policy_value",
        "pending_policies"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*active.*polic(y|ies).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "active_policy_count"
          ],
          "negativeExamples": [
            "inactive_policy_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*polic(y|ies).*(count|number).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_policies_count"
          ],
          "negativeExamples": [
            "expired_policies_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*polic(y|ies).*(held|active).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_policies_held"
          ],
          "negativeExamples": [
            "total_policies_cancelled"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic(y|ies).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_count"
          ],
          "negativeExamples": [
            "policy_types"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*active.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "active_count"
          ],
          "negativeExamples": [
            "active_customers"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4410,
      "explanation": "This semantic type identifies numeric values representing the count of currently active insurance policies. It's commonly used in insurance analytics, customer dashboards, and portfolio management systems to track how many policies are currently in force. The pattern matches positive integers only, as policy counts cannot be negative or fractional. Header patterns focus on combinations of terms like \"active\", \"current\", \"policies\", and \"count\" while excluding related but different concepts like maximum policy limits, customer counts, or policy values.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:32:37.784589"
    },
    {
      "resultType": "generated",
      "semanticType": "Max_policies",
      "description": "Represents the highest number of insurance policies held simultaneously by a customer or entity at any point in time",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "5",
        "12",
        "1",
        "23",
        "8",
        "15",
        "3",
        "47"
      ],
      "negativeContentExamples": [
        "-2",
        "3.5",
        "N/A",
        "Unknown",
        "TBD",
        "Active"
      ],
      "positiveHeaderExamples": [
        "peak_policy_total",
        "max_policies_inforce",
        "peak_policy_count",
        "maximum_policies_held",
        "highest_policy_number",
        "max_concurrent_policies",
        "peak_policies_active",
        "policy_count_maximum"
      ],
      "negativeHeaderExamples": [
        "min_policies",
        "average_policies",
        "current_policy_count",
        "total_policy_value",
        "policy_premium_peak",
        "expired_policies",
        "cancelled_policies",
        "policy_start_date"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*peak.*polic(y|ies).*total.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_policy_total"
          ],
          "negativeExamples": [
            "current_policy_total"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*polic(y|ies).*(inforce|count|held).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_policies_inforce"
          ],
          "negativeExamples": [
            "min_policies_inforce"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(highest|maximum).*polic(y|ies).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "highest_policy_count"
          ],
          "negativeExamples": [
            "lowest_policy_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*polic(y|ies).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_policy_count"
          ],
          "negativeExamples": [
            "peak_premium_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*polic(y|ies).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_policies"
          ],
          "negativeExamples": [
            "min_policies"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic(y|ies).*(peak|max|maximum|highest).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_peak"
          ],
          "negativeExamples": [
            "policies_average"
          ],
          "rationale": null
        }
      ],
      "priority": 4420,
      "explanation": "This semantic type identifies data representing the peak or maximum number of insurance policies that a customer or entity has held simultaneously at any point in their relationship history. This is a key metric in insurance analytics for understanding customer engagement levels, risk assessment, and portfolio management. The value is always a positive integer representing the count of policies, and is typically used for customer segmentation, risk modeling, and business intelligence reporting in insurance systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:33:15.355357"
    },
    {
      "resultType": "generated",
      "semanticType": "Max_products",
      "description": "Maximum number of different product types or varieties held simultaneously at any given time",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "15",
        "3",
        "27",
        "8",
        "42",
        "1",
        "156",
        "73"
      ],
      "negativeContentExamples": [
        "-5",
        "12.5",
        "0.75",
        "ABC123",
        "N/A",
        "15%",
        "$25",
        "15.0%"
      ],
      "positiveHeaderExamples": [
        "max_products_held",
        "peak_product_count",
        "product_variety_peak",
        "max_product_types",
        "peak_variety_count",
        "maximum_products_together",
        "highest_product_diversity",
        "peak_product_variety"
      ],
      "negativeHeaderExamples": [
        "product_id",
        "total_products_sold",
        "product_name",
        "average_products",
        "product_price",
        "min_products_held",
        "product_category",
        "current_inventory"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*max.*product.*variety.*peak.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_product_variety_peak"
          ],
          "negativeExamples": [
            "min_product_variety_peak"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*product.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_product_count"
          ],
          "negativeExamples": [
            "peak_sales_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*products.*held.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_products_held"
          ],
          "negativeExamples": [
            "max_inventory_held"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*product.*variety.*max.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "product_variety_max"
          ],
          "negativeExamples": [
            "product_sales_max"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*variety.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_variety"
          ],
          "negativeExamples": [
            "peak_revenue"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak"
          ],
          "negativeExamples": [
            "valley"
          ],
          "rationale": null
        }
      ],
      "priority": 4430,
      "explanation": "This semantic type identifies numeric values representing the maximum number of different product types or varieties that were held simultaneously at any point in time. It's commonly used in inventory management, retail analytics, and supply chain optimization to track the peak diversity of products maintained together. The values are always positive integers representing counts of distinct product varieties, not quantities of individual items. This metric helps businesses understand their maximum operational complexity in terms of product variety management.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:33:51.874368"
    },
    {
      "resultType": "generated",
      "semanticType": "Lapse",
      "description": "Count of insurance policies that have lapsed or been cancelled before their natural expiration date",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "15",
        "127",
        "3",
        "89",
        "1",
        "456",
        "22"
      ],
      "negativeContentExamples": [
        "15.5",
        "-3",
        "2023-01-15",
        "N/A",
        "12.75%",
        "$1,250",
        "voluntary",
        "non-payment"
      ],
      "positiveHeaderExamples": [
        "cancelled_policy_count",
        "lapse_count",
        "policies_lapsed",
        "terminated_policies",
        "early_termination_count",
        "policy_cancellations",
        "lapsed_policy_total",
        "cancelled_count"
      ],
      "negativeHeaderExamples": [
        "lapse_date",
        "cancellation_reason",
        "policy_premium",
        "active_policies",
        "renewal_count",
        "policy_value",
        "termination_fee",
        "lapse_percentage"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*cancel.*policy.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cancelled_policy_count"
          ],
          "negativeExamples": [
            "cancelled_policy_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*lapse.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lapse_count"
          ],
          "negativeExamples": [
            "lapse_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policies.*lapsed.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_lapsed"
          ],
          "negativeExamples": [
            "policies_active"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*terminated.*policy.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "terminated_policy_count"
          ],
          "negativeExamples": [
            "terminated_policy_reason"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*early.*termination.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "early_termination_count"
          ],
          "negativeExamples": [
            "early_termination_fee"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4440,
      "explanation": "This semantic type identifies numeric counts of insurance policies that have been cancelled, lapsed, or terminated before their natural expiration date. It's commonly used in insurance analytics to track policy retention metrics, calculate lapse rates, and monitor business performance. The pattern matches simple integer values representing counts, and the header patterns recognize various ways this metric might be labeled in datasets, from specific terms like \"cancelled_policy_count\" to more general variations like \"policies_lapsed\" or \"lapse_count\".",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:34:25.558507"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_lapse",
      "description": "Date when an insurance policy, subscription, or service contract was cancelled or terminated",
      "pluginType": "regex",
      "regexPattern": "(?i).*(cancel|terminat|lapse|discontinu|expir|end|cease|void|revok|withdraw).*date.*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "2025-06-15",
        "ACTIVE",
        "PENDING",
        "12345",
        "N/A",
        "TBD",
        "ONGOING",
        "RENEWED"
      ],
      "positiveHeaderExamples": [
        "cancellation_date",
        "termination_date",
        "lapse_date",
        "policy_cancel_date",
        "discontinuation_date",
        "end_date",
        "void_date",
        "expiry_date"
      ],
      "negativeHeaderExamples": [
        "effective_date",
        "renewal_date",
        "start_date",
        "issue_date",
        "creation_date",
        "payment_date",
        "birth_date",
        "due_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*(cancel|terminat|lapse).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_cancellation_date"
          ],
          "negativeExamples": [
            "policy_effective_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(cancel|terminat|lapse|discontinu).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "termination_date"
          ],
          "negativeExamples": [
            "creation_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(lapse|terminat|cancel).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lapse_date"
          ],
          "negativeExamples": [
            "renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(end|cease|expir).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "end_date"
          ],
          "negativeExamples": [
            "start_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(void|revok|withdraw).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "void_date"
          ],
          "negativeExamples": [
            "issue_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4450,
      "explanation": "This semantic type identifies dates when policies, contracts, or services were cancelled or terminated. It's commonly used in insurance, subscription services, and contract management systems to track when coverage or services ended. The pattern matches various terms related to cancellation, termination, lapse, and discontinuation combined with date indicators. This helps distinguish cancellation dates from other important dates like effective dates, renewal dates, or payment dates in policy management systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:35:00.603849"
    },
    {
      "resultType": "generated",
      "semanticType": "Payment",
      "description": "Payment status indicators showing whether payments are current, overdue, or in various states of completion",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "CURRENT",
        "OVERDUE",
        "PENDING",
        "PAID",
        "UNPAID",
        "LATE",
        "DELINQUENT",
        "PROCESSING",
        "FAILED",
        "CANCELLED",
        "REFUNDED",
        "PARTIAL",
        "COMPLETE",
        "INCOMPLETE",
        "ACTIVE",
        "INACTIVE",
        "SUSPENDED",
        "GOOD STANDING",
        "DEFAULT",
        "SETTLED"
      ],
      "backout": "(?i).*(current|overdue|pending|paid|unpaid|late|delinquent|processing|failed|cancelled|refunded|partial|complete|incomplete|active|inactive|suspended|standing|default|settled).*",
      "positiveContentExamples": [
        "current",
        "overdue",
        "pending",
        "paid",
        "unpaid",
        "late",
        "delinquent",
        "good standing"
      ],
      "negativeContentExamples": [
        "2024-01-15",
        "1250.00",
        "monthly",
        "credit card",
        "ACH",
        "wire transfer",
        "check",
        "cash"
      ],
      "positiveHeaderExamples": [
        "payment_status",
        "premium_status",
        "account_status",
        "billing_status",
        "pay_status",
        "payment_state",
        "current_status",
        "loan_status"
      ],
      "negativeHeaderExamples": [
        "payment_frequency",
        "payment_method_code",
        "amount_paid",
        "payment_date",
        "payment_amount",
        "payment_id",
        "payment_type",
        "payment_reference"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*payment.*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_status"
          ],
          "negativeExamples": [
            "payment_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_status"
          ],
          "negativeExamples": [
            "premium_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*account.*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "account_status"
          ],
          "negativeExamples": [
            "account_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(pay|payment).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "pay_status"
          ],
          "negativeExamples": [
            "pay_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "status"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4460,
      "explanation": "This semantic type identifies payment status indicators that describe the current state of payments or premium obligations. It captures whether payments are up to date (current), behind schedule (overdue, late, delinquent), in process (pending, processing), or completed (paid, settled). This is commonly used in financial systems, billing applications, and subscription services to track payment compliance and account standing. The type distinguishes between status indicators and other payment-related data like amounts, dates, or method codes.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:35:37.163380"
    },
    {
      "resultType": "generated",
      "semanticType": "Premium",
      "description": "Net insurance premium amounts charged for coverage, excluding taxes, fees, and commissions",
      "pluginType": "regex",
      "regexPattern": "\\d{1,3}(?:,\\d{3})*(?:\\.\\d{2})?|\\d+\\.\\d{2}|\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1250.00",
        "2,450.75",
        "850",
        "15,000.00",
        "3,275.50",
        "750.25",
        "12,500",
        "4,825.99"
      ],
      "negativeContentExamples": [
        "0.125",
        "15%",
        "$1,250.00",
        "1250.00 USD",
        "N/A",
        "TBD",
        "-500.00",
        "1,250.000"
      ],
      "positiveHeaderExamples": [
        "net_premium_amount",
        "premium_yearly",
        "coverage_cost",
        "annual_premium",
        "monthly_premium_amt",
        "insurance_premium",
        "net_premium",
        "premium_amount"
      ],
      "negativeHeaderExamples": [
        "gross_premium",
        "premium_rate",
        "premium_percentage",
        "total_premium_with_tax",
        "commission_rate",
        "deductible_amount",
        "policy_fee",
        "premium_tax"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*net.*premium.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "net_premium_amount"
          ],
          "negativeExamples": [
            "gross_premium_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*(yearly|annual|monthly).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_yearly"
          ],
          "negativeExamples": [
            "premium_rate_yearly"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(coverage|insurance).*cost.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "coverage_cost"
          ],
          "negativeExamples": [
            "coverage_cost_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*net.*premium.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "net_premium"
          ],
          "negativeExamples": [
            "net_premium_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*(amt|amount).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_amt"
          ],
          "negativeExamples": [
            "premium_rate_amt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium"
          ],
          "negativeExamples": [
            "premium_rate"
          ],
          "rationale": null
        }
      ],
      "priority": 4470,
      "explanation": "This semantic type identifies net insurance premium amounts - the base cost charged for insurance coverage before adding taxes, fees, commissions, or other surcharges. It's commonly found in insurance datasets, billing systems, and financial reports. The pattern matches monetary amounts in standard formats (with or without comma separators and decimal places) but excludes currency symbols, percentages, and rate indicators that would suggest gross premiums or percentage-based calculations rather than net premium amounts.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:36:12.244144"
    },
    {
      "resultType": "generated",
      "semanticType": "Cost_claims_year",
      "description": "Annual claim expense representing yearly payout totals, typically monetary amounts for insurance claims or similar financial obligations",
      "pluginType": "regex",
      "regexPattern": "(?i)^\\s*[\\$\u00a3\u20ac\u00a5\u20b9]?\\s*[0-9]{1,3}(?:[,\\s][0-9]{3})*(?:\\.[0-9]{2})?\\s*(?:USD|EUR|GBP|CAD|AUD)?\\s*$",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "$125,000.00",
        "\u20ac89,500.50",
        "\u00a3234,750",
        "1,500,000.00",
        "$45,890.25",
        "567,234",
        "$2,345,678.99",
        "\u20ac156,789.45"
      ],
      "negativeContentExamples": [
        "$45.5",
        "Jan-2023",
        "Q4",
        "12.5%",
        "N/A",
        "PENDING",
        "claim_id_12345"
      ],
      "positiveHeaderExamples": [
        "annual_claim_expense",
        "yearly_payout_total",
        "claims_cost_current_year",
        "total_claims_amount",
        "annual_claim_cost",
        "yearly_claim_expense_sum",
        "claim_payout_annual",
        "total_annual_claims"
      ],
      "negativeHeaderExamples": [
        "claims_count",
        "year_to_date",
        "monthly_claims",
        "claim_number",
        "claim_date",
        "quarterly_expense",
        "claim_status",
        "policy_number"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*annual.*claim.*expense.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "annual_claim_expense_total"
          ],
          "negativeExamples": [
            "monthly_claim_expense"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*yearly.*claim.*cost.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "yearly_claim_cost_amount"
          ],
          "negativeExamples": [
            "daily_claim_cost"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*cost.*current.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_cost_current_year"
          ],
          "negativeExamples": [
            "claims_cost_current_month"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*claims.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_claims_amount"
          ],
          "negativeExamples": [
            "total_claims_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claim.*payout.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claim_payout_total"
          ],
          "negativeExamples": [
            "claim_processing_time"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*expense.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "expense"
          ],
          "negativeExamples": [
            "revenue"
          ],
          "rationale": null
        }
      ],
      "priority": 4480,
      "explanation": "This semantic type identifies annual claim expenses, which represent yearly payout totals typically found in insurance, healthcare, or financial datasets. It captures monetary amounts that represent the total cost of claims paid out over a year. The pattern matches various currency formats including dollar signs, commas for thousands separators, and decimal places for cents. It's designed to distinguish between actual expense amounts and other claim-related data like counts, dates, or identifiers. This type is particularly useful for financial analysis, budgeting, and actuarial calculations where annual claim costs need to be identified and processed separately from other claim-related metrics.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:36:46.858118"
    },
    {
      "resultType": "generated",
      "semanticType": "N_claims_year",
      "description": "Number of insurance claims filed in the current year",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1",
        "5",
        "12",
        "47",
        "156",
        "2847",
        "10293"
      ],
      "negativeContentExamples": [
        "-5",
        "12.5",
        "$1,250",
        "15%",
        "N/A",
        "pending",
        "2023-12-31",
        "auto"
      ],
      "positiveHeaderExamples": [
        "claims_count_current_year",
        "n_claims_year",
        "current_year_incidents",
        "claims_this_year",
        "yearly_claims_total",
        "num_claims_current",
        "claims_filed_ytd",
        "incident_count_year"
      ],
      "negativeHeaderExamples": [
        "claims_amount",
        "total_claims",
        "claims_value_current_year",
        "premium_amount",
        "policy_count",
        "claims_last_year",
        "settlement_amount",
        "deductible_total"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*claims.*count.*current.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_count_current_year"
          ],
          "negativeExamples": [
            "claims_amount_current_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*year.*claims.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_year_claims_total"
          ],
          "negativeExamples": [
            "current_year_premiums"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*n.*claims.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "n_claims_year"
          ],
          "negativeExamples": [
            "n_policies_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*this.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_this_year"
          ],
          "negativeExamples": [
            "revenue_this_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*yearly.*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "yearly_claims_count"
          ],
          "negativeExamples": [
            "yearly_claims_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_count"
          ],
          "negativeExamples": [
            "claims_amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4490,
      "explanation": "This semantic type identifies columns containing the count of insurance claims filed in the current year. It's commonly used in insurance analytics to track claim frequency and volume for the current reporting period. The pattern matches non-negative integers representing the number of incidents or claims reported. This metric is crucial for risk assessment, trend analysis, and operational planning in insurance companies.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:37:18.495553"
    },
    {
      "resultType": "generated",
      "semanticType": "N_claims_history",
      "description": "Total number of claims ever filed by an individual or entity over their entire history",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1",
        "5",
        "12",
        "27",
        "156",
        "3",
        "89"
      ],
      "negativeContentExamples": [
        "0.5",
        "12.75",
        "-3",
        "N/A",
        "pending",
        "1,250.00",
        "3.2%",
        "monthly"
      ],
      "positiveHeaderExamples": [
        "lifetime_claim_count",
        "total_claims_count",
        "claims_history_count",
        "all_time_claims",
        "total_claim_number",
        "lifetime_claims_filed",
        "cumulative_claim_count",
        "historical_claims_total"
      ],
      "negativeHeaderExamples": [
        "claims_frequency",
        "claims_ratio",
        "claim_amount",
        "monthly_claims",
        "claim_rate",
        "claims_percentage",
        "average_claims",
        "claim_cost"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*lifetime.*claim.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lifetime_claim_count"
          ],
          "negativeExamples": [
            "lifetime_claim_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_claims_count"
          ],
          "negativeExamples": [
            "total_claims_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*history.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_history_count"
          ],
          "negativeExamples": [
            "claims_history_summary"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*all.*time.*claims.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "all_time_claims"
          ],
          "negativeExamples": [
            "all_time_premiums"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claim.*total.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claim_total"
          ],
          "negativeExamples": [
            "claim_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4500,
      "explanation": "This semantic type identifies columns containing the total number of insurance claims that have been filed by an individual or entity throughout their entire history. This is a cumulative count that only increases over time and represents the complete claims experience. It's commonly used in insurance analytics for risk assessment, customer profiling, and actuarial analysis. The values are always non-negative integers, as partial claims don't exist and the count cannot decrease. This differs from periodic claim counts, claim frequencies, or claim amounts which measure different aspects of claims activity.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:37:53.598026"
    },
    {
      "resultType": "generated",
      "semanticType": "R_Claims_history",
      "description": "Insurance claim frequency rate representing the average number of claims per year or per policy period",
      "pluginType": "regex",
      "regexPattern": "\\d*\\.?\\d+\\s*(claims?\\s*)?(per\\s+year|annually|/year|/yr|yearly)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2.3",
        "0.85",
        "1.2 claims per year",
        "3.45",
        "0.12",
        "4.7 annually",
        "1.0",
        "2.89 claims/year"
      ],
      "negativeContentExamples": [
        "$2,500.00",
        "Policy123456",
        "2023-01-15",
        "Auto Insurance",
        "Approved",
        "John Smith",
        "High Risk"
      ],
      "positiveHeaderExamples": [
        "claim_frequency_rate",
        "claims_per_year_ratio",
        "claims_frequency_ratio",
        "annual_claim_frequency",
        "yearly_claim_rate",
        "avg_claims_per_year",
        "claim_rate_annual",
        "frequency_rate"
      ],
      "negativeHeaderExamples": [
        "claims_count",
        "policy_duration",
        "claim_amount",
        "premium_rate",
        "policy_number",
        "claim_status",
        "coverage_type",
        "deductible_amount"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*claim.*frequency.*rate.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claim_frequency_rate"
          ],
          "negativeExamples": [
            "claim_severity_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*per.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_per_year_ratio"
          ],
          "negativeExamples": [
            "claims_per_policy"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claim.*frequency.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_frequency_ratio"
          ],
          "negativeExamples": [
            "claim_frequency_band"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*annual.*claim.*rate.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "annual_claim_rate"
          ],
          "negativeExamples": [
            "annual_premium_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(frequency|rate).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "frequency"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4510,
      "explanation": "This semantic type identifies insurance claim frequency rates, which represent the average number of claims that occur per year or per policy period. These rates are crucial metrics in insurance analytics for risk assessment, pricing models, and actuarial calculations. The values are typically decimal numbers representing claims per time period, and may include descriptive text indicating the time frame (per year, annually, etc.). This type helps distinguish frequency metrics from other insurance-related data like claim counts, amounts, or policy identifiers.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:38:26.848678"
    },
    {
      "resultType": "generated",
      "semanticType": "Type_risk",
      "description": "Insurance risk category classifications that define levels of exposure or risk types for underwriting purposes",
      "pluginType": "regex",
      "regexPattern": "(?i)(low|medium|high|standard|preferred|substandard|super preferred|catastrophic|minimal|moderate|severe|critical|basic|enhanced|premium|standard plus|non-standard|high risk|low risk|class [1-9]|category [a-z]|tier [1-9]|level [1-9]|grade [a-e]|group [1-9])",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "High",
        "Low Risk",
        "Standard",
        "Preferred",
        "Class 3",
        "Category A",
        "Tier 1",
        "Super Preferred"
      ],
      "negativeContentExamples": [
        "85.5",
        "Auto",
        "Comprehensive",
        "Annual",
        "Active",
        "Approved",
        "Individual",
        "Commercial"
      ],
      "positiveHeaderExamples": [
        "risk_type_code",
        "vehicle_risk_category",
        "insurance_risk_class",
        "policy_risk_tier",
        "underwriting_risk_level",
        "risk_classification",
        "exposure_category",
        "risk_grade"
      ],
      "negativeHeaderExamples": [
        "risk_score",
        "insurance_type",
        "policy_premium",
        "coverage_amount",
        "claim_status",
        "customer_rating",
        "policy_number",
        "deductible_amount"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*risk.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_risk_category"
          ],
          "negativeExamples": [
            "vehicle_maintenance_category"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*insurance.*risk.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_risk_type"
          ],
          "negativeExamples": [
            "insurance_policy_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*risk.*type.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_type_code"
          ],
          "negativeExamples": [
            "product_type_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*risk.*class.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_class"
          ],
          "negativeExamples": [
            "asset_class"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*risk.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_category"
          ],
          "negativeExamples": [
            "product_category"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "category"
          ],
          "negativeExamples": [
            "description"
          ],
          "rationale": null
        }
      ],
      "priority": 4520,
      "explanation": "This semantic type identifies insurance risk categories that classify the level of exposure or risk type for underwriting and pricing purposes. It captures categorical classifications like \"High\", \"Low\", \"Standard\", \"Preferred\", as well as coded classifications like \"Class 1\", \"Category A\", or \"Tier 2\". This is distinct from numerical risk scores or insurance product types, focusing specifically on categorical risk classifications used in the insurance industry for grouping policies and determining coverage terms.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:39:01.839655"
    },
    {
      "resultType": "generated",
      "semanticType": "Area",
      "description": "Classification of geographic areas as urban or rural, including common variations and abbreviations",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "URBAN",
        "RURAL",
        "URBAN",
        "RURAL",
        "URBAN",
        "RURAL",
        "U",
        "R",
        "CITY",
        "COUNTRY",
        "METROPOLITAN",
        "NON-METROPOLITAN",
        "METRO",
        "NON-METRO",
        "SUBURBAN",
        "SEMI-URBAN"
      ],
      "backout": "(?i).*(urban|rural|city|country|metro|suburban).*",
      "positiveContentExamples": [
        "Urban",
        "Rural",
        "URBAN",
        "RURAL",
        "U",
        "R",
        "City",
        "Metropolitan"
      ],
      "negativeContentExamples": [
        "Downtown",
        "Residential",
        "Commercial",
        "Industrial",
        "North",
        "Central",
        "12345",
        "Zone A"
      ],
      "positiveHeaderExamples": [
        "area_type",
        "location_classification",
        "urban_rural_code",
        "area_classification",
        "location_type",
        "settlement_type",
        "geographic_classification",
        "region_type"
      ],
      "negativeHeaderExamples": [
        "area_code",
        "region_name",
        "location_id",
        "postal_code",
        "district_name",
        "zone_number",
        "address_line",
        "city_name"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*location.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "location_type"
          ],
          "negativeExamples": [
            "location_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*area.*classification.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "area_classification"
          ],
          "negativeExamples": [
            "area_size"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*urban.*rural.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "urban_rural_indicator"
          ],
          "negativeExamples": [
            "urban_population"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*area.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "area_type"
          ],
          "negativeExamples": [
            "area_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(classification|category).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "location_classification"
          ],
          "negativeExamples": [
            "region_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "type"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 4530,
      "explanation": "This semantic type identifies data that classifies geographic locations as urban or rural areas. It's commonly used in demographic analysis, census data, planning studies, and geographic information systems. The type recognizes standard classifications including full terms (Urban/Rural), abbreviations (U/R), and related terminology like Metropolitan/Non-Metropolitan, City/Country, and Suburban. This classification is essential for understanding population distribution, infrastructure planning, and socioeconomic analysis across different settlement types.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:39:37.230273"
    },
    {
      "resultType": "generated",
      "semanticType": "Second_driver",
      "description": "Boolean flag indicating whether a policy, account, or record includes additional drivers beyond the primary driver",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "Y",
        "N",
        "YES",
        "NO",
        "TRUE",
        "FALSE",
        "TRUE",
        "FALSE",
        "TRUE",
        "FALSE",
        "1",
        "0"
      ],
      "backout": "(?i)(y|n|yes|no|true|false|1|0)",
      "positiveContentExamples": [
        "Y",
        "N",
        "Yes",
        "No",
        "TRUE",
        "FALSE",
        "1",
        "0"
      ],
      "negativeContentExamples": [
        "2",
        "3",
        "Maybe",
        "Unknown",
        "John Smith",
        "25",
        "Active"
      ],
      "positiveHeaderExamples": [
        "multiple_driver_flag",
        "has_additional_driver",
        "additional_driver_ind",
        "multi_driver_flag",
        "extra_driver_indicator",
        "secondary_driver_flag",
        "more_drivers_flag",
        "other_driver_present"
      ],
      "negativeHeaderExamples": [
        "driver_count",
        "driver_age",
        "primary_driver_name",
        "driver_license_number",
        "vehicle_count",
        "policy_flag",
        "coverage_flag",
        "discount_flag"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*multiple.*driver.*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "multiple_driver_flag"
          ],
          "negativeExamples": [
            "multiple_vehicle_flag"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*additional.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "has_additional_driver"
          ],
          "negativeExamples": [
            "additional_vehicle_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*multi.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "multi_driver_ind"
          ],
          "negativeExamples": [
            "multi_policy_discount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*extra.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "extra_driver_flag"
          ],
          "negativeExamples": [
            "extra_coverage_flag"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*driver.*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "secondary_driver_flag"
          ],
          "negativeExamples": [
            "driver_age_flag"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "flag"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 4540,
      "explanation": "This semantic type identifies boolean flags that indicate whether a policy, account, or record includes additional drivers beyond the primary driver. This is commonly used in insurance systems, vehicle registration databases, and rental car systems where it's important to track whether multiple people are authorized to drive. The flag typically appears as Y/N, Yes/No, True/False, or 1/0 values and is distinguished from driver counts or other driver-related attributes by its binary nature and flag-like column naming patterns.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:40:09.202704"
    },
    {
      "resultType": "generated",
      "semanticType": "Year_matriculation",
      "description": "Year when a vehicle was first registered or licensed for road use",
      "pluginType": "regex",
      "regexPattern": "(19[5-9][0-9]|20[0-9][0-9]|2100)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2023",
        "2015",
        "2008",
        "1995",
        "2001",
        "2019",
        "1987",
        "2022"
      ],
      "negativeContentExamples": [
        "1949",
        "2101",
        "23",
        "15",
        "ABC123",
        "2023-01-15",
        "Jan 2023",
        "1850"
      ],
      "positiveHeaderExamples": [
        "registration_year",
        "vehicle_year",
        "car_reg_year",
        "vehicle_registration_year",
        "reg_year",
        "first_registration_year",
        "vehicle_reg_yr",
        "registration_yr"
      ],
      "negativeHeaderExamples": [
        "model_year",
        "registration_number",
        "manufacture_year",
        "production_year",
        "vehicle_age",
        "registration_date",
        "year_built",
        "purchase_year"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*reg.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_registration_year"
          ],
          "negativeExamples": [
            "vehicle_model_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*car.*reg.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "car_reg_year"
          ],
          "negativeExamples": [
            "car_manufacture_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*registration.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "registration_year"
          ],
          "negativeExamples": [
            "registration_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*reg.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "reg_year"
          ],
          "negativeExamples": [
            "reg_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_year"
          ],
          "negativeExamples": [
            "vehicle_age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "year"
          ],
          "negativeExamples": [
            "month"
          ],
          "rationale": null
        }
      ],
      "priority": 4550,
      "explanation": "This semantic type identifies the year when a vehicle was first registered or licensed for road use, which is distinct from the model year or manufacturing year. Vehicle registration year is important for regulatory compliance, insurance calculations, and vehicle history tracking. The pattern matches 4-digit years from 1950 to 2100, covering the realistic range of vehicle registration years. This differs from model year as registration can occur in a different year than when the vehicle was manufactured, and it's specifically about the legal registration process rather than production timing.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:40:40.538465"
    },
    {
      "resultType": "generated",
      "semanticType": "Power",
      "description": "Vehicle engine power output measured in horsepower units",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d+)?\\s*(hp|HP|horsepower|Horsepower|HORSEPOWER)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "150",
        "275.5",
        "400 hp",
        "185 HP",
        "320 horsepower",
        "450.0",
        "95 Horsepower",
        "750 HORSEPOWER"
      ],
      "negativeContentExamples": [
        "150 kW",
        "2.5L",
        "V8",
        "3000 RPM",
        "200 Nm",
        "Turbo",
        "Diesel",
        "Manual"
      ],
      "positiveHeaderExamples": [
        "engine_horsepower",
        "power_output",
        "engine_power_hp",
        "horsepower",
        "engine_hp",
        "max_horsepower",
        "vehicle_hp",
        "motor_horsepower"
      ],
      "negativeHeaderExamples": [
        "engine_size",
        "kilowatts",
        "engine_displacement",
        "power_consumption",
        "engine_torque",
        "fuel_capacity",
        "engine_type",
        "transmission"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*engine.*horsepower.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_horsepower"
          ],
          "negativeExamples": [
            "engine_displacement"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*engine.*power.*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_power_hp"
          ],
          "negativeExamples": [
            "engine_power_kw"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*power.*output.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "power_output"
          ],
          "negativeExamples": [
            "power_consumption"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*engine.*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_hp"
          ],
          "negativeExamples": [
            "engine_cc"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*horsepower.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "horsepower"
          ],
          "negativeExamples": [
            "kilowatts"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "hp"
          ],
          "negativeExamples": [
            "kw"
          ],
          "rationale": null
        }
      ],
      "priority": 4560,
      "explanation": "This semantic type identifies vehicle engine horsepower measurements, which represent the power output rating of automotive engines. It matches numeric values that may optionally include horsepower unit indicators (hp, HP, horsepower). This is commonly found in automotive datasets, vehicle specifications, and motor vehicle registration data. The pattern accommodates both integer and decimal values, with or without explicit unit notation, as horsepower values are often stored as plain numbers with the unit implied by the column context.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:41:18.285417"
    },
    {
      "resultType": "generated",
      "semanticType": "Cylinder_capacity",
      "description": "Engine displacement representing the total cylinder volume, typically measured in cubic centimeters (cc), liters (L), or cubic inches",
      "pluginType": "regex",
      "regexPattern": "(?i)\\d+(\\.\\d+)?\\s*(cc|l|liters?|cubic\\s*(cm|centimeters?|inches?)|ci)\\b",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1600cc",
        "2.0L",
        "3.5 liters",
        "350 cubic inches",
        "1800 cc",
        "4.6 L",
        "427 ci",
        "2500 cubic cm"
      ],
      "negativeContentExamples": [
        "150 hp",
        "300 nm",
        "6000 rpm",
        "V8",
        "turbo",
        "diesel",
        "automatic",
        "AWD"
      ],
      "positiveHeaderExamples": [
        "engine_displacement",
        "cylinder_capacity_cc",
        "displacement_liters",
        "engine_volume",
        "motor_displacement",
        "cubic_capacity",
        "engine_size_cc",
        "displacement_cubic_inches"
      ],
      "negativeHeaderExamples": [
        "power_output",
        "capacity",
        "engine_power",
        "horsepower",
        "torque",
        "fuel_capacity",
        "cylinder_count",
        "engine_type"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*engine.*displacement.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_displacement"
          ],
          "negativeExamples": [
            "engine_power"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cylinder.*capacity.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cylinder_capacity_cc"
          ],
          "negativeExamples": [
            "cylinder_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*engine.*volume.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_volume_liters"
          ],
          "negativeExamples": [
            "fuel_volume"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(displacement|capacity).*cc.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "displacement_cc"
          ],
          "negativeExamples": [
            "tank_capacity_cc"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*displacement.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "displacement"
          ],
          "negativeExamples": [
            "water_displacement"
          ],
          "rationale": null
        }
      ],
      "priority": 4570,
      "explanation": "This semantic type identifies engine displacement values, which represent the total volume of all cylinders in an internal combustion engine. Engine displacement is a key specification for vehicles and machinery, typically expressed in cubic centimeters (cc), liters (L), or cubic inches (ci). This measurement is crucial for determining engine power potential, fuel efficiency, and regulatory classifications. The pattern recognizes various common formats including numeric values followed by appropriate unit indicators, accounting for different spacing and abbreviation conventions used across different regions and industries.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:41:51.841476"
    },
    {
      "resultType": "generated",
      "semanticType": "Value_vehicle",
      "description": "Current market value or worth of a vehicle, typically expressed as a monetary amount",
      "pluginType": "regex",
      "regexPattern": "(?i)^\\$?\\d{1,3}(,\\d{3})*(\\.\\d{2})?$|^\\d{1,6}(\\.\\d{2})?$",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "25000",
        "$18,500",
        "32750.00",
        "$45,200.50",
        "15000",
        "$8,750",
        "42500.00",
        "$67,890"
      ],
      "negativeContentExamples": [
        "-15000",
        "$25K",
        "Twenty thousand",
        "$18,500 USD",
        "25000.123",
        "$45,200.5",
        "N/A"
      ],
      "positiveHeaderExamples": [
        "market_value_2019",
        "vehicle_value",
        "car_market_value",
        "auto_market_worth",
        "current_vehicle_value",
        "market_value_estimate",
        "vehicle_market_price",
        "car_value_2023"
      ],
      "negativeHeaderExamples": [
        "purchase_price",
        "current_market_value",
        "vehicle_cost",
        "insurance_value",
        "loan_amount",
        "trade_in_value",
        "retail_price",
        "msrp"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*market.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_market_value"
          ],
          "negativeExamples": [
            "vehicle_purchase_price"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*car.*market.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "car_market_value_2024"
          ],
          "negativeExamples": [
            "car_insurance_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*market.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "market_value_2019"
          ],
          "negativeExamples": [
            "current_market_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(vehicle|car|auto).*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_value"
          ],
          "negativeExamples": [
            "vehicle_cost"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*market.*worth.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "market_worth"
          ],
          "negativeExamples": [
            "net_worth"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "value"
          ],
          "negativeExamples": [
            "price"
          ],
          "rationale": null
        }
      ],
      "priority": 4580,
      "explanation": "This semantic type identifies the current market value of vehicles, which represents what a vehicle is worth in the current marketplace. It's commonly used in automotive databases, insurance systems, and vehicle valuation platforms. The pattern matches monetary amounts typically ranging from a few thousand to hundreds of thousands of dollars, formatted with or without currency symbols and thousand separators. This differs from purchase prices (historical cost) or insurance values (replacement cost) by specifically representing current market worth.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:42:26.906466"
    },
    {
      "resultType": "generated",
      "semanticType": "N_doors",
      "description": "Number of doors on a vehicle, typically ranging from 2 to 5 doors for passenger vehicles",
      "pluginType": "regex",
      "regexPattern": "[2-5]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2",
        "3",
        "4",
        "5"
      ],
      "negativeContentExamples": [
        "1",
        "6",
        "0",
        "10",
        "sedan",
        "automatic",
        "front",
        "leather"
      ],
      "positiveHeaderExamples": [
        "number_of_doors",
        "doors_count",
        "vehicle_doors",
        "door_count",
        "num_doors",
        "doors",
        "car_door_count",
        "door_number"
      ],
      "negativeHeaderExamples": [
        "seat_count",
        "door_type",
        "window_count",
        "door_color",
        "engine_doors",
        "door_material",
        "trunk_count",
        "door_handle_type"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*door.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_door_count"
          ],
          "negativeExamples": [
            "vehicle_seat_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*number.*door.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "number_of_doors"
          ],
          "negativeExamples": [
            "number_of_seats"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*door.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "doors_count"
          ],
          "negativeExamples": [
            "seat_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*door.*num.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "door_num"
          ],
          "negativeExamples": [
            "door_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*doors.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "doors"
          ],
          "negativeExamples": [
            "windows"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "type"
          ],
          "rationale": null
        }
      ],
      "priority": 4590,
      "explanation": "This semantic type identifies numeric values representing the count of doors on a vehicle. It's commonly used in automotive datasets to classify vehicle types and configurations. The pattern matches single digits from 2 to 5, which covers the typical range for passenger vehicles: 2-door coupes/sports cars, 3-door hatchbacks, 4-door sedans/SUVs, and 5-door hatchbacks/wagons. This helps distinguish door count from other vehicle attributes like seat count, engine specifications, or door characteristics.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:42:57.209589"
    },
    {
      "resultType": "generated",
      "semanticType": "Type_fuel",
      "description": "Fuel category classification indicating the type of fuel used by vehicles or equipment: petrol, diesel, or other alternative fuel types",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "PETROL",
        "DIESEL",
        "GASOLINE",
        "GAS",
        "ELECTRIC",
        "HYBRID",
        "LPG",
        "CNG",
        "ETHANOL",
        "BIODIESEL",
        "HYDROGEN",
        "OTHER",
        "UNLEADED",
        "PREMIUM",
        "E85"
      ],
      "backout": "(?i).*(petrol|diesel|gasoline|gas|electric|hybrid|lpg|cng|ethanol|biodiesel|hydrogen|fuel|energy).*",
      "positiveContentExamples": [
        "petrol",
        "diesel",
        "gasoline",
        "electric",
        "hybrid",
        "lpg",
        "cng",
        "other"
      ],
      "negativeContentExamples": [
        "25.5",
        "high efficiency",
        "automatic",
        "manual",
        "premium grade",
        "low emissions",
        "turbocharged",
        "v6 engine"
      ],
      "positiveHeaderExamples": [
        "fuel_type",
        "energy_type",
        "fuel_category",
        "vehicle_fuel_type",
        "propulsion_type",
        "engine_fuel",
        "power_source",
        "fuel_kind"
      ],
      "negativeHeaderExamples": [
        "fuel_consumption",
        "fuel_efficiency",
        "fuel_cost",
        "fuel_tank_capacity",
        "fuel_level",
        "fuel_station",
        "refuel_date",
        "fuel_price"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*fuel.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_fuel_category"
          ],
          "negativeExamples": [
            "vehicle_fuel_consumption"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*fuel.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel_type"
          ],
          "negativeExamples": [
            "fuel_tank_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*energy.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "energy_type"
          ],
          "negativeExamples": [
            "energy_consumption_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*fuel.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel_category"
          ],
          "negativeExamples": [
            "fuel_cost_category"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*propulsion.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "propulsion"
          ],
          "negativeExamples": [
            "propulsion_system"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*fuel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel"
          ],
          "negativeExamples": [
            "refuel"
          ],
          "rationale": null
        }
      ],
      "priority": 4600,
      "explanation": "This semantic type identifies fuel category classifications used to categorize vehicles or equipment based on their primary fuel or energy source. It covers traditional fossil fuels like petrol and diesel, as well as alternative energy sources like electric, hybrid, LPG, CNG, and other emerging fuel technologies. This classification is commonly used in vehicle databases, fleet management systems, environmental reporting, and transportation analytics to group and analyze vehicles by their fuel consumption patterns and environmental impact.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:43:29.948347"
    },
    {
      "resultType": "generated",
      "semanticType": "Length",
      "description": "Vehicle length measurements representing the overall length dimension of vehicles, typically expressed in meters, feet, or other length units",
      "pluginType": "regex",
      "regexPattern": "\\d+(?:\\.\\d+)?\\s*(?:m|meters?|ft|feet|'|\"|inches?|in|cm|centimeters?|mm|millimeters?)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "4.5",
        "15.2 m",
        "18 feet",
        "5.8 meters",
        "22.5",
        "12.3 ft",
        "450 cm",
        "6200 mm"
      ],
      "negativeContentExamples": [
        "Red",
        "Toyota",
        "ABC123",
        "Sedan",
        "V6",
        "Manual",
        "Leather"
      ],
      "positiveHeaderExamples": [
        "vehicle_length_m",
        "length_meters",
        "car_length_ft",
        "overall_length",
        "truck_length_meters",
        "vehicle_len",
        "auto_length_m",
        "length_measurement"
      ],
      "negativeHeaderExamples": [
        "width_meters",
        "height_meters",
        "vehicle_weight",
        "car_model",
        "engine_size",
        "fuel_capacity",
        "wheel_diameter",
        "door_count"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*length.*(?:m|meters?|ft|feet)",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_length_m"
          ],
          "negativeExamples": [
            "vehicle_width_m"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:car|truck|auto).*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "car_length_meters"
          ],
          "negativeExamples": [
            "car_width_meters"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*overall.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "overall_length_ft"
          ],
          "negativeExamples": [
            "overall_height_ft"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*(?:m|meters?|ft|feet).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "length_meters"
          ],
          "negativeExamples": [
            "width_meters"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:len|lng).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_len"
          ],
          "negativeExamples": [
            "vehicle_wid"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "length"
          ],
          "negativeExamples": [
            "width"
          ],
          "rationale": null
        }
      ],
      "priority": 4610,
      "explanation": "This semantic type identifies vehicle length measurements, which represent the overall longitudinal dimension of vehicles from front to rear. It's commonly used in automotive databases, fleet management systems, transportation planning, and vehicle specification datasets. The pattern recognizes numeric values with optional decimal places and various unit indicators (meters, feet, centimeters, etc.). This measurement is crucial for parking space planning, garage compatibility, transportation logistics, and regulatory compliance where vehicle size restrictions apply.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:44:04.937293"
    },
    {
      "resultType": "generated",
      "semanticType": "Weight",
      "description": "Total weight specification of a vehicle, typically measured in kilograms or pounds",
      "pluginType": "regex",
      "regexPattern": "\\d+(?:\\.\\d+)?\\s*(?:kg|lbs?|pounds?|kilograms?|KG|LBS?|POUNDS?|KILOGRAMS?)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1500",
        "2250.5",
        "1800 kg",
        "3500 lbs",
        "2100.75 kilograms",
        "4200 pounds",
        "1650.0",
        "2850 KG"
      ],
      "negativeContentExamples": [
        "ABC123",
        "2023-01-15",
        "Red",
        "Toyota Camry",
        "V6 Engine",
        "Automatic",
        "4 doors",
        "185/65R15"
      ],
      "positiveHeaderExamples": [
        "vehicle_weight_kg",
        "weight_kg",
        "total_vehicle_mass",
        "gross_weight",
        "curb_weight_specification",
        "vehicle_mass_kg",
        "total_weight_lbs",
        "vehicle_weight_pounds"
      ],
      "negativeHeaderExamples": [
        "payload_weight",
        "empty_weight",
        "cargo_capacity",
        "towing_capacity",
        "engine_weight",
        "wheel_weight",
        "vehicle_length",
        "fuel_weight"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*(?:weight|mass).*kg.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_weight_kg"
          ],
          "negativeExamples": [
            "payload_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*(?:weight|mass).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_total_weight"
          ],
          "negativeExamples": [
            "vehicle_length"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:total|gross|curb).*(?:weight|mass).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_weight_specification"
          ],
          "negativeExamples": [
            "empty_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*weight.*kg.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "weight_kg"
          ],
          "negativeExamples": [
            "height_cm"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:weight|mass).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "weight"
          ],
          "negativeExamples": [
            "height"
          ],
          "rationale": null
        }
      ],
      "priority": 4620,
      "explanation": "This semantic type identifies vehicle mass/weight data, which represents the total weight specification of a vehicle. It's commonly used in automotive datasets, vehicle registration systems, and transportation logistics. The pattern matches numeric values that may include decimal points and optional weight units (kg, lbs, pounds, kilograms). The header patterns are designed to distinguish total vehicle weight from other weight-related measurements like payload weight, empty weight, or component weights. This is crucial for vehicle classification, load calculations, and regulatory compliance in transportation systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T10:44:39.624582"
    }
  ]
}