{
  "dataset": "insurance",
  "description_number": 4,
  "timestamp": "20250808_100938",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "ID",
      "description": "A numeric string representing positive integers without leading zeros or decimal components, specifically used for contract identification numbers",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "123",
        "456789",
        "9",
        "1000000",
        "2024",
        "555",
        "987654321"
      ],
      "negativeContentExamples": [
        "0",
        "01",
        "001",
        "123.45",
        "-123",
        "1.0",
        "0123",
        "12.00"
      ],
      "positiveHeaderExamples": [
        "contract_id",
        "policy_contract_number",
        "contract_num",
        "policy_id",
        "agreement_id",
        "contract_reference",
        "policy_number",
        "contract_identifier"
      ],
      "negativeHeaderExamples": [
        "contract_date",
        "agent_id",
        "contract_amount",
        "policy_type",
        "contract_status",
        "customer_id",
        "invoice_id",
        "order_id"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*contract.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_id"
          ],
          "negativeExamples": [
            "contract_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*contract.*number.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_contract_number"
          ],
          "negativeExamples": [
            "policy_contract_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*num.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_num"
          ],
          "negativeExamples": [
            "contract_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_id"
          ],
          "negativeExamples": [
            "policy_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract"
          ],
          "negativeExamples": [
            "contractor"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "id"
          ],
          "negativeExamples": [
            "idea"
          ],
          "rationale": null
        }
      ],
      "priority": 3730,
      "explanation": "This semantic type identifies numeric strings that represent contract identifiers. These are positive integers without leading zeros, commonly used in insurance, legal, and business contexts to uniquely identify contracts, policies, and agreements. The pattern ensures that values start with a non-zero digit (1-9) followed by any number of digits, preventing leading zeros which are typically not used in contract numbering systems. This type is particularly useful for identifying contract-related columns in datasets containing insurance policies, service agreements, or other contractual documents.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:52:28.347929"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_start_contract",
      "description": "A date string representing when a policy, contract, or agreement becomes effective or starts, following patterns like MM/DD/YYYY, M/D/YYYY, YYYY-MM-DD, with optional time components",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?|\\d{4}-\\d{2}-\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1/15/2024",
        "12/31/2023",
        "3/5/2024 9:30:00",
        "2024-01-15",
        "2023-12-31",
        "6/1/2024 14:25:30",
        "2024-03-20",
        "11/8/2023"
      ],
      "negativeContentExamples": [
        "2024/01/15",
        "15-01-2024",
        "Jan 15, 2024",
        "2024-1-5",
        "1/15/24",
        "2024.01.15",
        "January 15th, 2024"
      ],
      "positiveHeaderExamples": [
        "policy_start_date",
        "contract_effective_date",
        "agreement_begin_date",
        "coverage_start_dt",
        "effective_date",
        "plan_commence_date",
        "service_start_date",
        "membership_effective_dt"
      ],
      "negativeHeaderExamples": [
        "transaction_date",
        "birth_date",
        "expiry_date",
        "termination_date",
        "created_date",
        "modified_date",
        "due_date",
        "payment_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*start.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_start_date"
          ],
          "negativeExamples": [
            "policy_end_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_effective_date"
          ],
          "negativeExamples": [
            "contract_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(effective|start|begin|commence).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "effective_date"
          ],
          "negativeExamples": [
            "termination_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(eff|start|begin).*dt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "eff_dt"
          ],
          "negativeExamples": [
            "exp_dt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3740,
      "explanation": "This semantic type identifies dates that represent the beginning or effective start of policies, contracts, agreements, or other time-bound arrangements. It specifically captures dates in MM/DD/YYYY or YYYY-MM-DD formats with optional time components, distinguishing them from other date types like transaction dates or birth dates. The header patterns focus on identifying columns that contain start, effective, begin, or commence terminology combined with date indicators, making it useful for insurance, contract management, and subscription-based systems where tracking when coverage or agreements become active is critical.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:53:02.704617"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_last_renewal",
      "description": "A date value indicating when a policy, contract, or subscription was last renewed, typically in MM/DD/YYYY format with optional time component",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "3/15/2023",
        "12/1/2022",
        "6/30/2024 14:30:00",
        "1/1/2023 9:15:30",
        "11/15/2022",
        "8/7/2024 16:45:22",
        "2/28/2023",
        "10/31/2024 23:59:59"
      ],
      "negativeContentExamples": [
        "2023-03-15",
        "March 15, 2023",
        "3/15/23",
        "2023/03/15",
        "03-15-2023",
        "15-Mar-2023",
        "3/15/2023T14:30:00Z"
      ],
      "positiveHeaderExamples": [
        "last_renewal_date",
        "renewal_effective_date",
        "policy_renewal_date",
        "contract_renewal_date",
        "subscription_renewal_date",
        "renewal_dt",
        "renewed_on",
        "last_renewed_date"
      ],
      "negativeHeaderExamples": [
        "next_renewal_date",
        "claim_date",
        "expiry_date",
        "policy_start_date",
        "creation_date",
        "cancellation_date",
        "due_date",
        "payment_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*last.*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "last_renewal_date"
          ],
          "negativeExamples": [
            "next_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_effective_date"
          ],
          "negativeExamples": [
            "policy_effective_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_renewal_date"
          ],
          "negativeExamples": [
            "policy_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*dt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_dt"
          ],
          "negativeExamples": [
            "expiry_dt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewed.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewed_date"
          ],
          "negativeExamples": [
            "created_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3750,
      "explanation": "This semantic type identifies date values that represent when a policy, contract, subscription, or similar agreement was last renewed. It specifically matches the MM/DD/YYYY format with optional time components, distinguishing renewal dates from other temporal data like expiration dates, creation dates, or future renewal dates. This is commonly used in insurance, subscription services, and contract management systems to track when coverage or services were most recently renewed.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:53:40.530813"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_next_renewal",
      "description": "A future date following formats like ^\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?$ marking the scheduled renewal date",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "3/15/2024",
        "12/31/2024",
        "6/1/2025",
        "9/30/2024 14:30:00",
        "1/1/2025 9:00:00",
        "11/15/2024 16:45:30",
        "4/22/2025",
        "8/8/2024 12:00:00"
      ],
      "negativeContentExamples": [
        "2024-03-15",
        "March 15, 2024",
        "3/15/24",
        "2024/03/15",
        "15-Mar-2024",
        "3.15.2024",
        "20240315"
      ],
      "positiveHeaderExamples": [
        "next_renewal_date",
        "scheduled_renewal_date",
        "upcoming_renewal_dt",
        "policy_renewal_date",
        "contract_renewal_date",
        "subscription_renewal_date",
        "renewal_due_date",
        "next_renewal"
      ],
      "negativeHeaderExamples": [
        "last_renewal_date",
        "policy_issue_date",
        "expiration_date",
        "start_date",
        "cancellation_date",
        "previous_renewal_date",
        "original_date",
        "creation_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*next.*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "next_renewal_date"
          ],
          "negativeExamples": [
            "last_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*scheduled.*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "scheduled_renewal_date"
          ],
          "negativeExamples": [
            "policy_issue_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*upcoming.*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "upcoming_renewal"
          ],
          "negativeExamples": [
            "previous_renewal"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*dt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_dt"
          ],
          "negativeExamples": [
            "expiry_dt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal"
          ],
          "negativeExamples": [
            "cancellation"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "time"
          ],
          "rationale": null
        }
      ],
      "priority": 3760,
      "explanation": "This semantic type identifies future renewal dates in a specific MM/DD/YYYY format, optionally with time components. It's commonly used in insurance policies, subscriptions, contracts, and service agreements to indicate when a renewal is scheduled to occur. The pattern specifically matches the American date format with 1-2 digit months and days, 4-digit years, and optional time stamps. This helps distinguish renewal dates from other date types like issue dates, expiration dates, or historical renewal dates.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:54:15.162552"
    },
    {
      "resultType": "generated",
      "semanticType": "Distribution_channel",
      "description": "A binary integer value (0 or 1) representing different sales or distribution channels where each digit denotes a specific channel method",
      "pluginType": "regex",
      "regexPattern": "[01]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1"
      ],
      "negativeContentExamples": [
        "2",
        "10",
        "01",
        "-1",
        "A",
        "true",
        "false",
        "online"
      ],
      "positiveHeaderExamples": [
        "distribution_channel",
        "sales_channel_code",
        "channel_code",
        "sales_channel",
        "distribution_channel_id",
        "channel_type_code",
        "sales_dist_channel",
        "channel_indicator"
      ],
      "negativeHeaderExamples": [
        "channel_name",
        "payment_channel",
        "channel_description",
        "communication_channel",
        "marketing_channel",
        "channel_count",
        "tv_channel",
        "channel_url"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*distribution.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "distribution_channel"
          ],
          "negativeExamples": [
            "distribution_center"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*sales.*channel.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "sales_channel_code"
          ],
          "negativeExamples": [
            "sales_channel_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "channel_code"
          ],
          "negativeExamples": [
            "channel_description"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*sales.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "sales_channel"
          ],
          "negativeExamples": [
            "sales_channel_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "channel"
          ],
          "negativeExamples": [
            "channel_name"
          ],
          "rationale": null
        }
      ],
      "priority": 3770,
      "explanation": "This semantic type identifies binary coded sales or distribution channels where the values are restricted to exactly 0 or 1. This is commonly used in business systems to represent two distinct sales channels, such as online vs retail, direct vs indirect, or internal vs external distribution methods. The binary nature makes it efficient for storage and processing while providing clear categorical distinction between channel types. This differs from general boolean fields as it specifically relates to sales/distribution channel classification in business contexts.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:54:45.389842"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_birth",
      "description": "A birth date string conforming to patterns like M/d/yyyy or MM/dd/yyyy with optional time component, specifically identifying dates of birth for individuals",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "3/15/1985",
        "12/1/1990",
        "7/4/1976",
        "11/23/2001",
        "1/1/1950",
        "9/30/1988 2:30:45",
        "6/15/1995 11:45:22",
        "10/8/1972 9:15:30"
      ],
      "negativeContentExamples": [
        "1985-03-15",
        "March 15, 1985",
        "3/15/85",
        "2023/12/25",
        "12-25-1990",
        "25.12.1990",
        "1990.12.25"
      ],
      "positiveHeaderExamples": [
        "date_of_birth",
        "dob",
        "birth_date",
        "birthdate",
        "date_born",
        "born_on",
        "birth_dt",
        "patient_dob"
      ],
      "negativeHeaderExamples": [
        "policy_start_date",
        "license_issue_date",
        "hire_date",
        "expiration_date",
        "death_date",
        "anniversary_date",
        "graduation_date",
        "marriage_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*date.*of.*birth.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date_of_birth"
          ],
          "negativeExamples": [
            "date_of_hire"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*birth.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "birth_date"
          ],
          "negativeExamples": [
            "death_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dob.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dob"
          ],
          "negativeExamples": [
            "dod"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*birth.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "birth"
          ],
          "negativeExamples": [
            "death"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*born.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "born_on"
          ],
          "negativeExamples": [
            "died_on"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "time"
          ],
          "rationale": null
        }
      ],
      "priority": 3780,
      "explanation": "This semantic type identifies birth dates in M/d/yyyy or MM/dd/yyyy format with optional time components. It's specifically designed to recognize dates of birth for individuals, distinguishing them from other types of dates through both the data format and contextual header patterns. The type uses regex pattern matching to identify the specific date format while relying on header patterns to confirm the birth date context. This is particularly useful for demographic data, medical records, HR systems, and any application where birth dates need to be specifically identified and processed differently from other date fields.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:55:21.247268"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_driving_licence",
      "description": "A driver's license issue date following standard date patterns for tracking driver experience and license validity",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "3/15/2018",
        "12/1/2020",
        "7/22/2019 10:30:45",
        "1/5/2021",
        "11/28/2017 14:22:10",
        "6/3/2022",
        "9/14/2016 9:15:30",
        "4/30/2023"
      ],
      "negativeContentExamples": [
        "2018-03-15",
        "March 15, 2018",
        "3-15-2018",
        "20180315",
        "3/15/18",
        "15.03.2018",
        "2018/03/15"
      ],
      "positiveHeaderExamples": [
        "license_issue_date",
        "driver_license_date",
        "dl_issue_date",
        "driver_license_issue_date",
        "license_issued_date",
        "dl_issued_date",
        "driver_lic_issue_dt",
        "license_issue_dt"
      ],
      "negativeHeaderExamples": [
        "license_number",
        "birth_date",
        "license_expiry_date",
        "driver_license_exp_date",
        "license_class",
        "driver_name",
        "license_state",
        "expiration_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*driver.*license.*issue.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_license_issue_date"
          ],
          "negativeExamples": [
            "driver_license_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*license.*issue.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "license_issue_date"
          ],
          "negativeExamples": [
            "license_expiration_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*driver.*license.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_license_date"
          ],
          "negativeExamples": [
            "driver_birth_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dl.*issue.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dl_issue_date"
          ],
          "negativeExamples": [
            "dl_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*issue.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "issue_date"
          ],
          "negativeExamples": [
            "birth_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "number"
          ],
          "rationale": null
        }
      ],
      "priority": 3790,
      "explanation": "This semantic type identifies driver's license issue dates that follow the MM/DD/YYYY format with optional time stamps. It's specifically designed to track when a driver's license was originally issued, which is important for determining driver experience, license validity periods, and compliance with driving regulations. The pattern matches dates in the common US format with 1-2 digit months and days, 4-digit years, and optional time components. This differs from other date types like birth dates or license expiration dates by focusing specifically on the issuance context of driver's licenses.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:55:55.380505"
    },
    {
      "resultType": "generated",
      "semanticType": "Seniority",
      "description": "A positive integer representing complete years of customer relationship with the company, matching the pattern for whole years only (no zero or fractional years)",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "5",
        "12",
        "25",
        "100",
        "3",
        "18",
        "42"
      ],
      "negativeContentExamples": [
        "0",
        "-5",
        "2.5",
        "01",
        "3.0",
        "fifteen",
        "1.25",
        "-1"
      ],
      "positiveHeaderExamples": [
        "customer_tenure_years",
        "policyholder_seniority",
        "client_relationship_years",
        "membership_years",
        "account_tenure",
        "customer_seniority_years",
        "years_with_company",
        "tenure_in_years"
      ],
      "negativeHeaderExamples": [
        "vehicle_age",
        "policy_length",
        "employee_tenure",
        "product_age_years",
        "building_age",
        "contract_duration",
        "warranty_years",
        "service_years"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*tenure.*years?.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_tenure_years"
          ],
          "negativeExamples": [
            "customer_age_years"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policyholder.*seniority.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policyholder_seniority"
          ],
          "negativeExamples": [
            "policy_seniority"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*customer.*relationship.*years?.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_relationship_years"
          ],
          "negativeExamples": [
            "employee_relationship_years"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(tenure|seniority).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "tenure"
          ],
          "negativeExamples": [
            "vehicle_age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*years.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "years"
          ],
          "negativeExamples": [
            "months"
          ],
          "rationale": null
        }
      ],
      "priority": 3800,
      "explanation": "This semantic type identifies positive integers representing the number of complete years a customer has maintained a relationship with a company. It specifically excludes zero (new customers who haven't completed their first year) and any fractional values, focusing on whole year milestones. This is commonly used in customer analytics, loyalty programs, insurance underwriting, and customer segmentation where the duration of the business relationship is a key factor. The pattern ensures only valid positive integers are matched, preventing common data quality issues like leading zeros or decimal values.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:56:27.358468"
    },
    {
      "resultType": "generated",
      "semanticType": "Policies_in_force",
      "description": "A positive integer representing the count of active policies currently held by a customer, following the pattern of one or more digits with no leading zeros",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "5",
        "12",
        "25",
        "100",
        "999",
        "1500",
        "42"
      ],
      "negativeContentExamples": [
        "0",
        "01",
        "-5",
        "3.5",
        "12.0",
        "abc",
        "1,500",
        "+25"
      ],
      "positiveHeaderExamples": [
        "policies_count",
        "total_policies_held",
        "active_policies",
        "current_policy_count",
        "number_of_policies",
        "policy_holdings",
        "policies_owned",
        "customer_policies"
      ],
      "negativeHeaderExamples": [
        "max_policies",
        "active_customers",
        "policy_number",
        "policy_type",
        "policy_premium",
        "expired_policies",
        "policy_start_date",
        "available_policies"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*active.*polic(y|ies).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "active_policies_count"
          ],
          "negativeExamples": [
            "inactive_policies_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic(y|ies).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_count"
          ],
          "negativeExamples": [
            "policy_types"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*polic(y|ies).*held.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_policies_held"
          ],
          "negativeExamples": [
            "total_policies_sold"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*polic(y|ies).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_policies"
          ],
          "negativeExamples": [
            "current_policy_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic(y|ies).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies"
          ],
          "negativeExamples": [
            "policy_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "account"
          ],
          "rationale": null
        }
      ],
      "priority": 3810,
      "explanation": "This semantic type identifies positive integer values that represent the count of active insurance policies held by a customer. It's commonly used in insurance and financial datasets to track customer portfolio size. The pattern ensures no leading zeros and requires at least one digit, making it suitable for counting discrete policy items. This type is particularly useful for customer segmentation, risk assessment, and business analytics in insurance domains where policy counts are key metrics for understanding customer relationships and portfolio management.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:57:00.106200"
    },
    {
      "resultType": "generated",
      "semanticType": "Max_policies",
      "description": "A positive integer representing the maximum number of policies ever held concurrently by a customer, matching the pattern for positive integers starting from 1",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "5",
        "12",
        "25",
        "100",
        "999",
        "1500",
        "50000"
      ],
      "negativeContentExamples": [
        "0",
        "-1",
        "-5",
        "01",
        "05",
        "1.5",
        "2.0",
        "abc"
      ],
      "positiveHeaderExamples": [
        "max_policies_inforce",
        "peak_policy_count",
        "maximum_policies_held",
        "max_concurrent_policies",
        "highest_policy_count",
        "peak_policies_active",
        "max_policies_owned",
        "policy_count_maximum"
      ],
      "negativeHeaderExamples": [
        "min_policies",
        "average_policies",
        "current_policies",
        "total_policies_lifetime",
        "policy_duration",
        "policy_premium",
        "active_policies",
        "expired_policies"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*max.*polic.*inforce.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_policies_inforce"
          ],
          "negativeExamples": [
            "min_policies_inforce"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*polic.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_policy_count"
          ],
          "negativeExamples": [
            "average_policy_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*polic.*held.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_policies_held"
          ],
          "negativeExamples": [
            "current_policies_held"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*maximum.*polic.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "maximum_policies"
          ],
          "negativeExamples": [
            "minimum_policies"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*polic.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_policies"
          ],
          "negativeExamples": [
            "min_policies"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_count"
          ],
          "negativeExamples": [
            "claim_count"
          ],
          "rationale": null
        }
      ],
      "priority": 3820,
      "explanation": "This semantic type identifies the maximum number of insurance policies that a customer has held concurrently at any point in time. It's a key metric in insurance analytics for understanding customer engagement levels and risk exposure. The value must be a positive integer (no zero or negative values) as it represents an actual count of policies. This differs from other policy-related metrics like current active policies, lifetime total policies, or average policies, as it specifically captures the peak concurrent holding period.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:57:35.774208"
    },
    {
      "resultType": "generated",
      "semanticType": "Max_products",
      "description": "A positive integer conforming to ^[1-9]\\d*$ indicating the maximum variety of product types ever held at once",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "5",
        "23",
        "147",
        "999",
        "1500",
        "8742",
        "50000"
      ],
      "negativeContentExamples": [
        "0",
        "-5",
        "01",
        "007",
        "3.5",
        "12.0",
        "abc",
        "1a"
      ],
      "positiveHeaderExamples": [
        "max_products_held",
        "peak_product_count",
        "maximum_product_variety",
        "highest_inventory_types",
        "peak_variety_count",
        "max_concurrent_products",
        "product_variety_peak",
        "inventory_type_maximum"
      ],
      "negativeHeaderExamples": [
        "product_id",
        "total_products_sold",
        "current_inventory",
        "product_price",
        "min_products_held",
        "average_variety",
        "product_weight",
        "inventory_value"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*max.*product.*variety.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_product_variety_held"
          ],
          "negativeExamples": [
            "min_product_variety"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*product.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_product_count"
          ],
          "negativeExamples": [
            "current_product_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*products.*held.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_products_held"
          ],
          "negativeExamples": [
            "max_products_sold"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*maximum.*inventory.*types.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "maximum_inventory_types"
          ],
          "negativeExamples": [
            "current_inventory_types"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*variety.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_variety"
          ],
          "negativeExamples": [
            "current_variety"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*variety.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "variety"
          ],
          "negativeExamples": [
            "quantity"
          ],
          "rationale": null
        }
      ],
      "priority": 3830,
      "explanation": "This semantic type identifies positive integers that represent the maximum variety or count of different product types that have been held simultaneously in inventory. It's commonly used in inventory management systems to track peak diversity metrics. The pattern ensures only positive integers are matched (no zero, negative numbers, or leading zeros), which aligns with the business logic that you must have at least one product type to have a maximum count. This metric helps businesses understand their historical inventory complexity and storage requirements.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:58:18.184413"
    },
    {
      "resultType": "generated",
      "semanticType": "Lapse",
      "description": "A non-negative integer representing the total count of policies that have lapsed for a customer or entity",
      "pluginType": "regex",
      "regexPattern": "[0-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1",
        "5",
        "12",
        "25",
        "100",
        "1000",
        "9999"
      ],
      "negativeContentExamples": [
        "-1",
        "-5",
        "3.5",
        "12.0",
        "N/A",
        "abc"
      ],
      "positiveHeaderExamples": [
        "lapse_count",
        "policies_lapsed",
        "total_lapsed_policies",
        "policy_lapse_count",
        "lapsed_policy_count",
        "num_policies_lapsed",
        "customer_lapse_count",
        "lapsed_count"
      ],
      "negativeHeaderExamples": [
        "lapse_date",
        "cancellation_reason",
        "policy_amount",
        "lapse_duration",
        "policy_status",
        "renewal_count",
        "active_policies",
        "lapse_percentage"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*polic(y|ies).*laps(e|ed).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_lapsed_count"
          ],
          "negativeExamples": [
            "policy_lapse_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*laps(e|ed).*polic(y|ies).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lapsed_policies_count"
          ],
          "negativeExamples": [
            "lapsed_policy_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*laps(e|ed).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lapse_count"
          ],
          "negativeExamples": [
            "lapse_reason"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic(y|ies).*laps(e|ed).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_lapsed"
          ],
          "negativeExamples": [
            "policy_lapse_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*laps(e|ed).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lapsed"
          ],
          "negativeExamples": [
            "elapsed"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3840,
      "explanation": "This semantic type identifies columns containing counts of lapsed policies. In insurance and policy management systems, tracking the number of policies that have lapsed (expired without renewal or been terminated) is crucial for customer risk assessment, retention analysis, and business intelligence. The pattern matches non-negative integers starting with any digit 0-9 followed by zero or more digits, ensuring proper count representation without leading zeros (except for the value 0 itself). This type is commonly found in customer summary tables, policy analytics datasets, and insurance reporting systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:58:51.815648"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_lapse",
      "description": "A termination date string following patterns like ^\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?$ marking when the policy was cancelled.",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4}(\\s\\d{1,2}:\\d{2}:\\d{2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "12/31/2023",
        "1/15/2024",
        "6/30/2023 14:30:45",
        "3/1/2024 9:15:22",
        "11/15/2023",
        "8/22/2024 16:45:10",
        "2/29/2024",
        "10/5/2023 8:00:00"
      ],
      "negativeContentExamples": [
        "2023-12-31",
        "12/31/23",
        "December 31, 2023",
        "12-31-2023",
        "2023/12/31",
        "31-Dec-2023",
        "123/45/2023"
      ],
      "positiveHeaderExamples": [
        "lapse_date",
        "termination_date",
        "policy_termination_date",
        "cancellation_date",
        "term_dt",
        "policy_lapse_date",
        "contract_termination_date",
        "end_date"
      ],
      "negativeHeaderExamples": [
        "renewal_date",
        "effective_date",
        "start_date",
        "issue_date",
        "application_date",
        "birth_date",
        "payment_date",
        "expiration_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*termination.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_termination_date"
          ],
          "negativeExamples": [
            "policy_effective_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*lapse.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_lapse_date"
          ],
          "negativeExamples": [
            "policy_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cancellation.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cancellation_date"
          ],
          "negativeExamples": [
            "application_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(termination|lapse).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "termination_date"
          ],
          "negativeExamples": [
            "effective_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(term|lapse).*dt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "term_dt"
          ],
          "negativeExamples": [
            "eff_dt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3850,
      "explanation": "This semantic type identifies termination dates specifically formatted as MM/DD/YYYY with optional time components (HH:MM:SS). It's designed to capture policy cancellation dates, contract termination dates, and similar end-of-service timestamps in insurance and business contexts. The pattern distinguishes these from other date formats and specifically targets dates that mark the cessation of services or policies. This is particularly useful in insurance data processing where termination dates need to be identified and processed differently from effective dates or renewal dates.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T09:59:25.376519"
    },
    {
      "resultType": "generated",
      "semanticType": "Payment",
      "description": "A binary integer matching the pattern [01] where values represent different payment states such as current (0) or delinquent (1) status, or paid (1) vs unpaid (0) status.",
      "pluginType": "regex",
      "regexPattern": "[01]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1"
      ],
      "negativeContentExamples": [
        "2",
        "10",
        "01",
        "00",
        "11",
        "-1",
        "Y",
        "N"
      ],
      "positiveHeaderExamples": [
        "payment_status",
        "payment_current",
        "payment_delinquent",
        "pay_status_flag",
        "current_payment_status",
        "delinquent_flag",
        "payment_state",
        "pmt_status"
      ],
      "negativeHeaderExamples": [
        "payment_amount",
        "payment_date",
        "payment_method",
        "payment_id",
        "total_payments",
        "payment_frequency",
        "payment_type",
        "payment_description"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*payment.*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_status"
          ],
          "negativeExamples": [
            "payment_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*delinquent.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_delinquent_flag"
          ],
          "negativeExamples": [
            "delinquent_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*current.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_current_status"
          ],
          "negativeExamples": [
            "current_balance"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(pay|pmt).*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "pay_flag"
          ],
          "negativeExamples": [
            "flag_color"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment"
          ],
          "negativeExamples": [
            "shipment"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "status"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3860,
      "explanation": "This semantic type identifies binary payment status indicators commonly used in financial and billing systems. The values are restricted to single digits 0 or 1, typically representing states like current/delinquent, paid/unpaid, or active/inactive payment status. This is distinct from payment codes, amounts, dates, or other payment-related fields that contain non-binary values. The pattern is specifically designed to catch single binary digits used as status flags in payment processing systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:00:14.186769"
    },
    {
      "resultType": "generated",
      "semanticType": "Premium",
      "description": "A numeric value representing net premium amounts in insurance policies, following the pattern of digits with optional decimal places, specifically for net premium calculations in the policy's base currency",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d+)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1250.50",
        "850",
        "2500.75",
        "450.00",
        "1875.25",
        "3200",
        "675.99",
        "1000.10"
      ],
      "negativeContentExamples": [
        "1,250.50",
        "$850.00",
        "-450.00",
        "1875.25%",
        "3,200.00",
        "\u20ac675.99",
        "1000.1.0"
      ],
      "positiveHeaderExamples": [
        "net_premium_amount",
        "premium_yearly",
        "annual_net_premium",
        "net_premium_value",
        "premium_amount_net",
        "yearly_premium_amount",
        "net_prem_amt",
        "premium_net"
      ],
      "negativeHeaderExamples": [
        "gross_premium",
        "premium_rate",
        "premium_percentage",
        "commission_amount",
        "tax_premium",
        "premium_factor",
        "discount_rate",
        "loading_premium"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*net.*premium.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "net_premium_amount"
          ],
          "negativeExamples": [
            "gross_premium_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*yearly.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_yearly"
          ],
          "negativeExamples": [
            "premium_rate_yearly"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*net.*premium.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "net_premium"
          ],
          "negativeExamples": [
            "net_premium_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*amt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_amt"
          ],
          "negativeExamples": [
            "premium_rate_amt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium"
          ],
          "negativeExamples": [
            "premium_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "amount"
          ],
          "negativeExamples": [
            "rate"
          ],
          "rationale": null
        }
      ],
      "priority": 3870,
      "explanation": "This semantic type identifies net premium amounts in insurance policies. Net premiums represent the base premium amount before taxes, fees, or commissions are added, making them a critical component in insurance calculations. The pattern matches simple numeric values with optional decimal places, which is the standard format for monetary amounts in insurance systems. This type is specifically designed to distinguish net premium amounts from other premium-related values like rates, percentages, or gross premiums that might include additional charges.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:00:49.503992"
    },
    {
      "resultType": "generated",
      "semanticType": "Cost_claims_year",
      "description": "A non-negative numeric value representing the total claims cost in base currency for the year, matching the pattern for monetary amounts",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d+)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "125000.50",
        "0",
        "1500000",
        "999.99",
        "50000.00",
        "2500",
        "750000.25",
        "100"
      ],
      "negativeContentExamples": [
        "-1500.00",
        "$125,000.50",
        "1,500,000",
        "abc123",
        "N/A",
        "125 000.50",
        "1.5e6"
      ],
      "positiveHeaderExamples": [
        "claims_cost_current_year",
        "total_claims_amount",
        "annual_claims_cost",
        "yearly_claims_expense",
        "claims_cost_total",
        "current_year_claims_amount",
        "total_cost_claims",
        "claims_amount_ytd"
      ],
      "negativeHeaderExamples": [
        "claims_count",
        "year_to_date",
        "claims_frequency",
        "number_of_claims",
        "claims_pending",
        "claim_id",
        "claims_ratio",
        "loss_ratio"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*claims.*cost.*current.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_cost_current_year"
          ],
          "negativeExamples": [
            "claims_count_current_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*claims.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_claims_amount"
          ],
          "negativeExamples": [
            "total_claims_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*(cost|amount).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "annual_claims_cost"
          ],
          "negativeExamples": [
            "claims_frequency"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(cost|amount).*claims.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cost_of_claims"
          ],
          "negativeExamples": [
            "number_of_claims"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*(total|sum).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_total"
          ],
          "negativeExamples": [
            "claims_pending"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(cost|amount).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cost"
          ],
          "negativeExamples": [
            "count"
          ],
          "rationale": null
        }
      ],
      "priority": 3880,
      "explanation": "This semantic type identifies monetary values specifically related to insurance claims costs for the current year. It matches non-negative decimal numbers that represent currency amounts in base currency units (without currency symbols or formatting). The pattern is designed to capture total claims expenses, which are critical financial metrics in insurance and risk management contexts. The header patterns focus on identifying columns that contain claims-related cost data, distinguishing them from claims counts, ratios, or other non-monetary claims metrics.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:01:23.574443"
    },
    {
      "resultType": "generated",
      "semanticType": "N_claims_year",
      "description": "A non-negative integer representing the total number of claims filed in the current year, conforming to the pattern of one or more digits",
      "pluginType": "regex",
      "regexPattern": "[0-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1",
        "25",
        "156",
        "1247",
        "50000",
        "999999",
        "12345678"
      ],
      "negativeContentExamples": [
        "-1",
        "-25",
        "12.5",
        "1,234",
        "$1000",
        "25%",
        "N/A"
      ],
      "positiveHeaderExamples": [
        "claims_count_current_year",
        "n_claims_year",
        "current_year_claims_count",
        "yearly_claims_number",
        "claims_filed_this_year",
        "annual_claims_count",
        "year_claims_total_count",
        "this_year_claim_count"
      ],
      "negativeHeaderExamples": [
        "claims_amount",
        "total_claims",
        "claims_value_current_year",
        "claim_dollar_amount",
        "claims_percentage",
        "claims_rate",
        "average_claims",
        "claims_cost"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*claims.*count.*current.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_count_current_year"
          ],
          "negativeExamples": [
            "claims_amount_current_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*year.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_year_count"
          ],
          "negativeExamples": [
            "claims_year_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*n.*claims.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "n_claims_year"
          ],
          "negativeExamples": [
            "n_claims_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_count"
          ],
          "negativeExamples": [
            "claims_total"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3890,
      "explanation": "This semantic type identifies columns containing the count of insurance or other claims filed within the current year. It specifically captures non-negative integers that represent quantities rather than monetary amounts or percentages. The pattern is designed to match simple integer values while the header patterns focus on identifying columns that combine concepts of claims, counting, and temporal references to the current year. This is commonly used in insurance analytics, customer service metrics, and annual reporting systems where tracking the volume of claims is important for business intelligence and regulatory compliance.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:01:58.044426"
    },
    {
      "resultType": "generated",
      "semanticType": "N_claims_history",
      "description": "A non-negative integer representing the lifetime total count of claims filed by a customer",
      "pluginType": "regex",
      "regexPattern": "[0-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1",
        "5",
        "12",
        "47",
        "156",
        "2847",
        "10000"
      ],
      "negativeContentExamples": [
        "-1",
        "-5",
        "3.5",
        "12.0",
        "1,234",
        "N/A",
        "abc"
      ],
      "positiveHeaderExamples": [
        "total_claims_count",
        "claims_history_count",
        "lifetime_claims_total",
        "customer_total_claims",
        "claims_filed_count",
        "total_number_of_claims",
        "cumulative_claims_count",
        "all_time_claims_total"
      ],
      "negativeHeaderExamples": [
        "claims_frequency",
        "claims_ratio",
        "claims_amount_total",
        "monthly_claims",
        "claims_percentage",
        "average_claims",
        "claims_rate",
        "pending_claims_count"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*total.*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_claims_count"
          ],
          "negativeExamples": [
            "monthly_claims_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*history.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_history_count"
          ],
          "negativeExamples": [
            "claims_history_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*lifetime.*claims.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lifetime_claims_total"
          ],
          "negativeExamples": [
            "lifetime_claims_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*total.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_total_number"
          ],
          "negativeExamples": [
            "claims_total_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_claims_count"
          ],
          "negativeExamples": [
            "claims_frequency"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3900,
      "explanation": "This semantic type identifies columns containing the lifetime total count of insurance or service claims filed by a customer. It represents cumulative claim activity over the entire customer relationship history, expressed as a non-negative integer. This metric is commonly used in insurance, warranty, and customer service analytics to assess customer risk profiles, identify high-maintenance accounts, and support underwriting decisions. The pattern specifically excludes negative values, decimals, and formatted numbers to ensure it captures only clean integer counts.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:02:34.039801"
    },
    {
      "resultType": "error",
      "semanticType": "R_Claims_history",
      "description": null,
      "pluginType": "regex",
      "regexPattern": null,
      "listValues": null,
      "backout": null,
      "positiveContentExamples": null,
      "negativeContentExamples": null,
      "positiveHeaderExamples": null,
      "negativeHeaderExamples": null,
      "confidenceThreshold": 0.0,
      "headerPatterns": null,
      "priority": 3910,
      "explanation": "Failed to parse Claude response - no valid JSON or XML found",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:03:07.851677"
    },
    {
      "resultType": "generated",
      "semanticType": "Type_risk",
      "description": "An integer value following the pattern [1-4] representing discrete risk classification levels within a company's rating system",
      "pluginType": "regex",
      "regexPattern": "[1-4]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "2",
        "3",
        "4"
      ],
      "negativeContentExamples": [
        "0",
        "5",
        "10",
        "-1",
        "1.5",
        "A",
        "12",
        "99"
      ],
      "positiveHeaderExamples": [
        "risk_type_code",
        "vehicle_risk_category",
        "risk_level",
        "risk_classification",
        "rating_level",
        "risk_grade",
        "classification_level",
        "risk_category"
      ],
      "negativeHeaderExamples": [
        "risk_score",
        "insurance_type",
        "credit_rating",
        "risk_percentage",
        "assessment_value",
        "probability_score",
        "risk_amount",
        "total_risk"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*risk.*type.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_type_code"
          ],
          "negativeExamples": [
            "risk_score_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*risk.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_risk_category"
          ],
          "negativeExamples": [
            "vehicle_insurance_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*risk.*(level|class|category|grade).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_level"
          ],
          "negativeExamples": [
            "risk_assessment"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(classification|rating).*level.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "classification_level"
          ],
          "negativeExamples": [
            "satisfaction_level"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(risk|rating|class).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk"
          ],
          "negativeExamples": [
            "score"
          ],
          "rationale": null
        }
      ],
      "priority": 3920,
      "explanation": "This semantic type identifies discrete risk classification levels represented as integers from 1 to 4, commonly used in enterprise risk management systems. These values typically represent ordinal risk categories such as Low (1), Medium (2), High (3), and Critical (4) risk levels. The pattern is highly specific and constrained, making it suitable for automated risk assessment workflows, regulatory reporting, and business intelligence applications where standardized risk categorization is essential.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:03:49.815442"
    },
    {
      "resultType": "generated",
      "semanticType": "Area",
      "description": "A binary integer matching [01] where each value represents a specific geographic area classification for rating purposes",
      "pluginType": "regex",
      "regexPattern": "[01]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1"
      ],
      "negativeContentExamples": [
        "2",
        "10",
        "01",
        "00",
        "11",
        "-1",
        "A",
        "true"
      ],
      "positiveHeaderExamples": [
        "area_type",
        "location_classification",
        "geographic_area_type",
        "rating_area_classification",
        "area_classification_code",
        "location_area_type",
        "geo_area_type",
        "territory_type"
      ],
      "negativeHeaderExamples": [
        "area_code",
        "region_name",
        "area_size",
        "location_id",
        "zip_code",
        "territory_name",
        "area_description",
        "region_code"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*geographic.*area.*classification.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "geographic_area_classification"
          ],
          "negativeExamples": [
            "geographic_region_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*location.*classification.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "location_classification"
          ],
          "negativeExamples": [
            "location_description"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*area.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "area_type"
          ],
          "negativeExamples": [
            "area_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*rating.*area.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "rating_area"
          ],
          "negativeExamples": [
            "rating_score"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*area.*classification.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "area_classification"
          ],
          "negativeExamples": [
            "area_measurement"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "type"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 3930,
      "explanation": "This semantic type identifies binary geographic area classification fields used for rating or categorization purposes. The values are strictly limited to 0 or 1, representing two distinct geographic area types (such as urban/rural, high-risk/low-risk, or similar binary classifications). This is commonly used in insurance, real estate, or demographic analysis where areas need to be classified into exactly two categories for rating, pricing, or analytical purposes. The binary nature makes it distinct from general area codes or multi-category classification systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:04:22.921512"
    },
    {
      "resultType": "generated",
      "semanticType": "Second_driver",
      "description": "A binary flag indicating whether multiple drivers are covered under an insurance policy, represented as 0 (single driver) or 1 (multiple drivers)",
      "pluginType": "regex",
      "regexPattern": "[01]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1"
      ],
      "negativeContentExamples": [
        "2",
        "Y",
        "N",
        "true",
        "false",
        "yes",
        "no",
        "01"
      ],
      "positiveHeaderExamples": [
        "multiple_driver_flag",
        "has_additional_driver",
        "multi_driver_indicator",
        "additional_driver_flag",
        "multiple_drivers_covered",
        "driver_multiple_ind",
        "multi_driver_policy_flag",
        "has_multiple_drivers"
      ],
      "negativeHeaderExamples": [
        "driver_count",
        "driver_age",
        "number_of_drivers",
        "primary_driver_name",
        "driver_license_number",
        "total_drivers",
        "driver_experience_years",
        "youngest_driver_age"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*multiple.*driver.*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "multiple_driver_flag"
          ],
          "negativeExamples": [
            "single_driver_flag"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*additional.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "has_additional_driver"
          ],
          "negativeExamples": [
            "additional_driver_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*multi.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "multi_driver_ind"
          ],
          "negativeExamples": [
            "multi_vehicle_ind"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*driver.*multiple.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_multiple_flag"
          ],
          "negativeExamples": [
            "driver_multiple_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*driver.*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_flag"
          ],
          "negativeExamples": [
            "driver_age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "flag"
          ],
          "negativeExamples": [
            "count"
          ],
          "rationale": null
        }
      ],
      "priority": 3940,
      "explanation": "This semantic type identifies binary flags used in insurance systems to indicate whether a policy covers multiple drivers. The flag uses a strict binary format where 0 represents a single driver policy and 1 represents a multiple driver policy. This is commonly used in auto insurance databases to determine coverage scope and pricing calculations. The pattern is highly specific to ensure it only matches the exact binary format and doesn't incorrectly classify other boolean representations like Y/N, true/false, or yes/no values.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:04:57.220188"
    },
    {
      "resultType": "generated",
      "semanticType": "Year_matriculation",
      "description": "A four-digit integer following the pattern ^\\d{4}$ representing a valid calendar year when the vehicle was registered.",
      "pluginType": "regex",
      "regexPattern": "\\d{4}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2023",
        "2022",
        "2021",
        "2020",
        "2019",
        "2018",
        "2015",
        "2010"
      ],
      "negativeContentExamples": [
        "23",
        "202",
        "20234",
        "2024.5",
        "2022-01",
        "ABC2023",
        "2023DEF"
      ],
      "positiveHeaderExamples": [
        "registration_year",
        "vehicle_year",
        "reg_year",
        "year_registered",
        "vehicle_registration_year",
        "registration_dt_year",
        "reg_date_year",
        "year_of_registration"
      ],
      "negativeHeaderExamples": [
        "model_year",
        "registration_number",
        "manufacture_year",
        "production_year",
        "birth_year",
        "fiscal_year",
        "academic_year",
        "registration_id"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*registration.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_registration_year"
          ],
          "negativeExamples": [
            "vehicle_model_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*registration.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "registration_year"
          ],
          "negativeExamples": [
            "manufacture_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*reg.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "reg_year"
          ],
          "negativeExamples": [
            "prod_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*registration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "registration"
          ],
          "negativeExamples": [
            "registration_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "year"
          ],
          "negativeExamples": [
            "quarter"
          ],
          "rationale": null
        }
      ],
      "priority": 3950,
      "explanation": "This semantic type identifies four-digit years specifically related to vehicle registration dates. It distinguishes registration years from other year types like model years or manufacturing years. The pattern matches exactly four consecutive digits, which represents a calendar year when a vehicle was officially registered with authorities. This is commonly found in vehicle databases, DMV records, and automotive datasets where tracking registration timing is important for compliance, renewal schedules, and administrative purposes.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:05:28.685334"
    },
    {
      "resultType": "generated",
      "semanticType": "Power",
      "description": "A positive integer representing engine power output in horsepower, matching the pattern for positive integers without leading zeros",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "150",
        "300",
        "450",
        "75",
        "1200",
        "85",
        "650",
        "2"
      ],
      "negativeContentExamples": [
        "0",
        "01",
        "150.5",
        "-200",
        "300hp",
        "450 HP",
        "N/A",
        "unknown"
      ],
      "positiveHeaderExamples": [
        "engine_power_hp",
        "power_output",
        "horsepower",
        "engine_hp",
        "motor_power",
        "hp_rating",
        "power_hp",
        "engine_power"
      ],
      "negativeHeaderExamples": [
        "engine_size",
        "kilowatts",
        "engine_displacement",
        "torque",
        "power_consumption",
        "engine_rpm",
        "fuel_capacity",
        "engine_weight"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*engine.*power.*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_power_hp"
          ],
          "negativeExamples": [
            "engine_size_hp"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*power.*output.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "power_output"
          ],
          "negativeExamples": [
            "power_consumption"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*engine.*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_hp"
          ],
          "negativeExamples": [
            "engine_kw"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*horsepower.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "horsepower"
          ],
          "negativeExamples": [
            "kilowatts"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "hp"
          ],
          "negativeExamples": [
            "kw"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*power.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "power"
          ],
          "negativeExamples": [
            "torque"
          ],
          "rationale": null
        }
      ],
      "priority": 3960,
      "explanation": "This semantic type identifies engine power measurements expressed in horsepower as positive integers. It's commonly used in automotive, marine, and industrial equipment datasets where engine specifications are recorded. The pattern ensures only valid positive integers are matched, excluding zero, negative numbers, decimals, or values with units attached. This is useful for data validation and classification in vehicle databases, equipment catalogs, and performance specifications.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:06:02.065850"
    },
    {
      "resultType": "generated",
      "semanticType": "Cylinder_capacity",
      "description": "A positive integer representing the total engine displacement in cubic centimeters, following the pattern of non-zero leading digit followed by zero or more digits",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1598",
        "2000",
        "3500",
        "1",
        "999",
        "5000",
        "1200",
        "4000"
      ],
      "negativeContentExamples": [
        "0",
        "01598",
        "-2000",
        "1598.5",
        "2000cc",
        "1,598",
        "2.0L",
        "V6"
      ],
      "positiveHeaderExamples": [
        "engine_displacement_cc",
        "cylinder_capacity_cc",
        "engine_displacement",
        "displacement_cc",
        "engine_size_cc",
        "motor_displacement",
        "cc_displacement",
        "engine_capacity"
      ],
      "negativeHeaderExamples": [
        "power_output",
        "engine_power",
        "horsepower",
        "torque",
        "cylinder_count",
        "fuel_capacity",
        "oil_capacity",
        "engine_rpm"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*engine.*displacement.*cc.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_displacement_cc"
          ],
          "negativeExamples": [
            "engine_power_cc"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cylinder.*capacity.*cc.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cylinder_capacity_cc"
          ],
          "negativeExamples": [
            "cylinder_count_cc"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*engine.*displacement.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_displacement"
          ],
          "negativeExamples": [
            "engine_temperature"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*displacement.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "displacement"
          ],
          "negativeExamples": [
            "replacement"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*capacity.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "capacity"
          ],
          "negativeExamples": [
            "capability"
          ],
          "rationale": null
        }
      ],
      "priority": 3970,
      "explanation": "This semantic type identifies engine displacement values measured in cubic centimeters (cc). Engine displacement is a key specification for vehicles and machinery, representing the total volume of all cylinders in an engine. The pattern ensures only positive integers are matched, excluding zero (which would be invalid for a functioning engine) and any values with leading zeros, decimals, or non-numeric characters. This type is commonly found in automotive databases, vehicle specifications, and machinery catalogs where engine size is a critical attribute for classification and comparison.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:06:32.426685"
    },
    {
      "resultType": "generated",
      "semanticType": "Value_vehicle",
      "description": "A numeric value matching ^\\d+(\\.\\d+)?$ representing the vehicle's monetary value in the policy's base currency",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d+)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "25000",
        "15750.50",
        "42000.00",
        "8500",
        "67890.25",
        "12000.75",
        "35000",
        "9999.99"
      ],
      "negativeContentExamples": [
        "$25,000",
        "25000.00 USD",
        "-15000",
        "25,000",
        "N/A",
        "TBD",
        "25K"
      ],
      "positiveHeaderExamples": [
        "vehicle_value",
        "market_value_2019",
        "auto_value",
        "car_value",
        "insured_value",
        "policy_value",
        "truck_value",
        "asset_value"
      ],
      "negativeHeaderExamples": [
        "purchase_price",
        "current_market_value",
        "vehicle_weight",
        "policy_premium",
        "deductible_amount",
        "repair_cost",
        "loan_balance",
        "depreciation_rate"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_value"
          ],
          "negativeExamples": [
            "vehicle_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*market.*value.*\\d{4}.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "market_value_2019"
          ],
          "negativeExamples": [
            "market_share_2019"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(auto|car|truck).*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "auto_value"
          ],
          "negativeExamples": [
            "auto_insurance"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*insured.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insured_value"
          ],
          "negativeExamples": [
            "insured_driver"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_value"
          ],
          "negativeExamples": [
            "policy_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "value"
          ],
          "negativeExamples": [
            "purchase_price"
          ],
          "rationale": null
        }
      ],
      "priority": 3980,
      "explanation": "This semantic type identifies numeric values representing vehicle monetary values in insurance policies. It matches simple numeric patterns (whole numbers or decimals) that represent currency amounts without currency symbols or formatting. The type is specifically designed to capture vehicle values as they appear in insurance databases, distinguishing them from other monetary fields like purchase prices or current market values through header pattern matching. This is commonly used in auto insurance systems to store the insured value of vehicles for policy calculations and claims processing.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:07:06.728291"
    },
    {
      "resultType": "generated",
      "semanticType": "N_doors",
      "description": "A non-negative integer representing the total count of passenger access doors on a vehicle, conforming to the pattern of one or more digits",
      "pluginType": "regex",
      "regexPattern": "[0-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "2",
        "4",
        "5",
        "6",
        "8",
        "12",
        "16"
      ],
      "negativeContentExamples": [
        "-1",
        "2.5",
        "3.0",
        "four",
        "N/A",
        "unknown",
        "sliding",
        "automatic"
      ],
      "positiveHeaderExamples": [
        "number_of_doors",
        "doors_count",
        "door_count",
        "total_doors",
        "passenger_doors",
        "vehicle_doors",
        "doors",
        "num_doors"
      ],
      "negativeHeaderExamples": [
        "seat_count",
        "door_type",
        "door_material",
        "window_count",
        "door_color",
        "engine_type",
        "wheel_count",
        "door_manufacturer"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*passenger.*door.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "passenger_door_count"
          ],
          "negativeExamples": [
            "cargo_door_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*number.*of.*doors.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "number_of_doors"
          ],
          "negativeExamples": [
            "number_of_windows"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*door.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "doors_count"
          ],
          "negativeExamples": [
            "seat_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*doors.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_doors"
          ],
          "negativeExamples": [
            "total_seats"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*doors.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "doors"
          ],
          "negativeExamples": [
            "door_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "type"
          ],
          "rationale": null
        }
      ],
      "priority": 3990,
      "explanation": "This semantic type identifies columns containing the count of passenger access doors on vehicles. It's commonly used in automotive datasets, vehicle specifications, transportation records, and fleet management systems. The pattern matches non-negative integers starting with any digit 0-9 followed by zero or more additional digits, representing realistic door counts found on various vehicle types from motorcycles (0 doors) to buses and large passenger vehicles (16+ doors). This helps distinguish door count data from other vehicle attributes like door types, materials, or other numeric vehicle specifications.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:07:50.219092"
    },
    {
      "resultType": "generated",
      "semanticType": "Type_fuel",
      "description": "A single uppercase letter matching [A-Z] representing specific fuel types such as petrol, diesel, or alternative energy sources",
      "pluginType": "regex",
      "regexPattern": "[A-Z]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "P",
        "D",
        "E",
        "H",
        "G",
        "B",
        "A",
        "C"
      ],
      "negativeContentExamples": [
        "p",
        "d",
        "12",
        "AB",
        "Petrol",
        "DIESEL",
        "1",
        "Z1"
      ],
      "positiveHeaderExamples": [
        "fuel_type",
        "energy_type",
        "fuel_type_code",
        "energy_type_cd",
        "vehicle_fuel_type",
        "power_source_type",
        "fuel_cd",
        "energy_cd"
      ],
      "negativeHeaderExamples": [
        "fuel_consumption",
        "fuel_efficiency",
        "fuel_cost",
        "energy_usage",
        "fuel_amount",
        "energy_level",
        "fuel_price",
        "energy_consumption"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*fuel.*type.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel_type_code"
          ],
          "negativeExamples": [
            "fuel_consumption_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*energy.*type.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "energy_type_code"
          ],
          "negativeExamples": [
            "energy_efficiency_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*fuel.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel_type"
          ],
          "negativeExamples": [
            "fuel_consumption"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*energy.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "energy_type"
          ],
          "negativeExamples": [
            "energy_efficiency"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*fuel.*cd.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel_cd"
          ],
          "negativeExamples": [
            "fuel_consumption_cd"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "type"
          ],
          "negativeExamples": [
            "efficiency"
          ],
          "rationale": null
        }
      ],
      "priority": 4000,
      "explanation": "This semantic type identifies single uppercase letter codes used to represent different fuel or energy types in automotive, transportation, or energy datasets. Common examples include 'P' for petrol/gasoline, 'D' for diesel, 'E' for electric, 'H' for hybrid, 'G' for gas, 'B' for biodiesel, etc. These codes are frequently used in vehicle registration systems, fleet management databases, and energy consumption tracking systems where space efficiency and standardization are important. The pattern is strict, requiring exactly one uppercase letter, which distinguishes it from longer fuel type descriptions or mixed-case abbreviations.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:08:31.068926"
    },
    {
      "resultType": "generated",
      "semanticType": "Length",
      "description": "A numeric value representing the vehicle length in meters, following the pattern of digits with optional decimal places",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d+)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "4.5",
        "12.8",
        "6",
        "18.75",
        "3.2",
        "15",
        "8.95",
        "22.5"
      ],
      "negativeContentExamples": [
        "4.5m",
        "12.8 meters",
        "6 ft",
        "N/A",
        "-5.2",
        "abc",
        "4.5.2",
        "12,8"
      ],
      "positiveHeaderExamples": [
        "vehicle_length_m",
        "length_meters",
        "car_length_m",
        "truck_length_meters",
        "vehicle_len_m",
        "auto_length_m",
        "bus_length_meters",
        "length_m"
      ],
      "negativeHeaderExamples": [
        "width_meters",
        "height_meters",
        "vehicle_weight_kg",
        "length_feet",
        "vehicle_width_m",
        "depth_meters",
        "vehicle_height_m",
        "distance_meters"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*length.*meter.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_length_meters"
          ],
          "negativeExamples": [
            "vehicle_width_meters"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*length.*m$",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_length_m"
          ],
          "negativeExamples": [
            "vehicle_height_m"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*meter.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "length_meters"
          ],
          "negativeExamples": [
            "width_meters"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_length"
          ],
          "negativeExamples": [
            "vehicle_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "length"
          ],
          "negativeExamples": [
            "width"
          ],
          "rationale": null
        }
      ],
      "priority": 4010,
      "explanation": "This semantic type identifies numeric values representing vehicle length measurements in meters. It matches decimal numbers that could represent realistic vehicle lengths, typically ranging from small cars (around 3-4 meters) to large trucks and buses (up to 20+ meters). The pattern is designed to work with measurement data in automotive, transportation, and logistics datasets where vehicle dimensions are recorded in metric units.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:09:02.891831"
    },
    {
      "resultType": "generated",
      "semanticType": "Weight",
      "description": "A numeric value representing the total vehicle mass in kilograms, matching the pattern for decimal numbers",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d+)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1500",
        "2250.5",
        "3500",
        "1875.25",
        "4200",
        "2800.75",
        "1200",
        "5500.0"
      ],
      "negativeContentExamples": [
        "1500kg",
        "2,250.5",
        "-1500",
        "1500.5.2",
        "abc123",
        "1500 kg",
        "N/A",
        "1.5e3"
      ],
      "positiveHeaderExamples": [
        "vehicle_weight_kg",
        "weight_kg",
        "total_vehicle_weight",
        "vehicle_mass_kg",
        "car_weight_kilograms",
        "vehicle_wt_kg",
        "gross_vehicle_weight",
        "auto_weight_kg"
      ],
      "negativeHeaderExamples": [
        "payload_weight",
        "empty_weight",
        "cargo_weight_kg",
        "engine_weight",
        "trailer_weight",
        "passenger_weight",
        "fuel_weight_kg",
        "tire_weight"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*weight.*kg.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_weight_kg"
          ],
          "negativeExamples": [
            "payload_weight_kg"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*vehicle.*weight.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_vehicle_weight"
          ],
          "negativeExamples": [
            "total_cargo_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*mass.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_mass_kg"
          ],
          "negativeExamples": [
            "engine_mass_kg"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*weight.*kg.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "weight_kg"
          ],
          "negativeExamples": [
            "payload_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*wt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_wt"
          ],
          "negativeExamples": [
            "cargo_wt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*weight.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "weight"
          ],
          "negativeExamples": [
            "height"
          ],
          "rationale": null
        }
      ],
      "priority": 4020,
      "explanation": "This semantic type identifies numeric values representing the total weight or mass of a vehicle in kilograms. It matches decimal numbers that could represent realistic vehicle weights, typically ranging from small cars (around 1000-1500 kg) to larger vehicles (3000-5000+ kg). The pattern specifically looks for column headers that indicate vehicle weight measurements while excluding partial weights like payload, cargo, or component weights. This is useful for automotive datasets, vehicle registration systems, and transportation analytics where total vehicle mass is a critical measurement.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T10:09:38.738927"
    }
  ]
}