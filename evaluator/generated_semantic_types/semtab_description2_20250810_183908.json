[
  {
    "resultType": "generated",
    "semanticType": "result",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}[^\\S\\r\\n]+[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9360,
    "headerPatterns": [
      {
        "regExp": "(?i).*test.*result.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "test_result"
        ],
        "negativeExamples": [
          "test_status"
        ]
      },
      {
        "regExp": "(?i).*analysis.*result.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "analysis_result"
        ],
        "negativeExamples": [
          "analysis_code"
        ]
      },
      {
        "regExp": "(?i).*prediction.*result.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prediction_result"
        ],
        "negativeExamples": [
          "prediction_score"
        ]
      },
      {
        "regExp": "(?i).*final.*result.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "final_result"
        ],
        "negativeExamples": [
          "final_notes"
        ]
      },
      {
        "regExp": "(?i).*result.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "result"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "The operation completed successfully.",
      "Awaiting further review by the team",
      "Error occurred while processing the request.",
      "Approved for release",
      "Not applicable to this case",
      "High confidence match found",
      "Performance improved by 12% compared to baseline",
      "Please contact support if the issue persists."
    ],
    "negativeContentExamples": [
      "2024-03-25",
      "OK",
      "ERR_403",
      "A-B",
      "john.doe@example.com",
      "12345",
      "TRUE",
      "US-CA"
    ],
    "positiveHeaderExamples": [
      "test_result",
      "analysis_result",
      "final_result",
      "result_text",
      "prediction_result",
      "processing_result",
      "experiment_result",
      "summary_result"
    ],
    "negativeHeaderExamples": [
      "test_status",
      "analysis_code",
      "final_notes",
      "output_message",
      "prediction_score",
      "processing_flag",
      "experiment_id",
      "summary_date"
    ],
    "explanation": "Result captures generic natural-language outputs such as conclusions, outcomes, or descriptive text derived from tests, analyses, predictions, or processing steps. It is intended for fields that store sentences or phrases rather than structured identifiers or codes, helping to separate human-readable narrative content from formatted data.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:48.983696"
  },
  {
    "resultType": "generated",
    "semanticType": "start",
    "description": "This type captures Unix timestamp values expressed in seconds precision for standard time measurement and system operations. The values represent time as an integer count of seconds from the Unix epoch without any formatting, separators, or textual date components.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9][0-9]{8,9}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 9380,
    "headerPatterns": [
      {
        "regExp": "(?i).*unix.*epoch.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unix_epoch_seconds"
        ],
        "negativeExamples": [
          "epoch_unix_ms"
        ]
      },
      {
        "regExp": "(?i).*epoch.*seconds.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "epoch_seconds"
        ],
        "negativeExamples": [
          "epoch_millis"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*seconds.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "timestamp_seconds"
        ],
        "negativeExamples": [
          "timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*ts.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ts_sec"
        ],
        "negativeExamples": [
          "ts_ms"
        ]
      },
      {
        "regExp": "(?i).*epoch.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "epoch_sec"
        ],
        "negativeExamples": [
          "created_at"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "timestamp"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "315532800",
      "631152000",
      "915148800",
      "946684800",
      "1234567890",
      "1609459200",
      "1700000000",
      "2147483647"
    ],
    "negativeContentExamples": [
      "1622505600000",
      "0001234567",
      "12345678",
      "98765432101",
      "2019-01-01",
      "123456789a",
      "+1609459200",
      "1,609,459,200"
    ],
    "positiveHeaderExamples": [
      "unix_epoch_seconds",
      "epoch_seconds",
      "timestamp_seconds",
      "epoch_sec",
      "ts_sec",
      "posix_time_sec",
      "epoch_s",
      "timestamp"
    ],
    "negativeHeaderExamples": [
      "epoch_millis",
      "timestamp_ms",
      "unix_time_ms",
      "start_time",
      "created_at",
      "time_seconds",
      "epoch_nanos",
      "date"
    ],
    "explanation": "Unix epoch seconds are plain integer counts of seconds since 1970-01-01T00:00:00Z, typically appearing as 9\u201310 digit positive numbers without signs, separators, or decimal points. This semantic type helps distinguish true seconds-based timestamps from milliseconds or other time encodings when parsing logs, telemetry, and system event data.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:51.691055"
  },
  {
    "resultType": "generated",
    "semanticType": "district",
    "description": "This type identifies Portuguese district names used for administrative identification within Portugal's governmental structure. The format consists of proper noun text strings representing official district names in Portuguese without abbreviations or special formatting characters.",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "AVEIRO",
      "BEJA",
      "BRAGA",
      "BRAGAN\u00c7A",
      "CASTELO BRANCO",
      "COIMBRA",
      "\u00c9VORA",
      "FARO",
      "GUARDA",
      "LEIRIA",
      "LISBOA",
      "PORTALEGRE",
      "PORTO",
      "SANTAR\u00c9M",
      "SET\u00daBAL",
      "VIANA DO CASTELO",
      "VILA REAL",
      "VISEU"
    ],
    "backout": "^[A-Z\u00c1\u00c9\u00cd\u00d3\u00da\u00c2\u00ca\u00ce\u00d4\u00db\u00c3\u00d5\u00c7 ]{4,20}$",
    "confidenceThreshold": 97,
    "priority": 9410,
    "headerPatterns": [
      {
        "regExp": "(?i).*portugal.*district.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "portugal_district_name"
        ],
        "negativeExamples": [
          "portugal_district_code"
        ]
      },
      {
        "regExp": "(?i).*portugal.*distrito.*nome.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "portugal_distrito_nome"
        ],
        "negativeExamples": [
          "portugal_distrito_codigo"
        ]
      },
      {
        "regExp": "(?i).*pt.*district.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "pt_district"
        ],
        "negativeExamples": [
          "pt_region"
        ]
      },
      {
        "regExp": "(?i).*district.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "district_name"
        ],
        "negativeExamples": [
          "district_code"
        ]
      },
      {
        "regExp": "(?i).*district.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "district"
        ],
        "negativeExamples": [
          "province"
        ]
      }
    ],
    "positiveContentExamples": [
      "Braga",
      "\u00c9vora",
      "Set\u00fabal",
      "Viana do Castelo",
      "Castelo Branco",
      "Porto",
      "Lisboa",
      "Viseu"
    ],
    "negativeContentExamples": [
      "Lisbon",
      "A\u00e7ores",
      "Madeira",
      "Setubal",
      "Braganca",
      "Viana-Do-Castelo",
      "Castelo Branco - Centro",
      "Porto, PT"
    ],
    "positiveHeaderExamples": [
      "portugal_district_name",
      "district_name",
      "distrito",
      "pt_district",
      "distrito_nome",
      "distrito_portugal",
      "district",
      "portugal_distrito"
    ],
    "negativeHeaderExamples": [
      "district_code",
      "province_name",
      "municipality",
      "region",
      "county",
      "subdistrict_name",
      "judicial_district_code",
      "parish_name"
    ],
    "explanation": "Portuguese districts are a finite, official set of 18 administrative units in mainland Portugal. This semantic type captures those names exactly (with correct Portuguese diacritics and spacing) to support high-precision classification for address normalization, geospatial joins, and data quality checks where district names must match the official forms.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:52.958430"
  },
  {
    "resultType": "generated",
    "semanticType": "field",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\s+[A-Za-z]{2,}[\\sA-Za-z,;:\\.'\"!\\?\\-]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9100,
    "headerPatterns": [
      {
        "regExp": "(?i).*review[ _-]*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "review_text"
        ],
        "negativeExamples": [
          "review_score"
        ]
      },
      {
        "regExp": "(?i).*(free[ _-]*text|open[ _-]*text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "open_text_field"
        ],
        "negativeExamples": [
          "open_date"
        ]
      },
      {
        "regExp": "(?i).*(comment|comments|description|notes|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "status_detail"
        ]
      },
      {
        "regExp": "(?i).*(text|narrative|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback"
        ],
        "negativeExamples": [
          "customer_feed"
        ]
      },
      {
        "regExp": "(?i).*field.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_field"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "Thank you for your prompt response.",
      "Customer reported an intermittent issue with login.",
      "Please deliver the package to the back entrance.",
      "The meeting has been rescheduled to next Thursday afternoon.",
      "This product exceeded my expectations in every way.",
      "I agree with the points raised in the previous email.",
      "Not sure if this belongs to sales or support.",
      "The instructions were clear, but I still need clarification on step three."
    ],
    "negativeContentExamples": [
      "OK",
      "N/A",
      "john.doe@example.com",
      "SKU-00123",
      "2025-08-11",
      "A,B,C",
      "42",
      "https://example.org"
    ],
    "positiveHeaderExamples": [
      "comment_text",
      "free_text",
      "open_text_field",
      "customer_comments",
      "description",
      "review_text",
      "additional_remarks",
      "notes"
    ],
    "negativeHeaderExamples": [
      "comment_code",
      "desc_id",
      "status",
      "error_message_code",
      "name",
      "email",
      "title",
      "id"
    ],
    "explanation": "Identifies columns that contain free-form, human-readable text content such as comments, descriptions, notes, narratives, or reviews. This is useful for routing fields to NLP, sentiment analysis, PII redaction, or summarization workflows while avoiding overly structured identifiers or codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:53.540793"
  },
  {
    "resultType": "generated",
    "semanticType": "topic",
    "description": "Open-ended natural language text intended to capture human-readable topics, subjects, descriptions, or summaries. Values are typically multi-word phrases or sentences and may include punctuation, numbers, and varied lengths.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9][A-Za-z0-9'()\\-]+( [A-Za-z0-9][A-Za-z0-9'()\\-]+){1,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9460,
    "headerPatterns": [
      {
        "regExp": "(?i).*discussion.*topic.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "discussion_topic"
        ],
        "negativeExamples": [
          "topic_id"
        ]
      },
      {
        "regExp": "(?i).*(topic|subject)_(text|summary|title).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "topic_summary"
        ],
        "negativeExamples": [
          "subject_code"
        ]
      },
      {
        "regExp": "(?i).*(description|desc|summary|synopsis).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "notes_count"
        ]
      },
      {
        "regExp": "(?i).*(subject|headline|title).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "headline"
        ],
        "negativeExamples": [
          "topic_code"
        ]
      },
      {
        "regExp": "(?i).*topic.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "topic"
        ],
        "negativeExamples": [
          "title_number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Climate change policy and impacts on coastal cities",
      "Quarterly earnings overview and revenue trends",
      "Customer feedback and sentiment analysis",
      "Introduction to distributed systems and scalability",
      "Marketing strategy for new product launch",
      "Supply chain disruptions in 2024",
      "Data privacy regulations and compliance checklist",
      "Best practices for remote team collaboration"
    ],
    "negativeContentExamples": [
      "Topic",
      "SUBJECT",
      "2024-05-10",
      "ABC-12345",
      "Project-Alpha",
      "john.doe@example.com",
      "https://example.com",
      "Q4_2025"
    ],
    "positiveHeaderExamples": [
      "topic",
      "discussion_topic",
      "subject",
      "topic_text",
      "topic_summary",
      "headline",
      "description",
      "notes"
    ],
    "negativeHeaderExamples": [
      "topic_code",
      "topic_id",
      "subject_code",
      "headline_id",
      "description_flag",
      "notes_count",
      "title_number",
      "subject_date"
    ],
    "explanation": "This semantic type is intended to identify fields containing unconstrained human-readable text such as topics, subjects, descriptions, and summaries. It favors multi-word natural language content and avoids matching single tokens, identifiers, or formatted codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:53.589585"
  },
  {
    "resultType": "generated",
    "semanticType": "min",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}([ ,;:'\"()\\[\\]\\-]{1,3}[A-Za-z]{2,})+\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9320,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|client).*(comment|feedback|remark|note|narrative|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*(issue|problem|bug|ticket).*(description|details|summary|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "issue_id"
        ]
      },
      {
        "regExp": "(?i).*(comment|feedback|description|notes|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_notes"
        ],
        "negativeExamples": [
          "final_status"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmts|rmks|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "short_desc"
        ],
        "negativeExamples": [
          "acct_num"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "binary"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please provide a detailed summary of the incident.",
      "Customer reported intermittent issues with the app.",
      "This is a test sentence with several words.",
      "Thank you for your prompt assistance.",
      "Steps to reproduce: open the app, sign in, and submit.",
      "The product arrived damaged and packaging was torn.",
      "User feedback: interface feels slow on login.",
      "Additional notes - check logs from last night."
    ],
    "negativeContentExamples": [
      "Singleword",
      "A B",
      "123 456",
      "OK",
      "2024-05-10 update",
      "ERR-500",
      "U.S.A",
      "john.doe@example.com"
    ],
    "positiveHeaderExamples": [
      "customer_comments",
      "user_feedback",
      "issue_description",
      "additional_notes",
      "narrative_text",
      "remarks",
      "comment_text",
      "freeform_description"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "invoice_number",
      "created_date",
      "product_code",
      "ip_address",
      "geo_coordinates",
      "email",
      "order_id"
    ],
    "explanation": "This semantic type is intended to identify free-form narrative fields such as comments, descriptions, feedback, and notes where users write natural language text. It is useful for classifying columns that hold sentences or multi-word phrases rather than structured codes, numbers, or dates. The value pattern emphasizes the presence of multiple alphabetic words separated by common punctuation or spaces to distinguish natural language from identifiers and single tokens.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:54.444383"
  },
  {
    "resultType": "generated",
    "semanticType": "type",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ \\t]+\\b[A-Za-z]{2,}\\b[ \\t]+\\b[A-Za-z]{2,}\\b([ \\t]+\\b[A-Za-z]{2,}\\b)*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9030,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|product|ticket).*(comment|comments|notes|note|description|message|remark|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*(comment|comments|description|notes|message|remark|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "general_remarks"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*(desc|msg|txt|cmnt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "prod_code"
        ]
      },
      {
        "regExp": "(?i).*free[ _]?text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "text_encoding"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "feedback_text"
        ],
        "negativeExamples": [
          "phone_number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver the package by Friday.",
      "The customer reported intermittent failures after the update.",
      "This field contains notes about special handling instructions.",
      "Payment has been received and confirmed for the last invoice.",
      "High priority: escalate to supervisor if unresolved within 24 hours.",
      "User requested a callback to discuss billing discrepancies.",
      "Handle with care; fragile items included.",
      "Thank you for your prompt assistance."
    ],
    "negativeContentExamples": [
      "New order",
      "Approved",
      "2023-01-15",
      "john.doe@example.com",
      "12345",
      "SKU-12345",
      "United States",
      "A B C"
    ],
    "positiveHeaderExamples": [
      "customer_comments",
      "product_description",
      "free_text",
      "additional_notes",
      "support_message",
      "general_remarks",
      "feedback_text",
      "long_description"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "product_code",
      "note_id",
      "message_id",
      "description_length",
      "status",
      "text_encoding",
      "comments_flag"
    ],
    "explanation": "Open-ended text fields are frequently used for comments, descriptions, notes, and other narrative inputs that cannot be constrained to strict formats. The regex requires at least three alphabetic words to reduce false positives from codes, identifiers, dates, or single-word flags. High confidence threshold and priority ensure this broad type is only applied when patterns and headers strongly indicate free-form text.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:54.657481"
  },
  {
    "resultType": "generated",
    "semanticType": "rank",
    "description": "Open-ended human-readable text including sentences, phrases, and paragraphs with variable length and content, intended to capture narrative-style fields such as comments, descriptions, or notes. This type targets free-form natural language without strict structure or predefined formats.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'\u2019-]*([ \\t]+[A-Za-z][A-Za-z'\u2019-]*){1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9000,
    "headerPatterns": [
      {
        "regExp": "(?i).*issue.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "product_description_short"
        ]
      },
      {
        "regExp": "(?i).*customer.*comments?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "comment_count"
        ]
      },
      {
        "regExp": "(?i).*comment.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comment_text"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*notes?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "notes"
        ],
        "negativeExamples": [
          "notary_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Package arrived two days late but in good condition.",
      "Please contact me if you need further details.",
      "User reported intermittent login failures after the update.",
      "The instructions were clear; however, execution took longer than expected.",
      "Overall experience was positive, though the interface felt a bit cluttered.",
      "Customer requested a callback to discuss billing discrepancies.",
      "Observed a slight delay when loading larger files in the dashboard.",
      "This item met expectations and will be reordered for the next cycle."
    ],
    "negativeContentExamples": [
      "OK",
      "Pending",
      "12345",
      "A12-BC",
      "hello_world",
      "Great!",
      "Y",
      "2024-07-15"
    ],
    "positiveHeaderExamples": [
      "issue_description",
      "customer_comments",
      "free_text",
      "notes",
      "remarks",
      "details",
      "narrative",
      "comment_text"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "status",
      "comment_count",
      "rank",
      "name",
      "transaction_date",
      "email_address",
      "item_number"
    ],
    "explanation": "This semantic type identifies free-form narrative fields used for comments, descriptions, notes, and other unconstrained text. It is intended for columns that hold multi-word natural language rather than structured codes or numeric identifiers. The regex favors sequences with at least two alphabetic words to reduce false positives from single tokens or codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:55.216696"
  },
  {
    "resultType": "generated",
    "semanticType": "status",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9'(),\\-&/]*[A-Za-z][A-Za-z0-9'(),\\-&/]*[ ]+[A-Za-z0-9'(),\\-&/]*[A-Za-z][A-Za-z0-9'(),\\-&/]*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9300,
    "headerPatterns": [
      {
        "regExp": "(?i).*order.*status.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_status"
        ],
        "negativeExamples": [
          "order_date"
        ]
      },
      {
        "regExp": "(?i).*case.*status.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case status"
        ],
        "negativeExamples": [
          "case_id"
        ]
      },
      {
        "regExp": "(?i).*ticket.*status.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ticket_status_text"
        ],
        "negativeExamples": [
          "ticket_number"
        ]
      },
      {
        "regExp": "(?i).*status.*(text|description|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "status_description"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*status.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "status"
        ],
        "negativeExamples": [
          "state"
        ]
      }
    ],
    "positiveContentExamples": [
      "In progress",
      "Awaiting customer response",
      "Completed successfully",
      "Pending review by manager",
      "On hold due to payment issue",
      "Received and queued for processing",
      "Unable to reproduce the issue",
      "Approved for deployment"
    ],
    "negativeContentExamples": [
      "PENDING",
      "OK",
      "Done",
      "N/A",
      "A-1023",
      "2024-07-01",
      "john@example.com",
      "https://example.com/status"
    ],
    "positiveHeaderExamples": [
      "order_status",
      "case status",
      "ticket_status_text",
      "current_status",
      "status_description",
      "status_notes",
      "workflow_status",
      "latest_status"
    ],
    "negativeHeaderExamples": [
      "status_code",
      "http_status",
      "state",
      "result_flag",
      "approved",
      "status_id",
      "review_date",
      "ticket_number"
    ],
    "explanation": "Use this semantic type to identify columns that contain free-form descriptive status text, such as phrases and sentences authored by humans. It is intentionally broad to capture natural language content rather than structured identifiers or codes; therefore it requires at least two space-separated tokens containing letters and is assigned a high threshold and lower precedence to avoid conflicts with more specific types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:55.777304"
  },
  {
    "resultType": "generated",
    "semanticType": "id",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier can contain letters, numbers, and common symbols but must be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9._-]{3,35}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9050,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|record|entity|object).*[_ -]*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_id"
        ],
        "negativeExamples": [
          "customer_code"
        ]
      },
      {
        "regExp": "(?i).*(unique|external|source|system).*[_ -]*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "external_id"
        ],
        "negativeExamples": [
          "external_reference"
        ]
      },
      {
        "regExp": "(?i).*(identifier).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "primary_identifier"
        ],
        "negativeExamples": [
          "identification_date"
        ]
      },
      {
        "regExp": "(?i).*(uid|guid|uuid).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "uuid"
        ],
        "negativeExamples": [
          "user_id"
        ]
      },
      {
        "regExp": "(?i).*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "id"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "USR_0001A",
      "A1B2-C3D4",
      "rec.2024_09",
      "X9-7Z_21",
      "OBJ-AB12-CD",
      "cust_7g9z2",
      "Doc.118A-2",
      "ID-9f3c77"
    ],
    "negativeContentExamples": [
      "123456",
      "A1",
      "-ABC123",
      "ID 123-ABC",
      "abc_123!",
      "A.B",
      "2024-09",
      "A\u20141234"
    ],
    "positiveHeaderExamples": [
      "customer_id",
      "record_id",
      "entity_id",
      "unique_id",
      "external_id",
      "system_id",
      "uuid",
      "guid"
    ],
    "negativeHeaderExamples": [
      "customer_code",
      "record_number",
      "entity_name",
      "unique_ref",
      "external_reference",
      "system_key",
      "order_code",
      "user_key"
    ],
    "explanation": "Generic identifier values typically appear as compact tokens combining letters, digits, and simple separators such as hyphen, underscore, or dot. This type is intended for datasets where a field acts as the unique record key (e.g., customer_id, record_id) regardless of the domain. The pattern is conservative to reduce false positives: it requires the ID to start with a letter, be 4\u201336 characters long, and contain only letters, digits, period, underscore, or hyphen. Use header cues (e.g., *_id, uuid) to reinforce classification and prioritize this type only when the column strongly indicates an identifier.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:56.904447"
  },
  {
    "resultType": "generated",
    "semanticType": "height",
    "description": "Measures a person's or object's height expressed with explicit units. Supports common formats such as centimeters (cm), meters (m), millimeters (mm), and imperial feet/inches (e.g., 5 ft 9 in, 5'9\").",
    "pluginType": "regex",
    "regexPattern": "\\b(\\d{2,3}\\s?(cm|centimeter|centimeters)|\\d(\\.\\d{1,2})?\\s?(m|meter|meters)|\\d\\s?ft\\s?\\d{1,2}\\s?in|\\d\\s?feet\\s?\\d{1,2}\\s?inches|\\d'\\s?\\d{1,2}\"?|\\d\\s?(ft|feet)|\\d{3,4}\\s?mm)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9310,
    "headerPatterns": [
      {
        "regExp": "(?i).*height.*(cm|centimeter|centimeters|inch|inches|in|ft|feet|m|meter|mm).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "height_cm"
        ],
        "negativeExamples": [
          "height_limit"
        ]
      },
      {
        "regExp": "(?i).*(person|patient|user|employee).*height.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "patient_height"
        ],
        "negativeExamples": [
          "user_weight"
        ]
      },
      {
        "regExp": "(?i).*(body|human|biometric).*height.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "biometric_height"
        ],
        "negativeExamples": [
          "body_weight"
        ]
      },
      {
        "regExp": "(?i).*(stature|\\bht\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ht_in"
        ],
        "negativeExamples": [
          "hr_title"
        ]
      },
      {
        "regExp": "(?i).*height.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "height"
        ],
        "negativeExamples": [
          "width"
        ]
      }
    ],
    "positiveContentExamples": [
      "170 cm",
      "1.75 m",
      "5 ft 9 in",
      "5'9\"",
      "5 feet 11 inches",
      "6 ft",
      "180 centimeters",
      "1750 mm"
    ],
    "negativeContentExamples": [
      "170",
      "1.7",
      "67 in",
      "5 feet 9",
      "5' 9",
      "approx 170 cm",
      "170 cms",
      "1,75 m"
    ],
    "positiveHeaderExamples": [
      "height",
      "height_cm",
      "patient_height",
      "user_height_in",
      "body_height",
      "biometric_height",
      "height_meters",
      "ht_in"
    ],
    "negativeHeaderExamples": [
      "width",
      "weight",
      "altitude",
      "length",
      "hr_title",
      "user_weight_kg",
      "age_years",
      "dimensions"
    ],
    "explanation": "This semantic type identifies height measurements with explicit units across both metric and imperial systems, including common human-readable variants (cm, m, mm, ft/in, feet/inches). It is useful for profiling and validating columns where height is recorded for people or objects, ensuring values include recognizable units rather than bare numbers.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:57.926456"
  },
  {
    "resultType": "generated",
    "semanticType": "treatment",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]{1,}\\b(\\s+[A-Za-z][A-Za-z'-]{1,}\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9350,
    "headerPatterns": [
      {
        "regExp": "(?i).*treatment.*(description|details|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_description"
        ],
        "negativeExamples": [
          "treatment_notes"
        ]
      },
      {
        "regExp": "(?i).*treatment.*(notes|comments|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_notes"
        ],
        "negativeExamples": [
          "procedure_notes"
        ]
      },
      {
        "regExp": "(?i).*(treat|treatment).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_text"
        ],
        "negativeExamples": [
          "patient_text"
        ]
      },
      {
        "regExp": "(?i).*(treatment).*info.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_info"
        ],
        "negativeExamples": [
          "visit_info"
        ]
      },
      {
        "regExp": "(?i).*treatment.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment"
        ],
        "negativeExamples": [
          "diagnosis"
        ]
      }
    ],
    "positiveContentExamples": [
      "Apply cold compress to the affected area twice daily.",
      "Patient to begin physical therapy sessions once per week.",
      "Administer ibuprofen as needed for pain relief.",
      "Encourage gentle range-of-motion exercises each morning.",
      "Monitor symptoms and follow up if swelling increases.",
      "Clean wound with saline and cover with sterile dressing.",
      "Refer to specialist for further evaluation and treatment."
    ],
    "negativeContentExamples": [
      "Physical therapy",
      "N/A",
      "None",
      "500mg BID",
      "Completed",
      "PT eval",
      "TBD"
    ],
    "positiveHeaderExamples": [
      "treatment_notes",
      "treatment_description",
      "treatment_details",
      "treatment_comment",
      "treatment_narrative",
      "treatment_text",
      "treatment_summary"
    ],
    "negativeHeaderExamples": [
      "diagnosis_notes",
      "procedure_description",
      "patient_name",
      "medication_text",
      "visit_summary",
      "comments",
      "free_text"
    ],
    "explanation": "The treatment semantic type is intended for columns containing free-form narrative text describing actions, plans, or instructions, such as clinical treatments, care notes, or similar unstructured prose. Detection prioritizes headers that pair the term \"treatment\" with descriptors like description, notes, text, narrative, or summary, and values that present at least three word tokens typical of natural language. This type is broad and carries a high threshold and lower priority to reduce conflicts with more specific structured types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:58.407101"
  },
  {
    "resultType": "generated",
    "semanticType": "name",
    "description": "Full personal names in Western order: a given name followed by a family name, separated by a single space. No middle names, titles, suffixes, initials, or extra components. Hyphens and apostrophes within each name token are allowed.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]+(['-][A-Za-z]+)* [A-Z][a-z]+(['-][A-Za-z]+)*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9020,
    "headerPatterns": [
      {
        "regExp": "(?i).*first.*last.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "first_last_name"
        ],
        "negativeExamples": [
          "first_name"
        ]
      },
      {
        "regExp": "(?i).*given.*surname.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "given_surname"
        ],
        "negativeExamples": [
          "surname"
        ]
      },
      {
        "regExp": "(?i).*(full.*name|complete.*name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "full_name"
        ],
        "negativeExamples": [
          "name_prefix"
        ]
      },
      {
        "regExp": "(?i).*(person|customer|user|employee).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_name"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*f.?name.*l.?name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fname_lname"
        ],
        "negativeExamples": [
          "fname"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "id"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Mary Johnson",
      "Anne-Marie O'Neill",
      "Jean-Paul Martin",
      "Sarah O'Brien",
      "David Clark",
      "Luca Bianchi",
      "D'Angelo Russell"
    ],
    "negativeContentExamples": [
      "John A Smith",
      "Smith, John",
      "Mr John Smith",
      "John Smith Jr",
      "john smith",
      "John  Smith",
      "J. Smith",
      "Mary-Jane"
    ],
    "positiveHeaderExamples": [
      "first_last_name",
      "given_surname",
      "full_name",
      "customer_name",
      "fname_lname",
      "person_full_name",
      "employee_full_name",
      "legal_name"
    ],
    "negativeHeaderExamples": [
      "first_name",
      "last_name",
      "middle_name",
      "username",
      "account_name",
      "display_name",
      "name_prefix",
      "surname"
    ],
    "explanation": "This semantic type identifies two-part personal names in the common Western order: a single given name followed by a single family name with exactly one space between them. It accepts internal hyphens and apostrophes within each token but excludes titles, middle names/initials, suffixes, commas, and multiple spaces. Use it to detect simple person names where datasets store only first and last names as one field.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:39:59.685542"
  },
  {
    "resultType": "generated",
    "semanticType": "area",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z]+([ \\t,;:!?.()\\[\\]\"'\\-]+[A-Za-z0-9][A-Za-z0-9]{1,}){3,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9450,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|case|incident).*(description|narrative|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_description"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(ticket|order|profile).*notes?.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "order_notes"
        ],
        "negativeExamples": [
          "order_number"
        ]
      },
      {
        "regExp": "(?i).*(free[ _]?text|text[ _]?area|long[ _]?text).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "text_area"
        ],
        "negativeExamples": [
          "text_code"
        ]
      },
      {
        "regExp": "(?i).*(comments?|remarks?|summary).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "user_comments"
        ],
        "negativeExamples": [
          "user_status"
        ]
      },
      {
        "regExp": "(?i).*(body|message|explanation|story).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "message_body"
        ],
        "negativeExamples": [
          "message_id"
        ]
      },
      {
        "regExp": "(?i).*area.*",
        "confidence": 91,
        "mandatory": true,
        "positiveExamples": [
          "area"
        ],
        "negativeExamples": [
          "region_name"
        ]
      }
    ],
    "positiveContentExamples": [
      "The customer reported intermittent connectivity issues throughout the afternoon, affecting file uploads and video calls.",
      "Please provide a detailed summary of activities completed during the site visit, including timelines, contacts, and outcomes.",
      "After reviewing the documentation, we determined that a configuration change is required to resolve the recurring alerts.",
      "This section captures any additional notes the analyst considers relevant to the interpretation of the results.",
      "The package arrived damaged; contents were inspected, photographed, and repacked before forwarding to the recipient.",
      "Steps taken: rebooted device, cleared application cache, reinstalled software; the issue persists under both Wi-Fi and LTE.",
      "Overall, the team is optimistic about the pilot; however, several risks remain unmitigated pending stakeholder approval."
    ],
    "negativeContentExamples": [
      "John Smith",
      "2025-08-11",
      "http://example.com/path",
      "12345-AB",
      "Seattle, WA",
      "Approved",
      "Pending legal review"
    ],
    "positiveHeaderExamples": [
      "customer_description",
      "order_notes",
      "text_area",
      "user_comments",
      "message_body",
      "incident_details",
      "long_text"
    ],
    "negativeHeaderExamples": [
      "customer_id",
      "order_number",
      "code_text",
      "user_status",
      "message_id",
      "region_name",
      "amount"
    ],
    "explanation": "Use this semantic type to identify columns intended for free-form narrative or descriptive text, such as notes, comments, or detailed descriptions. The regex emphasizes multi-token natural language content with common separators and punctuation, reducing false positives from short labels, codes, or strictly formatted values. Header patterns progress from specific business contexts (e.g., customer_description) to general terms (e.g., area) to aid schema-driven detection while maintaining high thresholds and priority appropriate for broad text fields.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:00.374469"
  },
  {
    "resultType": "generated",
    "semanticType": "frequency",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{3,}( [A-Za-z0-9][A-Za-z0-9'-]{1,}){1,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9250,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|client).*(feedback|comment|review).*(text|notes|detail|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback_text"
        ],
        "negativeExamples": [
          "customer_feedback_score"
        ]
      },
      {
        "regExp": "(?i).*(issue|incident|ticket).*(description|details|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "issue_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|txt|remarks|remark|memo|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "desc_code"
        ]
      },
      {
        "regExp": "(?i).*(free[ _-]?text|freeform|unstructured|long[ _-]?text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached report and provide feedback",
      "User reported intermittent issues after the last update",
      "Handle with care, glass components are included",
      "Payment will be processed within three to five business days",
      "Contact support if the problem persists beyond 24 hours",
      "This item requires calibration before initial use",
      "The client requested an expedited delivery timeline",
      "Schedule maintenance during off-peak hours to minimize impact"
    ],
    "negativeContentExamples": [
      "OK",
      "N/A",
      "Yes",
      "2024-06-15",
      "12345",
      "AB test",
      "v2 update",
      "john.doe@example.com"
    ],
    "positiveHeaderExamples": [
      "comments",
      "customer_feedback",
      "issue_description",
      "free_text",
      "additional_details",
      "notes",
      "narrative",
      "remarks"
    ],
    "negativeHeaderExamples": [
      "comment_count",
      "feedback_score",
      "issue_id",
      "text_length",
      "code_description",
      "number_of_notes",
      "summary_date",
      "status_code"
    ],
    "explanation": "Use this semantic type to identify columns that contain free-form, multi-word natural language text such as comments, descriptions, narratives, and remarks. The value pattern emphasizes at least two tokens with alphabetic leading characters, reducing false positives from IDs, dates, codes, and single-word flags. It is intentionally broad yet conservative, and should be applied with higher threshold and priority to avoid conflicts with more specific structured types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:01.510027"
  },
  {
    "resultType": "generated",
    "semanticType": "model",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019(),;:.\\-]*\\s+[A-Za-z][A-Za-z0-9'\u2019(),;:.\\-]*(\\s+[A-Za-z][A-Za-z0-9'\u2019(),;:.\\-]*)*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 99,
    "priority": 9240,
    "headerPatterns": [
      {
        "regExp": "(?i).*model.*(description|desc|text|notes|summary|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "model_description"
        ],
        "negativeExamples": [
          "model_code"
        ]
      },
      {
        "regExp": "(?i).*model.*(details|info|information|content|body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "model_details"
        ],
        "negativeExamples": [
          "model_id"
        ]
      },
      {
        "regExp": "(?i).*(mdl|modl).*(desc|text|txt|notes|sum|comment|cmt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "mdl_desc"
        ],
        "negativeExamples": [
          "mdl_id"
        ]
      },
      {
        "regExp": "(?i).*(free|unstructured|open)[ _-]?(text|notes|content).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_tier"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "This model enables natural language responses.",
      "Free-form text may include punctuation, numbers, and symbols.",
      "Users can enter notes describing behavior and caveats.",
      "A concise summary of the model's purpose and scope.",
      "Multiple sentences are acceptable in this description.",
      "General narrative content without rigid structure.",
      "Example paragraph with commas, dashes - and parentheses (optional).",
      "Short phrase providing context or additional details."
    ],
    "negativeContentExamples": [
      "A12B-900",
      "john.doe@example.com",
      "https://example.org/page",
      "2025-08-11",
      "SKU_12345",
      "X100",
      "123456789",
      "OK"
    ],
    "positiveHeaderExamples": [
      "model_description",
      "model_text",
      "model_notes",
      "model_summary",
      "model_comments",
      "model_details",
      "model_info",
      "free_text"
    ],
    "negativeHeaderExamples": [
      "model_code",
      "model_id",
      "model_number",
      "model_version",
      "product_model",
      "model_uri",
      "model_name",
      "text_flag"
    ],
    "explanation": "This semantic type is intended for columns that store natural language content such as descriptions, notes, comments, and summaries. It expects multi-word human-readable text and is deliberately broad to accommodate varied narrative inputs across domains. The value pattern requires at least two letter-starting words with spaces, allowing common punctuation while filtering out identifiers, codes, URLs, and other structured tokens. The high threshold and priority reduce conflicts with more specific types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:02.739320"
  },
  {
    "resultType": "generated",
    "semanticType": "cost",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]+([ ,;:'\"\\-()\\/&]+[A-Za-z]+){2,}\\b([.!?])?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9420,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer[_ -]?notes|internal[_ -]?remarks|comment[_ -]?text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "total_cost"
        ]
      },
      {
        "regExp": "(?i).*(item[_ -]?description|long[_ -]?description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_description"
        ],
        "negativeExamples": [
          "sku"
        ]
      },
      {
        "regExp": "(?i).*(public[_ -]?comments|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "public_comments"
        ],
        "negativeExamples": [
          "amount"
        ]
      },
      {
        "regExp": "(?i).*(desc|remarks|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative"
        ],
        "negativeExamples": [
          "price"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "currency_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please update the delivery address before shipment.",
      "Customer reported intermittent errors during checkout.",
      "This item includes a two-year warranty and user manual.",
      "Delayed due to weather; rescheduled for next Tuesday.",
      "Payment received in full; receipt emailed to the buyer.",
      "The project aims to reduce emissions across all sites.",
      "Contact support if the issue persists after rebooting."
    ],
    "negativeContentExamples": [
      "OK",
      "High cost",
      "A1B2C3",
      "12345678",
      "SKU-00421",
      "yes",
      "N/A",
      "http://example.com"
    ],
    "positiveHeaderExamples": [
      "customer_notes",
      "item_description",
      "internal_remarks",
      "public_comments",
      "narrative",
      "free_text",
      "long_description",
      "comment_text"
    ],
    "negativeHeaderExamples": [
      "cost",
      "amount",
      "price",
      "total_cost",
      "currency_code",
      "quantity",
      "sku",
      "status"
    ],
    "explanation": "This semantic type identifies free-form, natural language text fields commonly used for comments, descriptions, notes, and narratives. It is designed to distinguish multi-word human-readable content from structured identifiers, numeric fields, and short categorical flags. The value pattern requires at least three alphabetic words, allowing typical punctuation, to minimize confusion with codes or single-word labels.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:02.844573"
  },
  {
    "resultType": "generated",
    "semanticType": "description",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}[A-Za-z0-9'\u2019\\-]*\\b[ ]+\\b[A-Za-z]{2,}[A-Za-z0-9'\u2019\\-]*\\b([ ,;:.!?()\\[\\]\"']*\\b[A-Za-z0-9'\u2019\\-]{2,}\\b)*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9010,
    "headerPatterns": [
      {
        "regExp": "(?i).*product.*(long|short).*(description|desc).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_long_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(item|service|catalog|sku).*(description|desc).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "item_status"
        ]
      },
      {
        "regExp": "(?i).*(ticket|issue|case|story).*(description|desc|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_summary"
        ],
        "negativeExamples": [
          "ticket_id"
        ]
      },
      {
        "regExp": "(?i).*(details|notes|narrative|about|bio|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "user_bio"
        ],
        "negativeExamples": [
          "profile_url"
        ]
      },
      {
        "regExp": "(?i).*(description|desc).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "Delayed shipment due to weather conditions.",
      "Please update the billing address before dispatch.",
      "Customer reported a clicking noise during operation.",
      "Compact and lightweight design with extended battery life.",
      "Steps to reproduce: open the app, sign in, and tap Settings.",
      "Stainless steel finish shows minor scratches near the handle.",
      "Includes all necessary accessories and quick-start guide.",
      "Notes from the agent call: customer requested a refund."
    ],
    "negativeContentExamples": [
      "OK",
      "lorem",
      "12345",
      "INV-00921",
      "2024-07-01 meeting",
      "High-quality",
      "A12 B34",
      "OK 123"
    ],
    "positiveHeaderExamples": [
      "product_long_description",
      "item_desc",
      "service_short_description",
      "ticket_description",
      "issue_summary",
      "details",
      "notes_text",
      "user_bio"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "service_name",
      "ticket_id",
      "comments_count",
      "summary_date",
      "profile_url",
      "item_status",
      "product_version"
    ],
    "explanation": "This semantic type is intended to identify free-form, human-readable description fields that contain multi-word natural language text. It emphasizes phrases and sentences by requiring at least two alphabetic words separated by a space and allows common punctuation found in prose. The high threshold and priority help avoid conflicts with more specific structured types such as codes, identifiers, or dates.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:02.967388"
  },
  {
    "resultType": "generated",
    "semanticType": "class",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]{1,}\\b[ \\t\\r\\n]+[A-Za-z][A-Za-z'-]{1,}([ \\t\\r\\n]+[A-Za-z0-9][A-Za-z0-9'()\\-.,;:?!]{1,}){1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9280,
    "headerPatterns": [
      {
        "regExp": "(?i).*class.*description.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "class_description"
        ],
        "negativeExamples": [
          "class_code"
        ]
      },
      {
        "regExp": "(?i).*class.*notes.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "class_notes"
        ],
        "negativeExamples": [
          "notes_class"
        ]
      },
      {
        "regExp": "(?i).*class.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "class_text"
        ],
        "negativeExamples": [
          "textbook_class"
        ]
      },
      {
        "regExp": "(?i).*cls.*desc.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "cls_desc"
        ],
        "negativeExamples": [
          "close_desc"
        ]
      },
      {
        "regExp": "(?i).*class.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "class"
        ],
        "negativeExamples": [
          "course_name"
        ]
      }
    ],
    "positiveContentExamples": [
      "The class introduces fundamental concepts of data analysis with practical exercises.",
      "Students are expected to read the assigned chapters before each session.",
      "This course emphasizes collaboration and peer feedback throughout the term.",
      "Topics include probability, linear models, and basic programming in Python.",
      "By the end, participants will develop a small project demonstrating their skills.",
      "Please bring a laptop and be prepared for in-class activities and discussions.",
      "Assessment consists of quizzes, a midterm, and a final presentation."
    ],
    "negativeContentExamples": [
      "Excellent service",
      "A12B-45-CX",
      "CS-101",
      "project_plan_v2",
      "2025-08-01",
      "Yes",
      "OK - N/A"
    ],
    "positiveHeaderExamples": [
      "class_description",
      "class_notes",
      "class_text",
      "class_summary",
      "class_details",
      "cls_desc",
      "class_comments"
    ],
    "negativeHeaderExamples": [
      "classification_code",
      "course_name",
      "subject_text",
      "classroom",
      "class_id",
      "class_code",
      "notes"
    ],
    "explanation": "Use this semantic type to detect columns containing free-form, human-readable narrative content such as descriptions, summaries, comments, or notes pertaining to a class. The value pattern requires multiple word tokens separated by whitespace to distinguish natural language from short codes or identifiers. Header patterns progress from explicit class-specific content labels to the primitive 'class' term to balance recall and precision in schema inference.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:03.256523"
  },
  {
    "resultType": "generated",
    "semanticType": "notes",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b(\\s+[A-Za-z]{2,}\\b)+",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9330,
    "headerPatterns": [
      {
        "regExp": "(?i).*case.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_notes"
        ],
        "negativeExamples": [
          "case_number"
        ]
      },
      {
        "regExp": "(?i).*customer.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*order.*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_comments"
        ],
        "negativeExamples": [
          "order_amount"
        ]
      },
      {
        "regExp": "(?i).*rmks.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "shipment_rmks"
        ],
        "negativeExamples": [
          "shipment_ref"
        ]
      },
      {
        "regExp": "(?i).*memo.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "staff_memo"
        ],
        "negativeExamples": [
          "staff_id"
        ]
      },
      {
        "regExp": "(?i).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "notes"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please ship to the new address on file.",
      "Customer called to report a missing item.",
      "Follow up next week after QA review.",
      "Payment received; updating ledger accordingly.",
      "Left voicemail at 3 PM; awaiting response.",
      "Requires manager approval before release.",
      "Damaged packaging noted on arrival.",
      "International delivery may incur duties and taxes."
    ],
    "negativeContentExamples": [
      "Approved",
      "OK",
      "2023-11-05",
      "A-12345",
      "N/A",
      "user@example.com",
      "12345 67890",
      "X Y"
    ],
    "positiveHeaderExamples": [
      "case_notes",
      "customer_notes",
      "order_comments",
      "internal_remarks",
      "shipment_rmks",
      "notes",
      "staff_memo",
      "project_notes"
    ],
    "negativeHeaderExamples": [
      "case_number",
      "customer_id",
      "order_amount",
      "shipment_status",
      "internal_rating",
      "status",
      "description",
      "ticket_count"
    ],
    "explanation": "This semantic type is intended for freeform, unstructured textual fields such as user notes, comments, or remarks that accompany records. It emphasizes the presence of multiple natural-language words rather than rigid formatting, making it suited to narrative content captured in operational systems, CRMs, help desks, and logs.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:04.683466"
  },
  {
    "resultType": "generated",
    "semanticType": "parent",
    "description": "This type represents full personal names formatted in the first name followed by last name order, which is common in Western naming conventions. The values combine given names and family names separated by a single space without including middle names, titles, or additional name components.",
    "pluginType": "regex",
    "regexPattern": "\\b(([A-Z][a-z]+(['-][A-Za-z][a-z]+)*)|([A-Z]['-][A-Za-z][a-z]+(['-][A-Za-z][a-z]+)*)) (([A-Z][a-z]+(['-][A-Za-z][a-z]+)*)|([A-Z]['-][A-Za-z][a-z]+(['-][A-Za-z][a-z]+)*))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9370,
    "headerPatterns": [
      {
        "regExp": "(?i).*parent.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "parent full name"
        ],
        "negativeExamples": [
          "parent first name"
        ]
      },
      {
        "regExp": "(?i).*parent.*first.*last.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "parent first last"
        ],
        "negativeExamples": [
          "parent last first"
        ]
      },
      {
        "regExp": "(?i).*parent.*legal.*name.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "parent legal name"
        ],
        "negativeExamples": [
          "legal guardian name"
        ]
      },
      {
        "regExp": "(?i).*parent.*name.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "parent_name"
        ],
        "negativeExamples": [
          "child_name"
        ]
      },
      {
        "regExp": "(?i).*(parent|prnt).*(name|nm).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "prnt_nm"
        ],
        "negativeExamples": [
          "parent_id"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Maria Lopez",
      "Li Wei",
      "Jean-Luc Picard",
      "Oona O'Neill",
      "Anne-Marie Durant",
      "Peter O'Brien",
      "Carla Mendes"
    ],
    "negativeContentExamples": [
      "John A Smith",
      "Smith, John",
      "Dr John Smith",
      "john smith",
      "John  Smith",
      "John-Smith",
      "Mary Jane Watson",
      "J Smith"
    ],
    "positiveHeaderExamples": [
      "parent_name",
      "parent full name",
      "parent first last",
      "parent legal name",
      "primary_parent_name",
      "parentName",
      "parent complete name",
      "legal_parent_name"
    ],
    "negativeHeaderExamples": [
      "parent_email",
      "parent_id",
      "child_name",
      "parent_first_name",
      "parent_last_name",
      "guardian_name",
      "parent_names",
      "parent_phone_number"
    ],
    "explanation": "NAME.PARENT identifies two-part personal names in Firstname Lastname order with a single separating space. It permits internal hyphens or apostrophes within each token (e.g., O'Neill, Jean-Luc) but disallows titles, middle names/initials, suffixes, or additional components. Use this when a column specifically holds a parent's full name as a single field.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:05.715030"
  },
  {
    "resultType": "generated",
    "semanticType": "race",
    "description": "This type captures racial and ethnic designations as they appear in demographic surveys, census forms, and diversity analysis using complete descriptive terminology. The values represent standard racial and ethnic categories following established demographic classification systems with full English language terms.",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "WHITE",
      "BLACK OR AFRICAN AMERICAN",
      "BLACK",
      "AFRICAN AMERICAN",
      "ASIAN",
      "AMERICAN INDIAN OR ALASKA NATIVE",
      "AMERICAN INDIAN",
      "ALASKA NATIVE",
      "NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER",
      "PACIFIC ISLANDER",
      "HISPANIC OR LATINO",
      "NOT HISPANIC OR LATINO",
      "NON-HISPANIC",
      "TWO OR MORE RACES",
      "SOME OTHER RACE",
      "MIDDLE EASTERN OR NORTH AFRICAN",
      "MIDDLE EASTERN",
      "NORTH AFRICAN",
      "ASIAN INDIAN",
      "FILIPINO",
      "CHINESE",
      "JAPANESE"
    ],
    "backout": "^[A-Z][A-Z ]{2,60}$",
    "confidenceThreshold": 92,
    "priority": 9220,
    "headerPatterns": [
      {
        "regExp": "(?i).*respondent.*race.*ethnic.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "respondent_race_ethnicity"
        ],
        "negativeExamples": [
          "respondent_ethnicity"
        ]
      },
      {
        "regExp": "(?i).*participant.*race.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "participant_race"
        ],
        "negativeExamples": [
          "participant_age"
        ]
      },
      {
        "regExp": "(?i).*demographic.*race.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "demographic_race"
        ],
        "negativeExamples": [
          "demographic_gender"
        ]
      },
      {
        "regExp": "(?i).*ethnic.*race.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ethnicity_race"
        ],
        "negativeExamples": [
          "ethnic_group"
        ]
      },
      {
        "regExp": "(?i).*race.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "race"
        ],
        "negativeExamples": [
          "ethnicity"
        ]
      }
    ],
    "positiveContentExamples": [
      "Black or African American",
      "White",
      "Asian",
      "American Indian or Alaska Native",
      "Native Hawaiian or Other Pacific Islander",
      "Hispanic or Latino",
      "Not Hispanic or Latino",
      "Two or More Races"
    ],
    "negativeContentExamples": [
      "Black/African American",
      "American Indian/Alaska Native",
      "Native Hawaiian and Other Pacific Islander",
      "Two or More Race",
      "White (Non-Hispanic)",
      "Hispanic",
      "Latinx",
      "Prefer not to answer"
    ],
    "positiveHeaderExamples": [
      "race",
      "race_ethnicity",
      "respondent_race",
      "participant_race",
      "demographic_race",
      "ethnicity_race",
      "person_race",
      "employee_race"
    ],
    "negativeHeaderExamples": [
      "ethnicity",
      "gender",
      "age",
      "race_time",
      "car_race",
      "ethnic_group",
      "nationality",
      "color"
    ],
    "explanation": "PERSON.race identifies columns containing racial and ethnic designations used in demographic reporting. It focuses on full English descriptions of widely recognized groups (e.g., White, Black or African American, American Indian or Alaska Native, Hispanic or Latino) and closely related formulations used in surveys and censuses. The list plugin ensures precise recognition of canonical values while the backout pattern provides a conservative fallback shape for uppercase text labels.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:05.715273"
  },
  {
    "resultType": "generated",
    "semanticType": "state",
    "description": "This type captures the complete names of US states and territories as they are used in official documentation and government administration. The values represent full state names using proper English spelling and standard formatting as established by the US constitutional and administrative systems.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming|District of Columbia|Puerto Rico|Guam|American Samoa|Northern Mariana Islands|United States Virgin Islands|U\\.S\\. Virgin Islands|Virgin Islands of the United States)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9140,
    "headerPatterns": [
      {
        "regExp": "(?i).*(us|u\\.s\\.).*state.*territor.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "us_state_territory_name"
        ],
        "negativeExamples": [
          "us_state_code"
        ]
      },
      {
        "regExp": "(?i).*state.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "state_full_name"
        ],
        "negativeExamples": [
          "state_abbrev"
        ]
      },
      {
        "regExp": "(?i).*(state|territor).*name.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "territory_name"
        ],
        "negativeExamples": [
          "country_name"
        ]
      },
      {
        "regExp": "(?i).*(state|st)[_ ]?nm.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "st_nm"
        ],
        "negativeExamples": [
          "st_cd"
        ]
      },
      {
        "regExp": "(?i).*state.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "state"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 88,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "California",
      "New York",
      "Rhode Island",
      "North Dakota",
      "District of Columbia",
      "Puerto Rico",
      "American Samoa",
      "United States Virgin Islands"
    ],
    "negativeContentExamples": [
      "New York City",
      "California, USA",
      "Puerto Rican",
      "Washington DC",
      "Virgin Islands",
      "RhodeIsland",
      "South-Carolina",
      "Commonwealth of Puerto Rico"
    ],
    "positiveHeaderExamples": [
      "us_state_territory_name",
      "state_full_name",
      "state_name",
      "territory_name",
      "st_nm",
      "state",
      "state_name_text",
      "us_state_name"
    ],
    "negativeHeaderExamples": [
      "state_code",
      "state_abbrev",
      "territory_code",
      "state_id",
      "province_name",
      "country_name",
      "region_name",
      "status"
    ],
    "explanation": "Identifies full US state and territory names in datasets, capturing proper multi-word forms such as New Hampshire, District of Columbia, and United States Virgin Islands. Useful for parsing address fields, standardizing geographic dimensions, and validating records where the complete jurisdiction name is expected rather than abbreviations. This type intentionally excludes two-letter postal codes, abbreviations, and augmented phrases (e.g., 'State of', 'Commonwealth of') to reduce ambiguity and ensure precise matching of canonical names.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:06.009547"
  },
  {
    "resultType": "generated",
    "semanticType": "language",
    "description": "This type captures natural language names as they are commonly expressed in English text and international communication. The values represent complete language names using standard English terminology and conventional spelling without abbreviated forms or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{2,}(-[A-Z][a-z]{2,})?( [A-Z][a-z]{2,}(-[A-Z][a-z]{2,})?){0,3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9440,
    "headerPatterns": [
      {
        "regExp": "(?i).*primary.*language.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "primary_language_name"
        ],
        "negativeExamples": [
          "language_code"
        ]
      },
      {
        "regExp": "(?i).*preferred.*language.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "preferred_language"
        ],
        "negativeExamples": [
          "preferred_locale"
        ]
      },
      {
        "regExp": "(?i).*spoken.*language.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "spoken_language"
        ],
        "negativeExamples": [
          "programming_language"
        ]
      },
      {
        "regExp": "(?i).*user.*language.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "user_language"
        ],
        "negativeExamples": [
          "user_locale"
        ]
      },
      {
        "regExp": "(?i).*language.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "language"
        ],
        "negativeExamples": [
          "locale"
        ]
      }
    ],
    "positiveContentExamples": [
      "English",
      "Spanish",
      "Mandarin Chinese",
      "American English",
      "Brazilian Portuguese",
      "Modern Greek",
      "American Sign Language",
      "Serbo-Croatian"
    ],
    "negativeContentExamples": [
      "EN",
      "ENGLISH",
      "eng",
      "English (US)",
      "zh-CN",
      "French, Canadian",
      "Chinese/Traditional",
      "English-UK"
    ],
    "positiveHeaderExamples": [
      "primary_language_name",
      "preferred_language",
      "user_preferred_language",
      "spoken_language",
      "native_language",
      "language_of_communication",
      "account_language",
      "display_language"
    ],
    "negativeHeaderExamples": [
      "language_code",
      "programming_language",
      "iso_language",
      "locale",
      "region",
      "country",
      "timezone",
      "script"
    ],
    "explanation": "Identifies full natural language names written in English (e.g., English, Brazilian Portuguese, American Sign Language). Useful for classifying fields that store a user's spoken or preferred language for UI, profiles, or communication settings. Excludes abbreviations, locale tags, and codes (e.g., en, en-US, zh-CN) and values with parentheses, slashes, or commas indicating variants or codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:06.020540"
  },
  {
    "resultType": "generated",
    "semanticType": "filename",
    "description": "This type captures complete filenames as they appear in file systems and directory listings, including a base name and a file extension. Values use alphanumeric characters, dots, spaces, and common symbols, and must exclude any full path information or directory separators.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9][A-Za-z0-9 _\\-\\+\\(\\)\\[\\]\\.]{0,200}\\.[A-Za-z0-9]{1,8}(\\.[A-Za-z0-9]{1,8}){0,2}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9390,
    "headerPatterns": [
      {
        "regExp": "(?i).*document.*file.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "document_file_name"
        ],
        "negativeExamples": [
          "document_date"
        ]
      },
      {
        "regExp": "(?i).*attachment.*file.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "attachment_filename"
        ],
        "negativeExamples": [
          "attachment_type"
        ]
      },
      {
        "regExp": "(?i).*export.*file.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "export_file_name"
        ],
        "negativeExamples": [
          "export_path"
        ]
      },
      {
        "regExp": "(?i).*(filename|file_name|file_nm|fname).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "file_name"
        ],
        "negativeExamples": [
          "file_size"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "report_final_v2.pdf",
      "sales-data-2023.csv",
      "photo_001.JPG",
      "archive.tar.gz",
      "README.md",
      "budget Q1.xlsx",
      "presentation(final).pptx",
      "data+backup.sql"
    ],
    "negativeContentExamples": [
      "/etc/hosts.txt",
      "C:\\temp\\report.pdf",
      "financials2023",
      ".gitignore",
      "notes.",
      "image png",
      "summary:2023.pdf",
      "archive.tar.gz/"
    ],
    "positiveHeaderExamples": [
      "file_name",
      "filename",
      "document_file_name",
      "attachment_filename",
      "export_file_name",
      "image_fname",
      "output_file_nm",
      "upload_file_name"
    ],
    "negativeHeaderExamples": [
      "file_path",
      "file_size",
      "document_date",
      "attachment_type",
      "name_prefix",
      "display_name",
      "filepath",
      "file_count"
    ],
    "explanation": "Use this type to identify standalone filenames that include a base name and an extension, without any directory or drive components. It is useful for parsing exports, logs, attachments, and file-related metadata where the value is the file\u2019s name, not its full path.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:06.514000"
  },
  {
    "resultType": "generated",
    "semanticType": "date",
    "description": "Unix timestamp values expressed as whole seconds since the Unix epoch (1970-01-01T00:00:00Z). Values are plain integers with no separators, signs, decimals, or textual components, representing seconds precision only.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9][0-9]{9}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9060,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unix|epoch).*(timestamp|time).*(\\bseconds\\b|\\bsecond\\b|\\bsecs\\b|\\bsec\\b|\\bs\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unix_timestamp_seconds"
        ],
        "negativeExamples": [
          "unix_timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(unix|epoch).*(timestamp|time).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "epoch_time"
        ],
        "negativeExamples": [
          "event_time"
        ]
      },
      {
        "regExp": "(?i).*(\\bunixts\\b|\\bunix_ts\\b|\\bepochtime\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unix_ts"
        ],
        "negativeExamples": [
          "timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(\\bts\\b|\\btimestamp\\b|\\btime\\b).*(\\bseconds\\b|\\bsecond\\b|\\bsecs\\b|\\bsec\\b|\\bs\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "event_ts_sec"
        ],
        "negativeExamples": [
          "event_ts_ms"
        ]
      },
      {
        "regExp": "(?i).*(\\bdate\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "date"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "1000000000",
      "1234567890",
      "1609459200",
      "1672531200",
      "1704067200",
      "1893456000",
      "2147483647",
      "2524608000"
    ],
    "negativeContentExamples": [
      "946684800",
      "1609459200000",
      "1,609,459,200",
      "1609459200.0",
      "+1609459200",
      "0000000000",
      "01609459200",
      "160945920O"
    ],
    "positiveHeaderExamples": [
      "unix_timestamp_seconds",
      "epoch_time",
      "unix_ts",
      "event_ts_sec",
      "login_unix_time_s",
      "date",
      "epoch_timestamp",
      "unixts"
    ],
    "negativeHeaderExamples": [
      "timestamp_ms",
      "created_time_ms",
      "event_time",
      "transaction_id",
      "timezone",
      "ms_since_epoch",
      "timestamp",
      "file_created"
    ],
    "explanation": "This semantic type detects Unix epoch timestamps in seconds: 10-digit positive integers without signs, decimals, or separators. It is useful for identifying columns storing system event times, log timestamps, or other time fields encoded as seconds since 1970-01-01 UTC. The header patterns favor explicit mentions of unix/epoch and seconds to reduce confusion with millisecond-based timestamps.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:06.938408"
  },
  {
    "resultType": "generated",
    "semanticType": "part",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b([\\s,;:!\\?\\-]+\\b[A-Za-z]{2,}\\b){4,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9210,
    "headerPatterns": [
      {
        "regExp": "(?i).*part.*(text|description|desc|notes?|remark|details?|comments?).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "part_description"
        ],
        "negativeExamples": [
          "part_number"
        ]
      },
      {
        "regExp": "(?i).*(product|issue|order|record|item).*(description|desc|notes?|remarks?|comments?).*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(description|comments?|notes?|remarks?|details?).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "issue_comments"
        ],
        "negativeExamples": [
          "issue_status"
        ]
      },
      {
        "regExp": "(?i).*(desc|msg|summary|narrative|body|content).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "summary"
        ],
        "negativeExamples": [
          "id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "The component requires careful handling during installation to avoid damage.",
      "Please review the following steps and confirm whether the procedure is acceptable.",
      "This section outlines the primary objectives, constraints, and anticipated outcomes.",
      "Customer reported intermittent errors after the latest software update was deployed.",
      "Include diagrams, tables, and references where necessary to improve clarity.",
      "A brief overview of the requirements has been provided for initial discussion.",
      "Note that delivery timelines are estimates and may change without prior notice.",
      "Provide details about rationale, trade-offs, and any alternative approaches considered."
    ],
    "negativeContentExamples": [
      "Quick update pending approval",
      "Needs review ASAP",
      "Draft pending",
      "OK, proceeding",
      "N/A",
      "ITEM-12345 missing",
      "Version 2.1",
      "Pending, awaiting"
    ],
    "positiveHeaderExamples": [
      "part_text",
      "part_description",
      "part_notes",
      "part_remarks",
      "product_description",
      "issue_comments",
      "long_text",
      "free_text"
    ],
    "negativeHeaderExamples": [
      "part_number",
      "part_code",
      "part_id",
      "product_code",
      "customer_name",
      "created_date",
      "quantity",
      "status_code"
    ],
    "explanation": "This semantic type identifies free-form, natural-language fields such as descriptions, comments, notes, and narrative text. It is useful for classifying columns meant for human-readable content without strict structure, enabling downstream processing like keyword extraction, topic modeling, or sentiment analysis. The regex focuses on multi-word text (five or more words) to reduce false positives from short labels, codes, or identifiers.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:06.938642"
  },
  {
    "resultType": "generated",
    "semanticType": "road",
    "description": "Captures full English street names that include both the identifying name and the mandatory street type suffix (e.g., Street, Avenue, Road). Values are expected to use proper English capitalization and fully spelled-out type markers rather than abbreviations.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+( [A-Z][a-z]+){0,3}|[1-9][0-9]{0,3}(st|nd|rd|th)( [A-Z][a-z]+){0,2})( (Street|Avenue|Road|Boulevard|Lane|Drive|Court|Place|Terrace|Way|Circle|Plaza|Parkway|Square|Trail|Highway|Route|Crescent|Close))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9470,
    "headerPatterns": [
      {
        "regExp": "(?i).*(full|complete).*(street|avenue|road|boulevard|lane|drive|court|place|terrace|way|circle|plaza|parkway|square|trail|crescent|close).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "full_street_name"
        ],
        "negativeExamples": [
          "street_number"
        ]
      },
      {
        "regExp": "(?i).*(street|avenue|road|boulevard|lane|drive|court|place|terrace|way|circle|plaza|parkway|square|trail|crescent|close).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "road_name"
        ],
        "negativeExamples": [
          "road_type"
        ]
      },
      {
        "regExp": "(?i).*\\b(st|rd|ave|blvd|ln|dr|ct|pl|ter|wy|cir|pkwy|sq|trl)\\b.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "st_name"
        ],
        "negativeExamples": [
          "state_name"
        ]
      },
      {
        "regExp": "(?i).*(streetname|roadname|avenuename).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "streetname"
        ],
        "negativeExamples": [
          "street_type"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "description"
        ]
      }
    ],
    "positiveContentExamples": [
      "Main Street",
      "Oak Avenue",
      "Pine Ridge Road",
      "Sunset Boulevard",
      "Old Mill Lane",
      "Highland Park Way",
      "River Trail",
      "42nd Street"
    ],
    "negativeContentExamples": [
      "Main St",
      "Oak Ave",
      "Elm",
      "north road",
      "123 Road",
      "Route 66",
      "The Parkway",
      "5th"
    ],
    "positiveHeaderExamples": [
      "street_name",
      "road_name",
      "full_street_name",
      "complete_road_name",
      "avenue_name",
      "residential_street_name",
      "primary_road_name",
      "streetname"
    ],
    "negativeHeaderExamples": [
      "street_number",
      "road_type",
      "address_line",
      "city_name",
      "state_name",
      "zipcode",
      "highway_number",
      "route_code"
    ],
    "explanation": "This semantic type identifies complete English street names that include a properly capitalized identifying name followed by a fully spelled-out street type suffix. It is useful for parsing, validating, and normalizing address components where the street name and its type are captured as a single field. Abbreviated suffixes (e.g., St, Ave) and names without a suffix are intentionally excluded to maintain precision.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:07.889950"
  },
  {
    "resultType": "generated",
    "semanticType": "year",
    "description": "This type captures year ranges as they appear in temporal data, historical records, and validity specifications using start and end year notation. Values represent time spans formatted with a beginning and ending four-digit year connected by separators such as hyphen, en dash, slash, or the word \"to\".",
    "pluginType": "regex",
    "regexPattern": "\\b[12][0-9]{3}\\b\\s*((\\-|\u2013|\u2014|/)|\\bto\\b)\\s*\\b[12][0-9]{3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9150,
    "headerPatterns": [
      {
        "regExp": "(?i).*(year[_\\s-]*range).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "year_range"
        ],
        "negativeExamples": [
          "year_code"
        ]
      },
      {
        "regExp": "(?i).*(fiscal|academic|coverage|validity|service|enrollment)[_\\s-]*year[_\\s-]*range.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "fiscal_year_range"
        ],
        "negativeExamples": [
          "fiscal_year"
        ]
      },
      {
        "regExp": "(?i).*((yr|yrs)[_\\s-]*(range|span)).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "yrs_range"
        ],
        "negativeExamples": [
          "yr_code"
        ]
      },
      {
        "regExp": "(?i).*((year|years)[_\\s-]*(span|period|interval)).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "year_span"
        ],
        "negativeExamples": [
          "years_attended_text"
        ]
      },
      {
        "regExp": "(?i).*year.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "active_years"
        ],
        "negativeExamples": [
          "period_description"
        ]
      },
      {
        "regExp": "(?i).*date.*",
        "confidence": 88,
        "mandatory": true,
        "positiveExamples": [
          "policy_date"
        ],
        "negativeExamples": [
          "year_span"
        ]
      }
    ],
    "positiveContentExamples": [
      "1999-2005",
      "2010/2012",
      "2018\u20132020",
      "2001 to 2003",
      "1975 - 1980",
      "2020\u20132020",
      "1900/1901",
      "2013 \u2013 2015"
    ],
    "negativeContentExamples": [
      "2019-20",
      "99-2001",
      "2019 to20",
      "2019\u2013202A",
      "FY2019\u20132020",
      "20192020",
      "2019.2020",
      "201-2020"
    ],
    "positiveHeaderExamples": [
      "year_range",
      "validity_year_range",
      "coverage_years",
      "fiscal_year_range",
      "service_years",
      "enrollment_year_range",
      "year_span",
      "policy_date"
    ],
    "negativeHeaderExamples": [
      "birth_year",
      "period_description",
      "quarter_range",
      "date_of_birth",
      "years_attended_text",
      "year_code",
      "single_year",
      "date_range"
    ],
    "explanation": "The PERIOD.YEAR_RANGE semantic type identifies columns where values are two four-digit years joined by a clear separator (hyphen, en dash, slash, or the word \"to\"), indicating a span between a start year and an end year. It is suitable for validity windows, coverage periods, service intervals, and historical ranges expressed strictly as year-to-year pairs. The header patterns prioritize explicit mentions of year ranges and related domain qualifiers, with broader fallbacks for year and date terms to support discovery.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:10.112775"
  },
  {
    "resultType": "generated",
    "semanticType": "title",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'&.\\-]{1,40}( [A-Za-z0-9][A-Za-z0-9'&\\.,:;!\\?()\\-]{1,40}){1,20}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9080,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\b(page|article|document|doc|record|post|story)[ _-]*title\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "article_title"
        ],
        "negativeExamples": [
          "article_id"
        ]
      },
      {
        "regExp": "(?i).*\\b(content|item|resource|file)[ _-]*title\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "content_title"
        ],
        "negativeExamples": [
          "content_type"
        ]
      },
      {
        "regExp": "(?i).*\\b(headline|subject)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "headline"
        ],
        "negativeExamples": [
          "headline_score"
        ]
      },
      {
        "regExp": "(?i).*\\b(ttl|title_txt|title_str)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ttl"
        ],
        "negativeExamples": [
          "ttl_code"
        ]
      },
      {
        "regExp": "(?i).*\\btitle\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "title"
        ],
        "negativeExamples": [
          "subtitle"
        ]
      }
    ],
    "positiveContentExamples": [
      "Project Kickoff Meeting Notes",
      "Quarterly Financial Results Overview",
      "Customer Feedback Summary",
      "How to Reset Your Password",
      "Introduction to Machine Learning",
      "Terms and Conditions Update",
      "Employee Onboarding Checklist",
      "The 2025 Market Outlook"
    ],
    "negativeContentExamples": [
      "Introduction",
      "A12345",
      "2024-05-01 Report",
      "support@example.com",
      "INV-2024-00912",
      "http://example.com/page",
      "SKU_Standard_Name",
      "PageTitle"
    ],
    "positiveHeaderExamples": [
      "page_title",
      "article_title",
      "document_title",
      "record_title",
      "post_title",
      "story_title",
      "content_title",
      "headline"
    ],
    "negativeHeaderExamples": [
      "page_name",
      "article_id",
      "document_date",
      "record_number",
      "post_status",
      "story_author",
      "content_type",
      "headline_score"
    ],
    "explanation": "This semantic type targets free-text fields that typically store natural language titles, headings, or brief textual summaries. It prefers values containing multiple words with alphabetic characters and common punctuation while avoiding identifiers, codes, and single-token strings. It is especially useful for classifying columns like page_title, article_title, or headline where the content is unstructured but human-readable.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:11.750205"
  },
  {
    "resultType": "generated",
    "semanticType": "code",
    "description": "A generic alphanumeric record identifier composed of letters and digits, optionally segmented by hyphen, underscore, or dot. It is intended to represent unique per-record or per-entity codes that are not constrained to a specific industry format or checkdigit scheme.",
    "pluginType": "regex",
    "regexPattern": "\\b(?=[A-Za-z0-9._-]*[A-Za-z])(?=[A-Za-z0-9._-]*[0-9])[A-Za-z0-9]{3,8}([-_.][A-Za-z0-9]{1,12}){0,3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9230,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unique|primary|external).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unique_code"
        ],
        "negativeExamples": [
          "unique_id"
        ]
      },
      {
        "regExp": "(?i).*(record|entity|object|item|customer|product).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_code"
        ],
        "negativeExamples": [
          "record_number"
        ]
      },
      {
        "regExp": "(?i).*(ref|reference|key|idx).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "reference_code"
        ],
        "negativeExamples": [
          "reference_id"
        ]
      },
      {
        "regExp": "(?i).*(cust|acct|prod).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cust_code"
        ],
        "negativeExamples": [
          "cust_id"
        ]
      },
      {
        "regExp": "(?i).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "code"
        ],
        "negativeExamples": [
          "identifier"
        ]
      }
    ],
    "positiveContentExamples": [
      "INV-2023-0007",
      "A7B9C3",
      "PRD_01-AX9",
      "X9Z.7A2",
      "ITEM-000123X",
      "REF_A12B-9",
      "OBJ07-XY3",
      "C12-AB-9Z"
    ],
    "negativeContentExamples": [
      "ABCDEF",
      "123456",
      "PRD--123",
      "A1",
      "A_B",
      "2023/07",
      "CODE:123",
      "A1B2C3D4E5F6G7H8I9"
    ],
    "positiveHeaderExamples": [
      "record_code",
      "entity_code",
      "customer_code",
      "unique_code",
      "product_code",
      "reference_code",
      "external_code",
      "object_code"
    ],
    "negativeHeaderExamples": [
      "record_id",
      "product_number",
      "country_code",
      "postal_code",
      "status_code",
      "error_code",
      "area_code",
      "version_code"
    ],
    "explanation": "This type targets generic, per-record alphanumeric codes that include at least one letter and one digit, optionally segmented by hyphen, underscore, or dot. It intentionally avoids overly broad matches by disallowing pure letters or pure digits, limiting token lengths, and restricting separators.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:13.975369"
  },
  {
    "resultType": "generated",
    "semanticType": "county",
    "description": "Identifies US county-level administrative unit names as plain text, typically including the designation terms County, Parish, Borough, Census Area, or the phrases City and County or City and Borough. Intended for columns containing full county-equivalent names in English, not abbreviations or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b(City and County of [A-Z][A-Za-z-]*( [A-Z][A-Za-z-]*){0,2}|City and Borough of [A-Z][A-Za-z-]*( [A-Z][A-Za-z-]*){0,2}|[A-Z][A-Za-z-]*( [A-Z][A-Za-z-]*){0,3} (County|Parish|Borough)|[A-Z][A-Za-z-]*( [A-Z][A-Za-z-]*){0,3} Census Area)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9160,
    "headerPatterns": [
      {
        "regExp": "(?i).*(united states|us).*(county|parish|borough|census area).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US county name"
        ],
        "negativeExamples": [
          "County name"
        ]
      },
      {
        "regExp": "(?i).*(city and county|city and borough).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "City and County name"
        ],
        "negativeExamples": [
          "County code"
        ]
      },
      {
        "regExp": "(?i).*(county|parish|borough|census area).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "County name"
        ],
        "negativeExamples": [
          "County code"
        ]
      },
      {
        "regExp": "(?i).*(cnty|co).*(name|nm).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cnty_nm"
        ],
        "negativeExamples": [
          "co_code"
        ]
      },
      {
        "regExp": "(?i).*county.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "county"
        ],
        "negativeExamples": [
          "country"
        ]
      }
    ],
    "positiveContentExamples": [
      "Los Angeles County",
      "Miami-Dade County",
      "St Louis County",
      "New Hanover County",
      "Orleans Parish",
      "North Slope Borough",
      "Nome Census Area",
      "City and County of San Francisco"
    ],
    "negativeContentExamples": [
      "Los Angeles",
      "Orange Co.",
      "Cook county",
      "City of Fairfax",
      "Anchorage Municipality",
      "St. Louis County",
      "Baltimore City",
      "Aleutians East Census area"
    ],
    "positiveHeaderExamples": [
      "US county name",
      "City and County name",
      "County name",
      "Parish name",
      "Borough name",
      "Census Area name",
      "cnty_nm",
      "co_name"
    ],
    "negativeHeaderExamples": [
      "County code",
      "County ID",
      "Country name",
      "County seat name",
      "co_code",
      "region",
      "province",
      "fips_county"
    ],
    "explanation": "This semantic type targets US county-equivalent names that include explicit jurisdiction designators such as County, Parish, Borough, Census Area, or the phrases City and County and City and Borough. It is useful for normalizing and validating columns that store the full textual county name rather than numeric identifiers or abbreviations. The pattern is intentionally constrained to avoid false positives from city names, country names, or code fields.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:16.594535"
  },
  {
    "resultType": "generated",
    "semanticType": "population",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'()-]{2,}\\s+[A-Za-z0-9][A-Za-z0-9'()-]{2,}(\\s+[A-Za-z0-9][A-Za-z0-9,'\";:()&/+\\-\\.!?]{1,}){1,20}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9270,
    "headerPatterns": [
      {
        "regExp": "(?i).*customer.*feedback.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback_text"
        ],
        "negativeExamples": [
          "customer_feedback_score"
        ]
      },
      {
        "regExp": "(?i).*issue.*description.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "issue_status"
        ]
      },
      {
        "regExp": "(?i).*review.*comments.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "review_comments"
        ],
        "negativeExamples": [
          "review_count"
        ]
      },
      {
        "regExp": "(?i).*(desc|notes|remarks).*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "additional_remarks"
        ],
        "negativeExamples": [
          "note_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "description"
        ]
      }
    ],
    "positiveContentExamples": [
      "The product arrived earlier than expected and was packaged carefully.",
      "Please call me back when the order ships; I need to update the address.",
      "Excellent quality for the price. Will definitely purchase again!",
      "Customer reported intermittent connectivity issues during peak hours.",
      "Completed the installation without errors, but the UI felt sluggish.",
      "This is a placeholder paragraph used to test free-form text handling.",
      "We noticed a significant improvement after the last firmware update.",
      "Thank you for your prompt response to my previous inquiry."
    ],
    "negativeContentExamples": [
      "Pending",
      "John Smith",
      "12345",
      "AB-123-XY",
      "john.doe@example.com",
      "http://example.com/page",
      "Order #12345",
      "Shipped 10/02/2024"
    ],
    "positiveHeaderExamples": [
      "customer_feedback_text",
      "user_comments",
      "issue_description",
      "review_notes",
      "free_text",
      "additional_remarks",
      "narrative",
      "problem_details"
    ],
    "negativeHeaderExamples": [
      "product_name",
      "email_address",
      "order_id",
      "sku",
      "country_code",
      "zip_code",
      "age",
      "price"
    ],
    "explanation": "This semantic type identifies free-form, human-readable text fields such as comments, descriptions, reviews, notes, and narratives. The regex focuses on natural language by requiring at least three space-separated tokens beginning with letters or digits and allowing common punctuation within words, which helps distinguish it from single tokens, codes, identifiers, and structured values like emails or URLs. Because it is broad by nature, a high confidence threshold and lower priority relative to specific types reduce conflicts in classification.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:16.868478"
  },
  {
    "resultType": "generated",
    "semanticType": "country",
    "description": "This represents the complete country name using proper English terminology and capitalization conventions. The name may include multiple words and follows standard English linguistic patterns but excludes abbreviations, codes, or non-English translations.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]{2,}(-[A-Z][a-z]{2,})*)((\\s+(of|and|the|&))?\\s+[A-Z][a-z]{2,}(-[A-Z][a-z]{2,})*){0,6}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9130,
    "headerPatterns": [
      {
        "regExp": "(?i).*(country[\\s_-]*name|name[\\s_-]*of[\\s_-]*country).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "country_name"
        ],
        "negativeExamples": [
          "country_code"
        ]
      },
      {
        "regExp": "(?i).*(billing|shipping|mailing|residence|issuing)[\\s_-]*country.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "billing_country"
        ],
        "negativeExamples": [
          "billing_city"
        ]
      },
      {
        "regExp": "(?i).*(address|company|customer)[\\s_-]*country[\\s_-]*(name|label).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "address_country_name"
        ],
        "negativeExamples": [
          "address_country_code"
        ]
      },
      {
        "regExp": "(?i).*(ctry|cntry)[\\s_-]*(name|nm).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ctry_nm"
        ],
        "negativeExamples": [
          "ctry_cd"
        ]
      },
      {
        "regExp": "(?i).*country.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "country"
        ],
        "negativeExamples": [
          "region"
        ]
      }
    ],
    "positiveContentExamples": [
      "United States",
      "United States of America",
      "United Kingdom",
      "South Africa",
      "New Zealand",
      "Democratic Republic of the Congo",
      "Saint Kitts and Nevis",
      "Timor-Leste"
    ],
    "negativeContentExamples": [
      "USA",
      "U.S.A.",
      "united states",
      "United states",
      "United States of",
      "United States (DE)",
      "Cote d Ivoire",
      "Korea, Republic of"
    ],
    "positiveHeaderExamples": [
      "country_name",
      "billing_country",
      "residence_country",
      "issuing_country",
      "address_country_name",
      "home_country",
      "country"
    ],
    "negativeHeaderExamples": [
      "country_code",
      "nationality",
      "county_name",
      "billing_city",
      "shipping_region",
      "country_id",
      "country_abbr",
      "region"
    ],
    "explanation": "This type captures full English country names written in proper title case, allowing multi-word names and standard connectors like of, and, and the. It excludes abbreviations, codes, mixed notations, or non-English renderings. Typical use cases include normalizing address data, validating place-of-issue or residence fields, and ensuring consistent country naming in customer, vendor, and logistics datasets.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:17.236297"
  },
  {
    "resultType": "generated",
    "semanticType": "value",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9][A-Za-z0-9'\u2019\\-.,!?:/()%]*(\\s+[A-Za-z0-9][A-Za-z0-9'\u2019\\-.,!?:/()%]*)+\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9430,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order).*(comment|comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "order_status"
        ]
      },
      {
        "regExp": "(?i).*(issue|ticket).*(description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "ticket_id"
        ]
      },
      {
        "regExp": "(?i).*(free|unstructured|long).*(text|value).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(message|remark|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "message_body"
        ],
        "negativeExamples": [
          "body_length"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver before noon.",
      "The item was damaged on arrival.",
      "Customer requested a refund.",
      "Thank you for your purchase!",
      "High priority order - ship ASAP.",
      "Schedule the meeting for 10/12.",
      "Processing delayed due to weather conditions.",
      "This account will be closed next quarter."
    ],
    "negativeContentExamples": [
      "Approved",
      "OK-200",
      "2025-08-11",
      "john.doe@example.com",
      "http://example.com",
      "N/A",
      "123456",
      "A12B9C"
    ],
    "positiveHeaderExamples": [
      "customer_comments",
      "order_notes",
      "issue_description",
      "free_text",
      "message_body",
      "remarks",
      "narrative",
      "product_description"
    ],
    "negativeHeaderExamples": [
      "order_status",
      "ticket_id",
      "product_id",
      "created_date",
      "country_code",
      "amount_number",
      "checksum",
      "email_address"
    ],
    "explanation": "This semantic type identifies unstructured, natural language fields intended for human-readable content such as comments, notes, and descriptions. It prefers values containing at least two words and tolerates common punctuation, reducing overlap with single-token identifiers, codes, and structured fields. The high threshold and priority reflect its broad nature and help minimize conflicts with more specific types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:20.292733"
  },
  {
    "resultType": "generated",
    "semanticType": "family",
    "description": "This type captures family names or surnames as they appear in personal identification and formal documentation across different cultures. The values represent last names using standard spelling and formatting conventions without including given names, middle names, or honorific titles.",
    "pluginType": "regex",
    "regexPattern": "\\b\\p{L}{2,}([-']\\p{L}{2,})*( (\\p{L}{2,}([-']\\p{L}{2,})*)){0,2}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9170,
    "headerPatterns": [
      {
        "regExp": "(?i).*(family[ _]?name).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "family_name"
        ],
        "negativeExamples": [
          "company_name"
        ]
      },
      {
        "regExp": "(?i).*surname.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "surname"
        ],
        "negativeExamples": [
          "username"
        ]
      },
      {
        "regExp": "(?i).*(last[ _]?name|l[ _]?name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "last_name"
        ],
        "negativeExamples": [
          "first_name"
        ]
      },
      {
        "regExp": "(?i).*last.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "last"
        ],
        "negativeExamples": [
          "latest_date"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "O'Neill",
      "Garc\u00eda",
      "van der Meer",
      "De la Cruz",
      "Smith-Jones",
      "M\u00fcller",
      "Chen",
      "Saint-Pierre"
    ],
    "negativeContentExamples": [
      "Smith, John",
      "O''Neill",
      "O\u2019Connor",
      "-Smith",
      "N/A",
      "12345",
      "de  la Cruz",
      "Ng\u00f4 (Family)"
    ],
    "positiveHeaderExamples": [
      "family_name",
      "Family Name",
      "surname",
      "last_name",
      "l_name",
      "last",
      "familyName",
      "name"
    ],
    "negativeHeaderExamples": [
      "first_name",
      "given_name",
      "middle_name",
      "full_name",
      "company_name",
      "username",
      "latest_date",
      "title"
    ],
    "explanation": "This semantic type identifies family names (surnames) typically stored in personal records, CRM systems, and identity documents. It supports single-word surnames as well as multi-token surnames with spaces, hyphens, and ASCII apostrophes, and accommodates Unicode letters to cover international names. Use it when a column specifically contains the last name component of a person\u2019s full name.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:22.094420"
  },
  {
    "resultType": "generated",
    "semanticType": "weight",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}( [A-Za-z]{2,}[,.;!?']?)+",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9120,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user).*(comment|feedback|review).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(issue|problem|ticket).*(description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "issue_code"
        ]
      },
      {
        "regExp": "(?i).*(internal|private|agent).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "internal_notes"
        ],
        "negativeExamples": [
          "internal_id"
        ]
      },
      {
        "regExp": "(?i).*(remark|notes|comments|feedback).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "additional_remarks"
        ],
        "negativeExamples": [
          "review_score"
        ]
      },
      {
        "regExp": "(?i).*\\btext\\b.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "review_text"
        ],
        "negativeExamples": [
          "file_name"
        ]
      }
    ],
    "positiveContentExamples": [
      "The package was damaged upon arrival.",
      "Please contact support if the issue persists",
      "Customer reported unexpected delays in shipment",
      "Well above expectations for this quarter",
      "Needs follow up from the billing team",
      "I agree with the proposed changes",
      "Payment received and order fulfilled",
      "Not satisfied with the quality delivered."
    ],
    "negativeContentExamples": [
      "Damaged",
      "OK",
      "A B",
      "AB-12345",
      "2024-07-15",
      "john.doe@example.com",
      "SKU 12345",
      "Apt 4B"
    ],
    "positiveHeaderExamples": [
      "customer_comments",
      "issue_description",
      "internal_notes",
      "review_text",
      "additional_remarks",
      "feedback",
      "long_text",
      "message_body"
    ],
    "negativeHeaderExamples": [
      "customer_id",
      "issue_code",
      "internal_id",
      "review_score",
      "country_name",
      "file_path",
      "message_id",
      "weight"
    ],
    "explanation": "This semantic type identifies free-form natural language fields, such as comments, descriptions, notes, feedback, and other narrative text. It is designed to capture multi-word human-readable content and exclude structured identifiers, codes, dates, or single-token values. The regex emphasizes the presence of at least two alphabetic words, optionally followed by simple punctuation, to reduce false positives from codes or single-word labels. Use this type to detect narrative columns like comments or descriptions across diverse datasets.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:27.418246"
  },
  {
    "resultType": "generated",
    "semanticType": "city",
    "description": "This represents the official name of a populated place with municipal status, typically containing multiple words and proper capitalization. The name may include directional indicators, geographic descriptors, or historical references but excludes abbreviations or postal codes.",
    "pluginType": "regex",
    "regexPattern": "\\b(North|South|East|West|Northeast|Northwest|Southeast|Southwest)?\\s?([A-Z][a-z]*(['-][A-Z][a-z]+)?)(\\s((of|and|de|del|la|le|the|da|do|di|van|von|y|al|el|los|las)|([A-Z][a-z]*(['-][A-Z][a-z]+)?))){0,4}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9190,
    "headerPatterns": [
      {
        "regExp": "(?i).*(official|full).*(city|municipality).*(name).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "official_city_name"
        ],
        "negativeExamples": [
          "city_code"
        ]
      },
      {
        "regExp": "(?i).*(city).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "city_name"
        ],
        "negativeExamples": [
          "city_id"
        ]
      },
      {
        "regExp": "(?i).*(municipality).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "municipality"
        ],
        "negativeExamples": [
          "city_code"
        ]
      },
      {
        "regExp": "(?i).*\\bmuni\\b.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "muni_name"
        ],
        "negativeExamples": [
          "community_name"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "description"
        ]
      }
    ],
    "positiveContentExamples": [
      "New York",
      "Los Angeles",
      "San Francisco",
      "Rio de Janeiro",
      "Saint Petersburg",
      "O'Fallon",
      "North Las Vegas",
      "Ho Chi Minh City"
    ],
    "negativeContentExamples": [
      "PARIS",
      "nyc",
      "St. Louis",
      "Los Angeles, CA",
      "New York 10001",
      "E. London",
      "Seattle-WA",
      "north las vegas"
    ],
    "positiveHeaderExamples": [
      "official_city_name",
      "city_name",
      "municipality_name",
      "full_city_name",
      "preferred_city_name",
      "municipality",
      "city",
      "city_full_name"
    ],
    "negativeHeaderExamples": [
      "city_code",
      "city_id",
      "state_name",
      "country",
      "place_type",
      "postal_code",
      "city_abbrev",
      "latitude"
    ],
    "explanation": "This semantic type identifies properly capitalized city or municipality names, allowing multi-word constructs, internal hyphens or apostrophes, and spelled-out directional terms. It excludes abbreviations, codes, and entries containing digits or trailing jurisdictional add-ons such as postal codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:32.975173"
  },
  {
    "resultType": "generated",
    "semanticType": "rating",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[a-zA-Z]{2,}[a-zA-Z'\u2019\\-]*\\s+[a-zA-Z]{2,}[a-zA-Z'\u2019\\-]*(\\s+[a-zA-Z0-9,;:'\u2019\"()\\-\\.\\!?]{1,}){0,50}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9480,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|product).*rating.*(comment|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_rating_comment"
        ],
        "negativeExamples": [
          "customer_rating"
        ]
      },
      {
        "regExp": "(?i).*(rating|review).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "rating_text"
        ],
        "negativeExamples": [
          "rating_score"
        ]
      },
      {
        "regExp": "(?i).*(rating|review|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "feedback"
        ],
        "negativeExamples": [
          "price"
        ]
      },
      {
        "regExp": "(?i).*(rev|fb|cmt|desc|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cmt"
        ],
        "negativeExamples": [
          "id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "notes"
        ]
      }
    ],
    "positiveContentExamples": [
      "Really enjoyed the experience overall.",
      "Service was prompt and friendly.",
      "Works as expected, would recommend.",
      "Not what I hoped for, but acceptable.",
      "The quality exceeded my expectations!",
      "Could be better in terms of durability.",
      "Absolutely fantastic performance in daily use.",
      "Decent value for the price."
    ],
    "negativeContentExamples": [
      "5 stars",
      "OK",
      "A+",
      "Excellent!",
      "n/a",
      "4/5",
      "Great!!!",
      "Solid 4/5"
    ],
    "positiveHeaderExamples": [
      "customer_rating_comment",
      "user_rating_text",
      "review_text",
      "rating_text",
      "feedback_text",
      "product_rating_comment",
      "service_review_text"
    ],
    "negativeHeaderExamples": [
      "score",
      "stars",
      "status",
      "price",
      "quantity",
      "order_id",
      "created_date",
      "customer_name"
    ],
    "explanation": "This semantic type identifies free-form, human-written content typically used for rating comments, qualitative feedback, or narrative reviews. It prefers multi-word natural language phrases and sentences while excluding purely numeric or coded values to reduce ambiguity with score-only fields.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:36.718624"
  },
  {
    "resultType": "generated",
    "semanticType": "source",
    "description": "This type captures web addresses and resource locators used to identify and access content across networks including websites, files, and services. The values represent complete URL strings including protocol schemes, domain names, paths, and optional parameters following standardized URI formatting conventions.",
    "pluginType": "regex",
    "regexPattern": "\\b(http|https|ftp|ftps|sftp|file|ws|wss)://(\\[[0-9A-Fa-f:]+\\]|[A-Za-z0-9.-]+)(:[0-9]{2,5})?(/[A-Za-z0-9._~!$&'()*+,;=:@%/-]*)?(\\?[A-Za-z0-9._~!$&'()*+,;=:@%/?-]*)?(#[A-Za-z0-9._~!$&'()*+,;=:@%/?-]*)?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9180,
    "headerPatterns": [
      {
        "regExp": "(?i).*content.*source.*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "content_source_url"
        ],
        "negativeExamples": [
          "content_source_id"
        ]
      },
      {
        "regExp": "(?i).*source.*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "source_url"
        ],
        "negativeExamples": [
          "source_id"
        ]
      },
      {
        "regExp": "(?i).*origin.*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "origin_url"
        ],
        "negativeExamples": [
          "original_source"
        ]
      },
      {
        "regExp": "(?i).*resource.*locator.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "resource_locator"
        ],
        "negativeExamples": [
          "resource_id"
        ]
      },
      {
        "regExp": "(?i).*src.*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "src_url"
        ],
        "negativeExamples": [
          "src_id"
        ]
      },
      {
        "regExp": "(?i).*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "url"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "https://example.com",
      "http://sub.example.co.uk/path/to/page?query=ok#frag",
      "ftp://ftp.example.org/resource.tar.gz",
      "https://192.168.1.10:8080/api/v1/items?limit=10",
      "file://server/share/folder/document.txt",
      "wss://socket.example.com/stream",
      "sftp://example.com:22/home/user/file.csv",
      "ws://localhost:3000/socket?token=abc123"
    ],
    "negativeContentExamples": [
      "example.com/path",
      "https//missing-colon.com",
      "http:///too-many-slashes.com",
      "mailto:user@example.com",
      "https:/one-slash.com",
      "ws://:8080/path",
      "file:/C:/path/file.txt",
      "https://[2001:db8::1"
    ],
    "positiveHeaderExamples": [
      "content_source_url",
      "source_url",
      "origin_url",
      "resource_locator",
      "src_url",
      "canonical_source_url",
      "page_url",
      "target_uri"
    ],
    "negativeHeaderExamples": [
      "source_id",
      "source_name",
      "original_source",
      "resource_id",
      "src_count",
      "download_path",
      "host_name",
      "referrer_domain"
    ],
    "explanation": "URI.source identifies cells containing complete URLs for web, file, and service resources. It requires a scheme followed by authority (host or IP with optional port) and supports optional path, query, and fragment components. Use this type to detect and validate columns that store canonical links, origin URLs, resource locators, or service endpoints.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:38.271446"
  },
  {
    "resultType": "generated",
    "semanticType": "category",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'\u2019\\-]{2,}[.,;:!?\\\"]*\\s+[A-Za-z][A-Za-z'\u2019\\-]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 99,
    "priority": 9070,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|product|item).*\\b(comment|comments|feedback|review|description)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*\\b(long|full|detailed)\\b.*\\b(description|text|notes)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "long_code"
        ]
      },
      {
        "regExp": "(?i).*\\b(description|details|summary)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "details"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*\\b(desc|remarks|comment|comments|notes)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "notes"
        ],
        "negativeExamples": [
          "descriptor"
        ]
      },
      {
        "regExp": "(?i).*\\btext\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "context_id"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver to the back entrance before noon.",
      "Customer reported intermittent connectivity issues.",
      "This item shows minor signs of wear and tear.",
      "Payment received and order marked as complete.",
      "The quick brown fox jumps over the lazy dog.",
      "Schedule a follow-up call next Tuesday morning.",
      "High priority due to repeated failures.",
      "Includes accessories as pictured in the listing."
    ],
    "negativeContentExamples": [
      "Approved",
      "Blue",
      "N/A",
      "C123-9",
      "2024-08-31",
      "john.doe@example.com",
      "A+",
      "OK"
    ],
    "positiveHeaderExamples": [
      "description",
      "long_description",
      "notes",
      "customer_comments",
      "summary_text",
      "remarks",
      "details",
      "review_text"
    ],
    "negativeHeaderExamples": [
      "category",
      "status_code",
      "customer_id",
      "order_date",
      "amount",
      "postal_code",
      "ip_address",
      "country"
    ],
    "explanation": "This semantic type is intended for unstructured or semi-structured natural language content such as comments, descriptions, notes, and summaries. It is useful when identifying fields that hold human-readable prose rather than structured identifiers, codes, or numeric values. The regex favors multi-word phrases to reduce false positives from single-word labels or codes, and header patterns cover common naming conventions from specific composites to the primitive 'text'.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:38.938758"
  },
  {
    "resultType": "generated",
    "semanticType": "comment",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b\\p{L}{2,}([ \\t,;:!?'\"]()\\[\\]\\-]+\\p{L}{2,}){1,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9200,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|client)[ _-]*(comment|comments|remarks|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comment"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*(feedback|remarks|notes|description|narrative).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "review_score"
        ]
      },
      {
        "regExp": "(?i).*(issue|ticket|case)[ _-]*(comment|comments|notes|text).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "case_notes"
        ],
        "negativeExamples": [
          "issue_id"
        ]
      },
      {
        "regExp": "(?i).*(cmt|cmts|txt|text).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "review_text"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*comment.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comment"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Looking forward to the next release.",
      "Please review and let me know your thoughts.",
      "The packaging was damaged, but the item works.",
      "Great service, I would order again.",
      "\"Excellent support!\" Thanks for the quick fix.",
      "Not what I expected: colors differ from photos.",
      "Needs more documentation (especially for beginners).",
      "I tried three times; still seeing the same error."
    ],
    "negativeContentExamples": [
      "OK",
      "Yes",
      "N/A",
      "12345",
      "error404",
      "A b",
      "#broken",
      "done/closed"
    ],
    "positiveHeaderExamples": [
      "customer_comment",
      "user_feedback",
      "review_text",
      "notes",
      "remarks",
      "issue_description",
      "internal_comments",
      "freeform_text",
      "case_notes",
      "comment"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "review_score",
      "comment_flag",
      "description_length",
      "text_format",
      "notes_count",
      "feedback_id",
      "comment_date",
      "issue_id",
      "status_code",
      "code"
    ],
    "explanation": "The comment semantic type is intended to identify fields that hold free-form, human-authored text such as remarks, feedback, notes, and descriptions. The value pattern favors natural language by requiring at least two alphabetical words separated by spaces or common punctuation, reducing false positives from single-word labels, IDs, or purely numeric values. This type is broad by design, so it uses a higher confidence threshold and lower priority to minimize conflicts with more specific semantic types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:42.139169"
  },
  {
    "resultType": "generated",
    "semanticType": "location",
    "description": "This coordinate pair consists of two decimal numbers separated by a comma and optional space, representing latitude first followed by longitude. The format follows standard GPS conventions with positive values for north/east and negative values for south/west hemispheres.",
    "pluginType": "regex",
    "regexPattern": "-?\\d{1,2}\\.\\d+,\\s*-?\\d{1,3}\\.\\d+\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 9110,
    "headerPatterns": [
      {
        "regExp": "(?i).*(latitude|lat)[ _-]*(longitude|lon).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "latitude_longitude"
        ],
        "negativeExamples": [
          "latitude"
        ]
      },
      {
        "regExp": "(?i).*(geo|gps)[ _-]*(coordinates|coord|location).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "geo_coordinates"
        ],
        "negativeExamples": [
          "geocoder_status"
        ]
      },
      {
        "regExp": "(?i).*(lat[_-]?lon(gitude)?|latlong).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "latlong"
        ],
        "negativeExamples": [
          "lonlat"
        ]
      },
      {
        "regExp": "(?i).*(coordinate[_-]?pair|coordinates[_-]?pair).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "coordinate_pair"
        ],
        "negativeExamples": [
          "coordinate_count"
        ]
      },
      {
        "regExp": "(?i).*coordinates.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "coordinates"
        ],
        "negativeExamples": [
          "location"
        ]
      }
    ],
    "positiveContentExamples": [
      "37.7749, -122.4194",
      "-33.8688, 151.2093",
      "51.5074, -0.1278",
      "40.7128, -74.0060",
      "-23.5505, -46.6333",
      "34.0522, -118.2437",
      "48.8566, 2.3522",
      "35.6895, 139.6917"
    ],
    "negativeContentExamples": [
      "37.7749 -122.4194",
      "37.7749;-122.4194",
      "+37.7749, -122.4194",
      "37, -122",
      "37.7749, -122",
      "37, -122.4194",
      "37.7749 - 122.4194",
      "37.7749,-122,4194"
    ],
    "positiveHeaderExamples": [
      "latitude_longitude",
      "lat_lon",
      "gps_coordinates",
      "geo_coordinates",
      "coordinates",
      "coordinate_pair",
      "latlong",
      "location_coordinates"
    ],
    "negativeHeaderExamples": [
      "latitude",
      "longitude",
      "location_id",
      "city",
      "address",
      "postal_code",
      "coord_index",
      "time_zone"
    ],
    "explanation": "This type detects a GPS-style coordinate pair formatted as latitude and longitude in decimal degrees, separated by a comma with optional space. It expects both values to be decimals and supports negative signs for south/west. Use it to classify columns storing precise geospatial points in decimal-degree form.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:43.677972"
  },
  {
    "resultType": "generated",
    "semanticType": "author",
    "description": "Represents a full personal name in first-name followed by last-name order, with a single space between the two tokens. Each token is a single word and may include an internal hyphen or apostrophe, but must not include titles, middle names/initials, suffixes, or additional components.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]+([-'][A-Z][a-z]+)? [A-Z][a-z]+([-'][A-Z][a-z]+)?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9520,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\bauthor\\b.*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "author_name"
        ],
        "negativeExamples": [
          "author_id"
        ]
      },
      {
        "regExp": "(?i).*\\b(primary|lead)\\b.*\\bauthor\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "primary_author"
        ],
        "negativeExamples": [
          "lead_editor"
        ]
      },
      {
        "regExp": "(?i).*\\bwriter\\b.*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "writer_name"
        ],
        "negativeExamples": [
          "author_name"
        ]
      },
      {
        "regExp": "(?i).*\\bbyline\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "byline"
        ],
        "negativeExamples": [
          "author_email"
        ]
      },
      {
        "regExp": "(?i).*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Maria Garcia",
      "Anne-Marie Clark",
      "Sean O'Neill",
      "Jean-Luc Martin",
      "Mark Smith-Jones",
      "Chloe O'Brien",
      "Luca Rossi"
    ],
    "negativeContentExamples": [
      "John A Smith",
      "Dr John Smith",
      "John Smith Jr",
      "John  Smith",
      "J Smith",
      "John-Smith",
      "Anne Marie Clark",
      "Smith, John"
    ],
    "positiveHeaderExamples": [
      "author_name",
      "primary_author",
      "lead_author",
      "writer_name",
      "byline",
      "main_author",
      "book_author",
      "author"
    ],
    "negativeHeaderExamples": [
      "author_id",
      "author_email",
      "editor_name",
      "co_author",
      "publisher_name",
      "author_count",
      "last_name",
      "contributor_name"
    ],
    "explanation": "This semantic type targets columns containing a single personal name formatted strictly as two tokens: first name followed by last name, separated by one space. Each token can include an internal hyphen or apostrophe but must not contain titles, middle names or initials, suffixes, or multiple surnames. Typical use cases include datasets listing book or article authors where only a simple first-last form is stored.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:43.687726"
  },
  {
    "resultType": "generated",
    "semanticType": "day",
    "description": "This type captures the numeric day component of calendar dates as they appear in date fields and temporal data. The values represent calendar day numbers using integer notation from 1 to 31 based on the specific month length without leading zeros or additional formatting.",
    "pluginType": "regex",
    "regexPattern": "\\b(3[01]|[12][0-9]|[1-9])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9620,
    "headerPatterns": [
      {
        "regExp": "(?i).*day[ _-]?of[ _-]?month.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "day_of_month"
        ],
        "negativeExamples": [
          "month_of_day"
        ]
      },
      {
        "regExp": "(?i).*(invoice|order|transaction|event|billing)[ _-]?day.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "invoice_day"
        ],
        "negativeExamples": [
          "invoice_date"
        ]
      },
      {
        "regExp": "(?i).*(dom|day[_-]?no|day[_-]?num).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_dom"
        ],
        "negativeExamples": [
          "dow"
        ]
      },
      {
        "regExp": "(?i).*calendar[ _-]?day.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "calendar_day"
        ],
        "negativeExamples": [
          "calendar_date"
        ]
      },
      {
        "regExp": "(?i).*day.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "day"
        ],
        "negativeExamples": [
          "weekday"
        ]
      }
    ],
    "positiveContentExamples": [
      "1",
      "7",
      "9",
      "12",
      "15",
      "23",
      "30",
      "31"
    ],
    "negativeContentExamples": [
      "0",
      "32",
      "09",
      "3.0",
      "7th",
      "1/2",
      "-1",
      "31st"
    ],
    "positiveHeaderExamples": [
      "day_of_month",
      "invoice_day",
      "order_dom",
      "transaction_day_num",
      "billing_dayno",
      "calendar_day",
      "ship_day",
      "event_day"
    ],
    "negativeHeaderExamples": [
      "weekday",
      "invoice_date",
      "month_day_name",
      "day_count",
      "dob_day",
      "days_since",
      "day_of_week",
      "due_date"
    ],
    "explanation": "Identifies the numeric day of month component in date-related fields, constrained to integers 1\u201331 with no leading zeros or suffixes. Useful for columns storing the day segment extracted from full dates (e.g., 2024-05-17 -> 17) or standalone day-of-month values. The regex uses word boundaries to avoid partial matches and excludes formatted variants like 09, 7th, or 3.0.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:45.029326"
  },
  {
    "resultType": "generated",
    "semanticType": "region",
    "description": "This type captures the complete names of US states and territories as they are used in official documentation and government administration. The values represent full state names using proper English spelling and standard formatting as established by the US constitutional and administrative systems.",
    "pluginType": "regex",
    "regexPattern": "(?i)(?<!\\S)(Alabama|Alaska|American Samoa|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|District of Columbia|Florida|Georgia|Guam|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Northern Mariana Islands|Ohio|Oklahoma|Oregon|Pennsylvania|Puerto Rico|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming|U\\.S\\. Virgin Islands|US Virgin Islands)(?!\\S)",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9400,
    "headerPatterns": [
      {
        "regExp": "(?i).*(us|united states).*(state|territory).*(full|complete).*(name).*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "us_state_full_name"
        ],
        "negativeExamples": [
          "state_code"
        ]
      },
      {
        "regExp": "(?i).*(state|territory).*(full|complete).*(name).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "state_or_territory_full_name"
        ],
        "negativeExamples": [
          "region_name"
        ]
      },
      {
        "regExp": "(?i).*(state|territory).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "state_name"
        ],
        "negativeExamples": [
          "state_code"
        ]
      },
      {
        "regExp": "(?i).*(region|jurisdiction).*(name).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "jurisdiction_name"
        ],
        "negativeExamples": [
          "region_code"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "California",
      "New York",
      "American Samoa",
      "District of Columbia",
      "Northern Mariana Islands",
      "U.S. Virgin Islands",
      "Puerto Rico",
      "Rhode Island"
    ],
    "negativeContentExamples": [
      "CA",
      "New York City",
      "Washington, D.C.",
      "N. Carolina",
      "Puerto-Rico",
      "Virgin Islands",
      "United States",
      "RhodeIsland"
    ],
    "positiveHeaderExamples": [
      "us_state_full_name",
      "state_territory_name",
      "full_state_name",
      "jurisdiction_name",
      "region_name",
      "state_name",
      "united_states_region_name",
      "state_or_territory_full_name"
    ],
    "negativeHeaderExamples": [
      "state_code",
      "us_state_abbr",
      "country_name",
      "province_name",
      "city_name",
      "region_code",
      "county_name",
      "postal_code"
    ],
    "explanation": "This semantic type identifies full, official names of US states, the District of Columbia, and US territories. It is useful for normalizing jurisdiction fields, validating address components, and disambiguating against abbreviations or codes. The regex is designed to match only exact full names (optionally surrounded by whitespace) and avoids matching partial phrases or abbreviations.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:46.328376"
  },
  {
    "resultType": "generated",
    "semanticType": "domain",
    "description": "This type captures web addresses and resource locators used to identify and access content across networks including websites, files, and services. The values represent complete URL strings including protocol schemes, domain names, paths, and optional parameters following standardized URI formatting conventions.",
    "pluginType": "regex",
    "regexPattern": "\\b((http|https|ftp|ftps|sftp)://([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9]?)(\\.([A-Za-z0-9][A-Za-z0-9-]{0,61}[A-Za-z0-9]?))+(:[0-9]{2,5})?(/[A-Za-z0-9._~:/?#\\[\\]@!$&'()*+,;=%-]{1,2048})?)\\b|\\b(file)://(/[A-Za-z0-9._~:/?#\\[\\]@!$&'()*+,;=%-]{1,2048})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9340,
    "headerPatterns": [
      {
        "regExp": "(?i).*(website|web|page|landing|resource|download|target).*(url|uri|link).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "website_url"
        ],
        "negativeExamples": [
          "website"
        ]
      },
      {
        "regExp": "(?i).*(api|endpoint|callback|redirect).*(url|uri|link).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "api_endpoint_url"
        ],
        "negativeExamples": [
          "api_key"
        ]
      },
      {
        "regExp": "(?i).*(file|image|photo|avatar|logo|thumbnail|attachment|document).*(url|uri|link).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "file_url"
        ],
        "negativeExamples": [
          "file_path"
        ]
      },
      {
        "regExp": "(?i).*(site|host|addr|address).*(url|uri|link).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "host_url"
        ],
        "negativeExamples": [
          "host_name"
        ]
      },
      {
        "regExp": "(?i).*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "url"
        ],
        "negativeExamples": [
          "user"
        ]
      }
    ],
    "positiveContentExamples": [
      "https://www.example.com",
      "http://api.example.org/v1/resources?id=42&sort=asc",
      "https://sub.domain.co.uk/path/to/page.html#section-2",
      "ftp://ftp.example.net/pub/files/archive.zip",
      "ftps://files.example.io:990/downloads/data.csv",
      "sftp://server.example.com:22/home/user/docs/readme.txt",
      "file:///var/log/system.log",
      "file:///C:/Program%20Files/App/app.exe"
    ],
    "negativeContentExamples": [
      "www.example.com",
      "http:/example.com",
      "https://example",
      "https://example.123",
      "https://-bad.example.com",
      "http://example..com/path",
      "file://var/log/syslog",
      "https://example.com/space in url"
    ],
    "positiveHeaderExamples": [
      "website_url",
      "page_url",
      "resource_uri",
      "download_link",
      "api_endpoint_url",
      "redirect_uri",
      "file_url",
      "host_url"
    ],
    "negativeHeaderExamples": [
      "website",
      "api_key",
      "file_path",
      "host_name",
      "email_address",
      "image_id",
      "document_name",
      "reference_code"
    ],
    "explanation": "This semantic type identifies full network resource locators (URLs/URIs) that include a scheme (such as http, https, ftp, sftp, ftps, or file), a valid host for network schemes, and an optional port, path, query, and fragment. It is useful for detecting columns that store links to web pages, API endpoints, download resources, or file URIs. The pattern requires an explicit scheme to reduce false positives, so bare domains or paths without a scheme are intentionally not matched.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:48.648593"
  },
  {
    "resultType": "generated",
    "semanticType": "project",
    "description": "Open-ended human-readable text fields containing natural language sentences, phrases, or paragraphs with variable length and content. Intended for free-form descriptions, notes, summaries, or narratives without predefined structure or fixed format.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'-]*\\b([ \\t,.;:!?()\\/-]+\\b[A-Za-z][A-Za-z0-9'-]*\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9560,
    "headerPatterns": [
      {
        "regExp": "(?i).*project.*(description|details|summary|overview).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_description"
        ],
        "negativeExamples": [
          "project_code"
        ]
      },
      {
        "regExp": "(?i).*project.*(notes|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_notes"
        ],
        "negativeExamples": [
          "project_status"
        ]
      },
      {
        "regExp": "(?i).*(project|initiative|workstream).*(summary|details|overview).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "initiative_summary"
        ],
        "negativeExamples": [
          "initiative_id"
        ]
      },
      {
        "regExp": "(?i).*(proj|prj).*(desc|notes|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "proj_desc"
        ],
        "negativeExamples": [
          "proj_id"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "Planning phase kicked off with cross-team alignment yesterday.",
      "The project aims to modernize legacy billing services.",
      "User research revealed three critical pain points.",
      "Please update the timeline after stakeholder review.",
      "Initial release will target core workflow automation.",
      "Budget variance requires approval from finance.",
      "Integration with the API is pending vendor credentials.",
      "Draft requirements have been shared for feedback."
    ],
    "negativeContentExamples": [
      "Alpha Beta",
      "Q3-2024",
      "123 roadmap steps",
      "OK",
      "To-do: tasks",
      "update_timeline_now",
      "Pending",
      "Fix bug 101"
    ],
    "positiveHeaderExamples": [
      "project_description",
      "project_notes",
      "project_summary",
      "project_overview",
      "project_details",
      "initiative_summary",
      "proj_desc",
      "project_comment"
    ],
    "negativeHeaderExamples": [
      "project_id",
      "project_code",
      "project_status",
      "initiation_date",
      "proj_num",
      "project_owner",
      "project_budget",
      "project_url"
    ],
    "explanation": "This type identifies free-form narrative text suitable for descriptions, notes, and summaries that lack a rigid structure or code-like format. It is designed to capture multi-word natural language content rather than short identifiers, codes, or numeric fields.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:48.718238"
  },
  {
    "resultType": "generated",
    "semanticType": "department",
    "description": "This type captures the complete names of US states and territories as they are used in official documentation and government administration. The values represent full state names using proper English spelling and standard formatting as established by the US constitutional and administrative systems.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming|District of Columbia|Puerto Rico|Guam|American Samoa|Northern Mariana Islands|U\\.S\\. Virgin Islands|United States Virgin Islands)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9660,
    "headerPatterns": [
      {
        "regExp": "(?i).*us.*state.*full.*name.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "us_state_full_name"
        ],
        "negativeExamples": [
          "us_state_code"
        ]
      },
      {
        "regExp": "(?i).*state.*territory.*name.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "state_territory_name"
        ],
        "negativeExamples": [
          "territory_code"
        ]
      },
      {
        "regExp": "(?i).*us.*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "us_state_name"
        ],
        "negativeExamples": [
          "state_code"
        ]
      },
      {
        "regExp": "(?i).*province.*name.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "province_name"
        ],
        "negativeExamples": [
          "province_code"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Alabama",
      "New Mexico",
      "District of Columbia",
      "Puerto Rico",
      "Northern Mariana Islands",
      "U.S. Virgin Islands",
      "West Virginia",
      "Rhode Island"
    ],
    "negativeContentExamples": [
      "NewYork",
      "Washington D.C.",
      "Puerto  Rico",
      "Californi",
      "Virgin Islands, U.S.",
      "North  Dakota",
      "Rhode-Island",
      "US Virgin Islands"
    ],
    "positiveHeaderExamples": [
      "us_state_full_name",
      "state_territory_name",
      "state_name",
      "province_name",
      "us_state_name",
      "state_fullname",
      "administrative_state_name"
    ],
    "negativeHeaderExamples": [
      "state_code",
      "province_code",
      "country_name",
      "county_name",
      "postal_state",
      "state_abbr",
      "state_id"
    ],
    "explanation": "This semantic type identifies full names of US states and territories, including multi-word forms and officially recognized territories (e.g., District of Columbia, Puerto Rico, American Samoa). It is useful for normalizing administrative geography fields where full names are expected rather than abbreviations or codes. The detection relies on an explicit alternation of the official names to minimize false positives.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:48.958304"
  },
  {
    "resultType": "generated",
    "semanticType": "prefix",
    "description": "Formal titles and honorific prefixes used before personal names in English-language correspondence and documentation. Values are established honorifics and rank titles, optionally including a trailing period where customary.",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "MR",
      "MR.",
      "MRS",
      "MRS.",
      "MS",
      "MS.",
      "MISS",
      "MX",
      "MX.",
      "DR",
      "DR.",
      "PROF",
      "PROF.",
      "REV",
      "REV.",
      "HON",
      "HON.",
      "SIR",
      "DAME",
      "LORD",
      "LADY",
      "CAPT",
      "CAPT.",
      "COL",
      "COL."
    ],
    "backout": "^[A-Z]{2,5}\\.?$",
    "confidenceThreshold": 98,
    "priority": 9530,
    "headerPatterns": [
      {
        "regExp": "(?i).*name[_ ]?prefix.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name_prefix"
        ],
        "negativeExamples": [
          "job_title"
        ]
      },
      {
        "regExp": "(?i).*person.*(title|prefix).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "person_title"
        ],
        "negativeExamples": [
          "username"
        ]
      },
      {
        "regExp": "(?i).*(honorific|salutation|title).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "honorific"
        ],
        "negativeExamples": [
          "greeting"
        ]
      },
      {
        "regExp": "(?i).*(prefix|pref).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prefix"
        ],
        "negativeExamples": [
          "suffix"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "email"
        ]
      }
    ],
    "positiveContentExamples": [
      "Mr.",
      "Mr",
      "Ms",
      "Mrs.",
      "Dr",
      "Prof.",
      "Rev",
      "Mx."
    ],
    "negativeContentExamples": [
      "Mister",
      "Doctor",
      "Sr.",
      "Jr.",
      "Drs.",
      "Mrs-",
      "Mx-",
      "Professr."
    ],
    "positiveHeaderExamples": [
      "name_prefix",
      "title",
      "honorific",
      "salutation",
      "prefix_title",
      "person_title",
      "formal_title",
      "name prefix"
    ],
    "negativeHeaderExamples": [
      "suffix",
      "middle_initial",
      "job_role",
      "nickname",
      "username",
      "greeting",
      "department",
      "display_order"
    ],
    "explanation": "This semantic type isolates honorific or title prefixes that precede personal names (e.g., Mr., Dr, Mx.), commonly found in contact lists, CRMs, and mailing data. Use when a column stores only the title/prefix token separate from given or family names. The backout pattern safely bounds candidates to short alphabetic tokens with an optional trailing period while the list enforces a curated English set.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:49.014164"
  },
  {
    "resultType": "generated",
    "semanticType": "owner",
    "description": "This type represents full personal names formatted in the first name followed by last name order, which is common in Western naming conventions. The values combine given names and family names separated by a single space without including middle names, titles, or additional name components.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+(['-][A-Za-z]+)*) ([A-Z][a-z]+(['-][A-Za-z]+)*)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9260,
    "headerPatterns": [
      {
        "regExp": "(?i).*owner.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "owner_full_name"
        ],
        "negativeExamples": [
          "owner_name"
        ]
      },
      {
        "regExp": "(?i).*owner.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "owner_name"
        ],
        "negativeExamples": [
          "owner_id"
        ]
      },
      {
        "regExp": "(?i).*(property|vehicle|account|policy).*owner.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "account_owner"
        ],
        "negativeExamples": [
          "owner_status"
        ]
      },
      {
        "regExp": "(?i).*(ownr).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ownr_name"
        ],
        "negativeExamples": [
          "ownr_id"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Maria Garcia",
      "Liam O'Connor",
      "Jean-Luc Picard",
      "Chloe Brown",
      "Pedro Alvarez",
      "Emily-Jane Carter",
      "Noah O'Brien"
    ],
    "negativeContentExamples": [
      "JOHN SMITH",
      "John A. Smith",
      "John  Smith",
      "Dr John Smith",
      "John Smith Jr",
      "John-Smith",
      "O'Connor",
      "Ana Mar\u00eda Lopez"
    ],
    "positiveHeaderExamples": [
      "owner_full_name",
      "owner name",
      "account_owner_name",
      "property_owner",
      "vehicle_owner",
      "policy_owner_name",
      "ownr_name",
      "asset_owner_name"
    ],
    "negativeHeaderExamples": [
      "owner_id",
      "owner_code",
      "owner_email",
      "owner_phone",
      "owner_status",
      "owner_address",
      "owner_since_date",
      "account_number"
    ],
    "explanation": "Identifies two-token personal names in 'First Last' order with a single separating space. Each token begins with an uppercase letter and may include internal hyphens or apostrophes (e.g., O'Connor, Jean-Luc). It excludes middle names, initials, titles, suffixes, extra spaces, and all-uppercase entries. Typical use cases include columns labeled owner_name or account_owner where the field stores a person's full name.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:49.331001"
  },
  {
    "resultType": "generated",
    "semanticType": "order",
    "description": "Open-ended, human-readable text capturing natural language phrases, sentences, or short paragraphs. Intended for free-form order-related notes, special instructions, or descriptions where no strict format applies.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}( [A-Za-z]{2,}){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9490,
    "headerPatterns": [
      {
        "regExp": "(?i).*order.*(notes|instructions|comments|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_notes"
        ],
        "negativeExamples": [
          "customer_order_id"
        ]
      },
      {
        "regExp": "(?i).*(order|purchase).*(description|details|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_description"
        ],
        "negativeExamples": [
          "purchase_order_number"
        ]
      },
      {
        "regExp": "(?i).*(po|ord).*(notes|desc|msg).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "po_notes"
        ],
        "negativeExamples": [
          "po_number"
        ]
      },
      {
        "regExp": "(?i).*(delivery|shipping|special).*(instructions|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "delivery_instructions"
        ],
        "negativeExamples": [
          "shipping_method"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please ship the order to the secondary address.",
      "Customer would like gift wrapping if available.",
      "Leave the package by the garage door.",
      "Add two extra sets of cables to this order.",
      "This item replaces the previous model in the kit.",
      "If out of stock, contact me with alternatives.",
      "Please notify me before finalizing the shipment."
    ],
    "negativeContentExamples": [
      "Ship ASAP",
      "ORD-12345",
      "2025/08/11",
      "john.doe@example.com",
      "Q3 results",
      "Approved",
      "123456",
      "ASAP - urgent"
    ],
    "positiveHeaderExamples": [
      "order_notes",
      "order_instructions",
      "order_description",
      "purchase_order_text",
      "delivery_instructions",
      "special_instructions",
      "po_notes",
      "order_comments"
    ],
    "negativeHeaderExamples": [
      "order_number",
      "customer_order_id",
      "purchase_order_number",
      "shipping_method",
      "product_name",
      "address_line",
      "tracking_number",
      "payment_code"
    ],
    "explanation": "This semantic type targets free-form, natural language content commonly found in order-related notes, special instructions, or descriptive text fields. The regex detects sequences of at least three alphabetic words separated by spaces, which favors sentence-like content over codes, IDs, dates, and other structured formats. Header patterns follow a top-down approach from explicit order notes/instructions to generic 'text', helping identify columns that store such unstructured descriptions while avoiding numeric identifiers and structured codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:50.969551"
  },
  {
    "resultType": "generated",
    "semanticType": "note",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9][A-Za-z0-9'\u2019(),;:!?.-]*\\b(\\s+[A-Za-z0-9][A-Za-z0-9'\u2019(),;:!?.-]*\\b){5,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9090,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|client|order|ticket|case|internal).*(note|notes|comment|comments|remark|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_status"
        ]
      },
      {
        "regExp": "(?i).*(free[ _]?text|freeform[ _]?text|note[ _]?text|text[ _]?note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*(note|notes|comment|comments|remark|remarks|memo|memos|observation|observations).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_comments"
        ],
        "negativeExamples": [
          "case_status"
        ]
      },
      {
        "regExp": "(?i).*(cmt|cmts|rmk|rmks|memo|obs|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cmts"
        ],
        "negativeExamples": [
          "cnt"
        ]
      },
      {
        "regExp": "(?i).*note.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "note"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver the package to the side entrance after 6 pm.",
      "Customer reported intermittent errors and requested a callback tomorrow morning.",
      "This note summarizes the meeting outcomes, action items, and next steps.",
      "If the door is locked, call the supervisor at the number on file.",
      "Leave the package behind the plant; do not ring the bell.",
      "Great service today - agent was helpful, polite, and resolved the issue quickly.",
      "Per our conversation, schedule a follow-up visit next week to verify.",
      "Client prefers email communication; document any changes in the record."
    ],
    "negativeContentExamples": [
      "No notes provided",
      "Call back tomorrow",
      "Left voicemail at 5pm",
      "See attachment for details",
      "Approved",
      "Address: 45 Main St",
      "Follow up next week",
      "Invoice paid 2024-05-10"
    ],
    "positiveHeaderExamples": [
      "customer_notes",
      "internal_note",
      "case_comments",
      "support_ticket_note",
      "resolution_remarks",
      "agent_memo",
      "general_observations",
      "free_text"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "status",
      "error_code",
      "shipping_address",
      "item_count",
      "order_number",
      "email",
      "created_date"
    ],
    "explanation": "NOTE identifies free-form natural language fields where users enter sentences or paragraphs, such as comments, remarks, or memos. The regex requires at least six word tokens to distinguish substantive text from short tags, codes, and single-word fields. Header patterns prioritize specific entity-linked notes, then common synonyms and abbreviations, and finally the primitive 'note' term, reducing collisions with non-textual fields.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:51.061890"
  },
  {
    "resultType": "generated",
    "semanticType": "position",
    "description": "This type captures job titles and occupational designations as they appear in professional contexts, employment records, and organizational structures. The values represent standard professional roles, specialized positions, or functional titles using conventional workplace terminology.",
    "pluginType": "regex",
    "regexPattern": "\\b((Chief|Vice\\s+President|VP|CEO|CFO|COO|CIO|CMO|CHRO|CTO|CPO|CISO|Director|Manager|Head|Lead|Supervisor|Assistant|Associate|Principal|Senior|Junior|Executive|Engineer|Analyst|Specialist|Officer|Coordinator|Consultant|Technician|Administrator|Architect|Developer|Scientist|Advisor|Auditor|Planner|Recruiter|Professor|Teacher|Nurse|Accountant|Attorney)([ -](of|for|and|&|[A-Z][a-z]+|[A-Z]{2,})){0,5}|([A-Z][a-z]+|[A-Z]{2,})([ -](of|for|and|&|[A-Z][a-z]+|[A-Z]{2,})){0,4}\\s+(Accountant|Analyst|Architect|Consultant|Coordinator|Designer|Developer|Director|Engineer|Executive|Manager|Officer|Scientist|Specialist|Supervisor|Technician|Administrator|Advisor|Auditor|Planner|Recruiter|Professor|Teacher|Nurse|Attorney))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9290,
    "headerPatterns": [
      {
        "regExp": "(?i).*job.*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "job_title"
        ],
        "negativeExamples": [
          "job_code"
        ]
      },
      {
        "regExp": "(?i).*position.*title.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "position_title"
        ],
        "negativeExamples": [
          "position_id"
        ]
      },
      {
        "regExp": "(?i).*(employee|staff).*position.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "employee_position"
        ],
        "negativeExamples": [
          "staff_count"
        ]
      },
      {
        "regExp": "(?i).*(role|job).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "role"
        ],
        "negativeExamples": [
          "category"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 91,
        "mandatory": true,
        "positiveExamples": [
          "position_name"
        ],
        "negativeExamples": [
          "position_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Senior Software Engineer",
      "Chief Financial Officer",
      "VP Marketing",
      "Director of Operations",
      "Marketing Manager",
      "Data Analyst",
      "Principal Scientist",
      "Human Resources Coordinator"
    ],
    "negativeContentExamples": [
      "Engineering",
      "Managerial",
      "employee manager",
      "Director/Sales",
      "VP, Marketing",
      "Software",
      "Project Team Leadtime",
      "Finance Department"
    ],
    "positiveHeaderExamples": [
      "job_title",
      "position_title",
      "employee_position",
      "staff_position",
      "role",
      "position_name",
      "job_role",
      "employee_job_title"
    ],
    "negativeHeaderExamples": [
      "position_id",
      "job_code",
      "employee_status",
      "department",
      "tasks",
      "category",
      "grade",
      "skill_level"
    ],
    "explanation": "This semantic type identifies job titles and occupational roles, emphasizing common role keywords (e.g., Manager, Director, Engineer) with optional qualifiers and connectors. It suits HR data, org charts, resumes, and workforce analytics where fields store role titles rather than personal names or departments. The regex prefers capitalized tokens, common leadership abbreviations (e.g., VP, CEO), and allows connectors like of/for/and/& as seen in natural titles.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:51.862166"
  },
  {
    "resultType": "generated",
    "semanticType": "max",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9,'\u2019()/:;-]*\\s+[A-Za-z][A-Za-z0-9,'\u2019()/:;-]*([ \\t]+[A-Za-z0-9,'\u2019()/:;-]+)*[.!?]?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9730,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|issue|user).*(comment|comments|note|notes|description|remark|remarks|message|messages).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(free[ _-]?text|long[ _-]?text|short[ _-]?text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(comments?|notes?|remarks?|narrative|description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "product_number"
        ]
      },
      {
        "regExp": "(?i).*(desc|msg|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "prod_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached report.",
      "This item is currently out of stock",
      "The quick brown fox jumps over the lazy dog",
      "Customer requested a refund last week",
      "Notes: deliver before 5 pm",
      "High-priority issue reported by QA team",
      "Thank you for your patience",
      "Call me when you arrive"
    ],
    "negativeContentExamples": [
      "Hello-World",
      "OK",
      "A1B2C3",
      "2025-08-11",
      "john_doe",
      "INV-000123",
      "Hello,world",
      "Hello 12345"
    ],
    "positiveHeaderExamples": [
      "customer_comments",
      "issue_description",
      "order_notes",
      "user_message",
      "free_text",
      "product_details",
      "narrative"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "invoice_number",
      "customer_id",
      "status",
      "country",
      "zip_code",
      "timestamp"
    ],
    "explanation": "This semantic type is intended for columns that hold natural language content such as comments, descriptions, notes, messages, or other unstructured human-readable text. It is designed to recognize multi-word text fields and avoid matching structured identifiers or codes. Use it to classify free-form narrative fields across diverse datasets where the content is not governed by a rigid format.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:53.221907"
  },
  {
    "resultType": "generated",
    "semanticType": "created",
    "description": "This type captures Unix timestamp values expressed in seconds precision for standard time measurement and system operations. The values represent time as an integer count of seconds from the Unix epoch without any formatting, separators, or textual date components.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-2][0-9]{9}\\b|\\b[1-9][0-9]{8}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 9710,
    "headerPatterns": [
      {
        "regExp": "(?i).*created.*(epoch|unix).*(sec|seconds|s).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "created_unix_seconds"
        ],
        "negativeExamples": [
          "updated_epoch_seconds"
        ]
      },
      {
        "regExp": "(?i).*(created|creation).*timestamp.*(sec|seconds|s).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "created_timestamp_seconds"
        ],
        "negativeExamples": [
          "created_timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(created|creation).*(timestamp|ts|time|epoch).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "created_ts"
        ],
        "negativeExamples": [
          "last_updated_time"
        ]
      },
      {
        "regExp": "(?i).*(crt|crtd|cdate).*(ts|time|epoch|unix).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "crtd_unix"
        ],
        "negativeExamples": [
          "crt_user"
        ]
      },
      {
        "regExp": "(?i).*date.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "date"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "1609459200",
      "1699999999",
      "1704067200",
      "946684800",
      "1234567890",
      "2147483647",
      "315532800",
      "978307200"
    ],
    "negativeContentExamples": [
      "1609459200000",
      "01609459200",
      "0000000000",
      "170406720",
      "17040672001",
      "1704067200.0",
      "1704067200Z",
      "2024-01-01"
    ],
    "positiveHeaderExamples": [
      "created_unix_seconds",
      "created_epoch",
      "creation_timestamp",
      "created_ts",
      "created_time_epoch",
      "creation_time_seconds",
      "created_unix",
      "created_timestamp_seconds"
    ],
    "negativeHeaderExamples": [
      "updated_epoch_seconds",
      "last_login_unix",
      "modified_timestamp",
      "closed_time",
      "created_ms",
      "created_id",
      "status_created_flag",
      "birth_date"
    ],
    "explanation": "EPOCH.created identifies columns storing creation times as Unix epoch seconds (integer seconds since 1970-01-01 UTC). It excludes milliseconds, fractional seconds, ISO date strings, and values with separators or text. This type is useful for ingesting logs, events, and system records where the creation time is captured as a compact 9\u201310 digit integer.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:56.746289"
  },
  {
    "resultType": "generated",
    "semanticType": "month",
    "description": "Identifies numeric month values as they appear in date representations and calendar systems using integer notation. Accepts integers 1 through 12, including optional leading zero for 1\u20139, corresponding to the twelve months of the Gregorian calendar.",
    "pluginType": "regex",
    "regexPattern": "\\b(1[0-2]|0?[1-9])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 92,
    "priority": 9720,
    "headerPatterns": [
      {
        "regExp": "(?i).*(month[_ ]?(number|num|no)).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "invoice_month_number"
        ],
        "negativeExamples": [
          "invoice_month_name"
        ]
      },
      {
        "regExp": "(?i).*(numeric[_ ]?month).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "numeric_month"
        ],
        "negativeExamples": [
          "month_numeric_label"
        ]
      },
      {
        "regExp": "(?i).*(posting[_ ]?month).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "posting_month"
        ],
        "negativeExamples": [
          "posting_date"
        ]
      },
      {
        "regExp": "(?i).*(mnth|mo)[_ ]?(num|no).*",
        "confidence": 91,
        "mandatory": true,
        "positiveExamples": [
          "mo_num"
        ],
        "negativeExamples": [
          "mo_day_num"
        ]
      },
      {
        "regExp": "(?i).*month.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "month"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "1",
      "2",
      "9",
      "10",
      "12",
      "01",
      "07",
      "11"
    ],
    "negativeContentExamples": [
      "0",
      "13",
      "-1",
      "1.0",
      "001",
      "1e1",
      "20",
      "00"
    ],
    "positiveHeaderExamples": [
      "invoice_month_number",
      "numeric_month",
      "month_num",
      "month_no",
      "mo_num",
      "posting_month",
      "billing_month_number",
      "report_month_index"
    ],
    "negativeHeaderExamples": [
      "month_name",
      "month_text",
      "month_abbreviation",
      "day",
      "date",
      "year",
      "fiscal_quarter",
      "week_of_month"
    ],
    "explanation": "This semantic type captures integer month tokens, allowing values 1\u201312 with optional leading zeros (01\u201309). It is suited for columns storing the month component as a standalone numeric field rather than full dates or textual month names. It explicitly excludes zeros, values above 12, negatives, decimals, scientific notation, and non-numeric formats.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:57.044780"
  },
  {
    "resultType": "generated",
    "semanticType": "season",
    "description": "Identifies quarterly period designations commonly used in business reporting and financial analysis. Values represent standardized quarter indicators for three-month periods within a calendar or fiscal year, using forms such as Q1, QTR-3, Quarter 4, and combinations with years or fiscal/calendar prefixes (e.g., FY24 Q1, 2023-Q4).",
    "pluginType": "regex",
    "regexPattern": "(?i)(\\b(q|qtr|quarter)\\s*[-_/]?\\s*([1-4])\\b|\\b(20\\d{2}|\\d{2})\\s*[-_/]?\\s*(q|qtr|quarter)\\s*[-_/]?\\s*([1-4])\\b|\\b(fy|cy)\\s*[-_/]?\\s*(20\\d{2}|\\d{2})\\s*[-_/]?\\s*(q|qtr|quarter)\\s*[-_/]?\\s*([1-4])\\b|\\b(q|qtr|quarter)\\s*[-_/]?\\s*([1-4])\\s*[-_/]?\\s*((fy|cy)\\s*[-_/]?\\s*(20\\d{2}|\\d{2})|(20\\d{2}|\\d{2}))\\b)",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9700,
    "headerPatterns": [
      {
        "regExp": "(?i).*fiscal.*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fiscal_quarter"
        ],
        "negativeExamples": [
          "fiscal_year"
        ]
      },
      {
        "regExp": "(?i).*(calendar|cy).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "calendar_quarter"
        ],
        "negativeExamples": [
          "calendar_year"
        ]
      },
      {
        "regExp": "(?i).*(reporting|business).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "reporting_quarter"
        ],
        "negativeExamples": [
          "reporting_period"
        ]
      },
      {
        "regExp": "(?i).*(qtr|qtr_?num|qtr_?no).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "qtr_num"
        ],
        "negativeExamples": [
          "qrt_num"
        ]
      },
      {
        "regExp": "(?i).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "quarter"
        ],
        "negativeExamples": [
          "period"
        ]
      }
    ],
    "positiveContentExamples": [
      "Q1",
      "Q2 2024",
      "2023 Q4",
      "QTR-3",
      "Quarter 1",
      "FY24 Q2",
      "Q3 FY2021",
      "CY2022-Q1"
    ],
    "negativeContentExamples": [
      "Q0",
      "Q5 2023",
      "Quarter-13",
      "FY2024",
      "2023 Quarter",
      "S1 2023",
      "H2-2021",
      "QTR-0"
    ],
    "positiveHeaderExamples": [
      "fiscal_quarter",
      "quarter",
      "qtr_num",
      "reporting_quarter",
      "quarter_number",
      "cy_quarter",
      "fy_quarter",
      "quarter_index"
    ],
    "negativeHeaderExamples": [
      "fiscal_year",
      "month",
      "week_number",
      "season_name",
      "half_year",
      "reporting_period",
      "region",
      "weekday"
    ],
    "explanation": "This semantic type captures quarterly period identifiers in formats commonly found across business and financial datasets, including basic quarter tokens (Q1\u2013Q4), spelled/abbreviated forms (Quarter 2, QTR-3), and combinations with calendar or fiscal year indicators (e.g., 2023 Q4, FY24 Q1, CY2022-Q2). It is useful for classifying columns that encode quarter membership for records, enabling time-series grouping and quarterly analysis.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:40:59.570913"
  },
  {
    "resultType": "generated",
    "semanticType": "alias",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]{1,}[ ]+[A-Za-z][A-Za-z0-9'-]{1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9580,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|ticket|case|issue)[ _-]+(description|notes|comments|remarks|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_description"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(description|notes|comments|remarks|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*(free[ _-]*text|long[ _-]*text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmts|rmks|txt|msg).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "context"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached document by Friday.",
      "High priority issue requires immediate attention.",
      "Customer reported an intermittent connectivity problem.",
      "Deliver to the loading dock on the west side.",
      "Payment received; awaiting reconciliation.",
      "This item has slight cosmetic damage.",
      "The replacement will ship next week.",
      "Notes include action items and follow-up owners."
    ],
    "negativeContentExamples": [
      "Pending",
      "Unknown.",
      "2024-05-17",
      "12345",
      "user@example.com",
      "https://example.com",
      "ID-12345",
      "v2 beta"
    ],
    "positiveHeaderExamples": [
      "description",
      "order_description",
      "customer_notes",
      "ticket_comments",
      "case_remarks",
      "issue_details",
      "free_text",
      "long_text"
    ],
    "negativeHeaderExamples": [
      "status",
      "error_code",
      "date",
      "id",
      "name",
      "amount",
      "customer_id",
      "zip_code"
    ],
    "explanation": "Alias is modeled here as a broad free-text semantic type intended for narrative fields such as descriptions, notes, comments, and other human-readable entries without a fixed format. It signals unstructured natural language content that can vary widely in length and vocabulary. The regex favors multi-word textual content to reduce false positives from codes and single-token identifiers. Due to its broad scope, a high confidence threshold and low priority are set to minimize conflicts with more specific semantic types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:00.901900"
  },
  {
    "resultType": "generated",
    "semanticType": "depth",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}[^\\S\\r\\n]+[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9810,
    "headerPatterns": [
      {
        "regExp": "(?i).*customer.*feedback.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback_text"
        ],
        "negativeExamples": [
          "customer_feedback_score"
        ]
      },
      {
        "regExp": "(?i).*detailed.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_detailed_description"
        ],
        "negativeExamples": [
          "issue_summary"
        ]
      },
      {
        "regExp": "(?i).*comments.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "general_comments_notes"
        ],
        "negativeExamples": [
          "comment_count"
        ]
      },
      {
        "regExp": "(?i).*desc.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*txt.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_txt"
        ],
        "negativeExamples": [
          "notes"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "summary"
        ]
      }
    ],
    "positiveContentExamples": [
      "The water quality shows moderate improvement over the last quarter.",
      "Delivery was delayed due to severe weather in the region.",
      "User reported intermittent connectivity issues after the update.",
      "Please handle with care; fragile components inside the package.",
      "Outstanding performance with minor setup quirks noted.",
      "Meeting rescheduled to next Tuesday at 10 am.",
      "Customer expressed satisfaction with the overall experience.",
      "Further investigation is required to confirm the root cause."
    ],
    "negativeContentExamples": [
      "Pending",
      "OK",
      "N/A",
      "12345",
      "A12-B34",
      "john.doe@example.com",
      "http://example.com/page",
      "Section-7"
    ],
    "positiveHeaderExamples": [
      "customer_feedback_text",
      "issue_detailed_description",
      "general_comments_notes",
      "prod_desc",
      "long_txt",
      "free_text",
      "detailed_description",
      "remarks_text"
    ],
    "negativeHeaderExamples": [
      "customer_feedback_score",
      "issue_summary",
      "comment_count",
      "product_code",
      "notes_id",
      "title",
      "message_code",
      "short_name"
    ],
    "explanation": "This semantic type targets free-form narrative fields containing natural language text, such as comments, descriptions, feedback, and notes. It is intentionally broad and uses a conservative pattern that detects at least two alphabetic words separated by whitespace, which helps distinguish narrative content from single tokens, codes, identifiers, or numeric-only values. Header patterns prioritize commonly used column naming conventions for descriptive text (e.g., description, text, notes) from specific to primitive, reducing conflicts with more specialized types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:01.613087"
  },
  {
    "resultType": "generated",
    "semanticType": "time",
    "description": "This type captures Unix timestamp values expressed in seconds precision for standard time measurement and system operations. The values represent time as an integer count of seconds from the Unix epoch without any formatting, separators, or textual date components.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9][0-9]{8,10}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 9040,
    "headerPatterns": [
      {
        "regExp": "(?i).*unix.*(timestamp|time).*sec.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "unix_timestamp_seconds"
        ],
        "negativeExamples": [
          "unix_millis"
        ]
      },
      {
        "regExp": "(?i).*epoch.*(seconds|secs|sec).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "epoch_seconds"
        ],
        "negativeExamples": [
          "epoch_millis"
        ]
      },
      {
        "regExp": "(?i).*epoch.*time.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "event_epoch_time"
        ],
        "negativeExamples": [
          "event_time"
        ]
      },
      {
        "regExp": "(?i).*ts.*sec.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "ts_seconds"
        ],
        "negativeExamples": [
          "ts_millis"
        ]
      },
      {
        "regExp": "(?i).*time.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "time"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "315532800",
      "631152000",
      "946684800",
      "1234567890",
      "1609459200",
      "1672531200",
      "1700000000",
      "10000000000"
    ],
    "negativeContentExamples": [
      "1609459200000",
      "99999999",
      "100000000000",
      "1700000000Z",
      "-1700000000",
      "1609459_200",
      "2021-01-01",
      "1609459200.5"
    ],
    "positiveHeaderExamples": [
      "unix_timestamp_seconds",
      "epoch_seconds",
      "event_epoch_time",
      "ts_seconds",
      "unix_time_sec",
      "created_ts_sec",
      "unix_epoch_seconds",
      "epoch_time_seconds"
    ],
    "negativeHeaderExamples": [
      "unix_millis",
      "epoch_millis",
      "ts_millis",
      "created_at",
      "record_date",
      "tz_offset",
      "duration_seconds",
      "ms_since_epoch"
    ],
    "explanation": "Identifies integer Unix timestamps measured in seconds since 1970-01-01 00:00:00 UTC, represented as plain digit tokens without separators. The pattern targets contiguous 9\u201311 digit values starting with a non-zero digit, covering historical (9-digit), current (10-digit), and far-future (11-digit) seconds while excluding milliseconds and other formats. Use this type to recognize system event times stored as epoch seconds in logs, telemetry, and databases.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:02.745088"
  },
  {
    "resultType": "generated",
    "semanticType": "genus",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'()\\/&-]*[a-z][A-Za-z0-9'()\\/&-]*([ ,.;:!?]+[A-Za-z][A-Za-z0-9'()\\/&-]*[a-z][A-Za-z0-9'()\\/&-]*)+\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9670,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|product|order).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*(customer|agent|user).*notes?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "agent_notes"
        ],
        "negativeExamples": [
          "user_id"
        ]
      },
      {
        "regExp": "(?i).*(long|free|unstructured).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "short_code"
        ]
      },
      {
        "regExp": "(?i).*(narrative|remarks?|details?).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "additional_details"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog.",
      "Please deliver to the south entrance by 9am.",
      "User reported intermittent connectivity issues.",
      "Payment was received and recorded successfully.",
      "Return merchandise authorization approved.",
      "High priority ticket requiring immediate attention.",
      "This section outlines the scope and assumptions.",
      "Customer stated that the package arrived damaged."
    ],
    "negativeContentExamples": [
      "HELLO WORLD",
      "Invoice 2023-09-15",
      "QTY 10 PCS",
      "ID: 12345",
      "A12 B34",
      "404 Not Found",
      "abc123",
      "https://example.com/page"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "customer_notes",
      "comments",
      "narrative",
      "long_text",
      "additional_details",
      "message_body",
      "remarks"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "note_count",
      "short_code",
      "message_id",
      "title",
      "category",
      "status",
      "identifier"
    ],
    "explanation": "Genus represents free-form, human-readable text commonly found in description, notes, and comment fields. It is intentionally broad to capture unstructured narrative content and is useful when datasets include paragraphs or sentences rather than structured codes or identifiers. The pattern favors multi-word, mixed-case language to reduce false positives from IDs, codes, or URLs.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:04.998260"
  },
  {
    "resultType": "generated",
    "semanticType": "duration",
    "description": "Represents human-readable durations or time spans expressed in common formats, including clock-style (hh:mm or hh:mm:ss), word-based units (e.g., \"2 hours 30 minutes\", \"3 days\"), abbreviated unit pairs (e.g., \"1h 45m\"), and compact ISO-8601 duration strings (e.g., \"PT20M\", \"P3DT4H\"). This type is intended for fields capturing how long something lasts, not a start or end timestamp.",
    "pluginType": "regex",
    "regexPattern": "\\b(\\d{1,2}:\\d{2}(:\\d{2})?|\\d{1,3}\\s?(years?|months?|weeks?|days?|hours?|minutes?|seconds?)|\\d{1,3}\\s?(y|mo|w|d|h|hr|hrs)\\s+\\d{1,3}\\s?(m|min|mins|s|sec|secs)|P\\d+[YMWD](T\\d+[HMS])?|PT\\d+[HMS](\\d+[HMS])?)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9550,
    "headerPatterns": [
      {
        "regExp": "(?i).*(call|session|video|task).*duration.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "video_duration"
        ],
        "negativeExamples": [
          "video_start_time"
        ]
      },
      {
        "regExp": "(?i).*(elapsed|total).*time.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "elapsed_time"
        ],
        "negativeExamples": [
          "event_time"
        ]
      },
      {
        "regExp": "(?i).*(run|wait|process).*time.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "wait_time_minutes"
        ],
        "negativeExamples": [
          "waitlist_count"
        ]
      },
      {
        "regExp": "(?i).*(dur|length|len|ttl)_?(mins?|hours?|hrs?|secs?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "dur_mins"
        ],
        "negativeExamples": [
          "hourly_rate"
        ]
      },
      {
        "regExp": "(?i).*duration.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "duration"
        ],
        "negativeExamples": [
          "time_zone"
        ]
      }
    ],
    "positiveContentExamples": [
      "2 hours 30 minutes",
      "1h 45m",
      "00:45:00",
      "01:30",
      "3 days",
      "PT20M",
      "P3DT4H",
      "90 seconds"
    ],
    "negativeContentExamples": [
      "1:2:3",
      "1 hr,30",
      "2h30m",
      "00:5:00",
      "PT",
      "2 h30",
      "5 miles",
      "3 months 7"
    ],
    "positiveHeaderExamples": [
      "call_duration",
      "session_duration_sec",
      "video_duration",
      "elapsed_time",
      "total_time_spent",
      "wait_time_minutes",
      "dur_hours",
      "length_secs"
    ],
    "negativeHeaderExamples": [
      "start_time",
      "event_time",
      "distance_km",
      "file_size_bytes",
      "age_years",
      "timestamp",
      "speed_mph",
      "time_zone"
    ],
    "explanation": "This semantic type identifies values that represent the length of time, using commonly seen duration formats such as clock-style tokens (hh:mm or hh:mm:ss), natural language unit phrases (e.g., hours, minutes, seconds), abbreviated unit pairs (e.g., 2h 15m), and ISO-8601 duration expressions. It is useful for fields like call or session duration, total elapsed time, or processing/wait times, and is distinct from absolute date/time stamps.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:04.998471"
  },
  {
    "resultType": "generated",
    "semanticType": "score",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'%-]*( [A-Za-z0-9][A-Za-z0-9'%-]*){2,}[.!?]?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9790,
    "headerPatterns": [
      {
        "regExp": "(?i).*(feedback|review|issue|message).*(text|comments?|description|body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback_text"
        ],
        "negativeExamples": [
          "product_id"
        ]
      },
      {
        "regExp": "(?i).*(comments?|notes?|remarks?|message).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "review_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|remark|note|msg).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_desc"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(free[_ ]?text|long[_ ]?text|text[_ ]?value|body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "response_body"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_text"
        ],
        "negativeExamples": [
          "status_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Great service and friendly staff.",
      "The package arrived on time and in perfect condition.",
      "Please process the refund as soon as possible.",
      "I experienced a delay during checkout on mobile.",
      "Overall, the interface feels intuitive and responsive.",
      "Could you provide more details about the warranty?",
      "This was an excellent experience from start to finish.",
      "The color is vibrant, but the size runs a bit small."
    ],
    "negativeContentExamples": [
      "Great service!",
      "OK",
      "N/A",
      "12345",
      "A+",
      "invoice-2023-08",
      "Very good",
      "Yes"
    ],
    "positiveHeaderExamples": [
      "customer_feedback_text",
      "review_comments",
      "issue_description",
      "public_notes",
      "support_message",
      "user_remarks",
      "response_body",
      "long_text"
    ],
    "negativeHeaderExamples": [
      "comment_count",
      "message_id",
      "description_code",
      "text_length",
      "notes_flag",
      "score",
      "rating",
      "status_code"
    ],
    "explanation": "This semantic type targets free-form natural language fields such as comments, notes, feedback, and descriptions. It is intentionally broad and relies on multi-word structures typical of human-written text, with header patterns oriented around common text-bearing column names.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:06.253861"
  },
  {
    "resultType": "generated",
    "semanticType": "number",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier may contain uppercase letters, digits, and common separators such as hyphen, underscore, slash, period, or hash, and is intended to be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z0-9]{4,20}|[A-Z0-9]{1,10}([\\-_.#/][A-Z0-9]{1,10}){1,5})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9630,
    "headerPatterns": [
      {
        "regExp": "(?i).*(record|entity|object).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_number"
        ],
        "negativeExamples": [
          "record_id"
        ]
      },
      {
        "regExp": "(?i).*(reference|ref).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ref_number"
        ],
        "negativeExamples": [
          "reference_code"
        ]
      },
      {
        "regExp": "(?i).*(id|identifier|uid).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "identifier_number"
        ],
        "negativeExamples": [
          "user_id"
        ]
      },
      {
        "regExp": "(?i).*(unique|external|internal).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unique_record_number"
        ],
        "negativeExamples": [
          "external_id"
        ]
      },
      {
        "regExp": "(?i).*(number|num).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "model_num"
        ],
        "negativeExamples": [
          "count"
        ]
      }
    ],
    "positiveContentExamples": [
      "INV-2024-000123",
      "CUST_00123",
      "A-19Z7",
      "ID#A12B3",
      "OBJ-1A2B-3C",
      "REF/2020-ABCD",
      "X9Z7",
      "ACCT.2023-77"
    ],
    "negativeContentExamples": [
      "INV 2024 000123",
      "cust-00123",
      "ID:A12B3",
      "REF-",
      "12345678901234567890123456789012345678901234567890",
      "A--123",
      "1_",
      "AB/CD\\EF"
    ],
    "positiveHeaderExamples": [
      "record_number",
      "entity_number",
      "ref_number",
      "reference_number",
      "identifier_number",
      "id_number",
      "unique_record_number",
      "model_num"
    ],
    "negativeHeaderExamples": [
      "record_id",
      "ref_id",
      "reference_code",
      "model_code",
      "entity_name",
      "seq_no",
      "user_id",
      "invoice_seq"
    ],
    "explanation": "IDENTITY.NUMBER captures compact, structured identifiers used as record, object, or reference numbers. It matches uppercase alphanumeric tokens separated by hyphen, underscore, slash, period, or hash, avoids spaces and trailing separators, and is bounded in length to reduce collisions with free text or simple numeric fields. Use this to identify generic unique IDs when no specific standard or code list applies.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:07.435536"
  },
  {
    "resultType": "generated",
    "semanticType": "species",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']+( ([A-Za-z0-9][A-Za-z0-9'()\\-]{1,})){1,}[.!?]?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9640,
    "headerPatterns": [
      {
        "regExp": "(?i).*species.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "species_description"
        ],
        "negativeExamples": [
          "species_id"
        ]
      },
      {
        "regExp": "(?i).*species.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "species_notes"
        ],
        "negativeExamples": [
          "species_code"
        ]
      },
      {
        "regExp": "(?i).*species.*(text|details|comment).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "species_details"
        ],
        "negativeExamples": [
          "species_count"
        ]
      },
      {
        "regExp": "(?i).*species.*info.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "species_info"
        ],
        "negativeExamples": [
          "genus"
        ]
      },
      {
        "regExp": "(?i).*species.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "species"
        ],
        "negativeExamples": [
          "taxon"
        ]
      }
    ],
    "positiveContentExamples": [
      "Large herbivorous mammal native to Africa and Asia.",
      "An evergreen conifer commonly found in boreal forests.",
      "Found in shallow coastal waters; feeds on small fish.",
      "Brightly colored passerine with a melodious song.",
      "Homo sapiens is a primate species with advanced cognition.",
      "Panthera leo (African lion) observed in savanna habitats.",
      "Red maple with distinctive lobed leaves.",
      "Common house sparrow nesting near urban areas."
    ],
    "negativeContentExamples": [
      "lion",
      "Homo_sapiens",
      "P. leo",
      "Panthera-leo",
      "SP-001",
      "12345",
      "Unknown",
      "H. sapiens"
    ],
    "positiveHeaderExamples": [
      "species_description",
      "species_notes",
      "species_text",
      "species_details",
      "description_species",
      "species_info",
      "species_comment",
      "species_summary"
    ],
    "negativeHeaderExamples": [
      "species_id",
      "species_code",
      "species_count",
      "genus",
      "taxon",
      "specimen_number",
      "common_name",
      "habitat"
    ],
    "explanation": "This semantic type is intended to identify free-form, human-readable text fields associated with species-related columns, such as descriptions, notes, and narrative observations. The regex favors natural language by requiring at least two space-separated words composed primarily of letters (with allowance for digits, apostrophes, parentheses, and hyphens), reducing collisions with codes and single-token identifiers. Header patterns progress from specific descriptors (description, notes) to the primitive term \"species\" to guide column-level matching while minimizing overlap with coded or numeric fields. The high threshold and lower precedence ensure it does not overtake more specific structured types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:07.850620"
  },
  {
    "resultType": "generated",
    "semanticType": "version",
    "description": "This type represents a software or data version identifier consisting of two to four numeric components separated by dots or underscores (for example, 1.2, 1.2.3, 2_0), optionally prefixed by v or r, and optionally followed by a hyphenated pre-release tag and/or a + build metadata segment. The identifier can contain letters, numbers, and common symbols within these constrained segments and should be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "\\b([vVrR]\\s*)?(\\d+)(([._]\\d+){1,3})((-([A-Za-z0-9]+)(\\.[A-Za-z0-9]+){0,2}))?((\\+([A-Za-z0-9]+)(\\.[A-Za-z0-9]+){0,2}))?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9600,
    "headerPatterns": [
      {
        "regExp": "(?i).*app[_ ]?version.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "app_version"
        ],
        "negativeExamples": [
          "app_id"
        ]
      },
      {
        "regExp": "(?i).*(software|api|schema|db|build)[_ -]?version.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "api_version"
        ],
        "negativeExamples": [
          "software_name"
        ]
      },
      {
        "regExp": "(?i).*version[_ -]?(number|num|id).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "version_number"
        ],
        "negativeExamples": [
          "customer_number"
        ]
      },
      {
        "regExp": "(?i).*\\bver(s)?([_ -]?(no|num|id))?.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "ver_num"
        ],
        "negativeExamples": [
          "revenue"
        ]
      },
      {
        "regExp": "(?i).*version.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "version"
        ],
        "negativeExamples": [
          "release"
        ]
      }
    ],
    "positiveContentExamples": [
      "1.0.0",
      "v2.1",
      "3.4.5-rc1",
      "2.0-beta",
      "1.0.0+build.7",
      "2021.10",
      "r1.2.3",
      "1_2_3"
    ],
    "negativeContentExamples": [
      "1..2",
      "v.1",
      ".1.2.3",
      "v1 2 3",
      "1-2-3",
      "2021/10",
      "v1_",
      "1._2"
    ],
    "positiveHeaderExamples": [
      "app_version",
      "api_version",
      "version_number",
      "schema_version",
      "build_version",
      "software_version",
      "db_version",
      "ver_num"
    ],
    "negativeHeaderExamples": [
      "application_id",
      "api_key",
      "software_name",
      "schema_id",
      "build_date",
      "customer_number",
      "revenue",
      "release"
    ],
    "explanation": "Use this semantic type to detect standardized version identifiers such as semantic versions and similar version-like strings used for software releases, APIs, schemas, and datasets. It recognizes common prefixes (v, r), dot/underscore-separated numeric components, and optional pre-release and build metadata segments, while avoiding generic numeric values and unrelated identifiers.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:09.098350"
  },
  {
    "resultType": "generated",
    "semanticType": "age",
    "description": "This type captures individual ages as they appear in demographic data, personal records, and age-related analysis using numerical year values. The values represent current age in completed years without fractional components, typically ranging from birth to advanced elderly ages.",
    "pluginType": "regex",
    "regexPattern": "\\b(0|[1-9][0-9]?|1[01][0-9]|120)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9500,
    "headerPatterns": [
      {
        "regExp": "(?i).*current.*age.*years.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "current_age_years"
        ],
        "negativeExamples": [
          "current_age_months"
        ]
      },
      {
        "regExp": "(?i).*age.*in.*years.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "age_in_years"
        ],
        "negativeExamples": [
          "age_in_months"
        ]
      },
      {
        "regExp": "(?i).*(person|customer|user|patient|employee).*age.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "person_age"
        ],
        "negativeExamples": [
          "age_estimate"
        ]
      },
      {
        "regExp": "(?i).*age.*(yrs|yr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "age_yrs"
        ],
        "negativeExamples": [
          "age_mo"
        ]
      },
      {
        "regExp": "(?i).*age.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "age"
        ],
        "negativeExamples": [
          "birth_year"
        ]
      },
      {
        "regExp": "(?i).*(number|num).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "age_number"
        ],
        "negativeExamples": [
          "record_count"
        ]
      }
    ],
    "positiveContentExamples": [
      "0",
      "1",
      "7",
      "12",
      "18",
      "35",
      "99",
      "120"
    ],
    "negativeContentExamples": [
      "-1",
      "121",
      "3.5",
      "18 years",
      "age 18",
      "018",
      "120.0",
      "+20"
    ],
    "positiveHeaderExamples": [
      "age",
      "age_years",
      "current_age_years",
      "age_in_years",
      "person_age",
      "user_age_num",
      "customer_age_number",
      "age_yrs"
    ],
    "negativeHeaderExamples": [
      "birth_year",
      "years_old",
      "service_years",
      "tenure_years",
      "dob",
      "birthdate",
      "months_old",
      "customer_id"
    ],
    "explanation": "Captures integer ages expressed in whole years for individuals, suitable for demographic and profiling analyses. The pattern accepts 0\u2013120 with no signs, decimals, or unit text, and disallows leading zeros except for the single value 0. Use this type for columns that store a person\u2019s current age as a clean integer value.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:10.236692"
  },
  {
    "resultType": "generated",
    "semanticType": "tag",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019]*([ \\t]+[A-Za-z][A-Za-z0-9'\u2019]*)+\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9830,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|issue|order|ticket|record).*(comment|description|message|notes|feedback|review).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(public|internal|free|user).*(text|notes|comment|message).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(description|comments|comment|message|notes|feedback|review).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "issue_status"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmt|msg|fb|rvw).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "prod_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "review_text"
        ],
        "negativeExamples": [
          "postal_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached report",
      "Customer reported intermittent connection drops",
      "Order processed successfully on Monday",
      "Unexpected error occurred during checkout",
      "This feature request should be prioritized",
      "Thank you for your prompt assistance",
      "Payment pending due to verification",
      "The system reboot fixed the issue"
    ],
    "negativeContentExamples": [
      "Pending",
      "ERR-404",
      "john.doe@example.com",
      "http://example.com",
      "SKU_12345",
      "12345 67890",
      "2024-10-01",
      "Yes/No"
    ],
    "positiveHeaderExamples": [
      "comment",
      "comments",
      "issue_description",
      "customer_feedback",
      "review_text",
      "notes",
      "message",
      "product_desc"
    ],
    "negativeHeaderExamples": [
      "status",
      "id",
      "email",
      "url",
      "country_code",
      "amount",
      "timestamp",
      "quantity"
    ],
    "explanation": "The 'tag' semantic type targets free-form, human-readable text fields that are not constrained to fixed formats, such as comments, descriptions, notes, messages, and reviews. It uses a conservative pattern requiring at least two whitespace-separated word tokens beginning with letters, helping distinguish narrative text from codes, single tokens, URLs, emails, or identifiers.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:10.277863"
  },
  {
    "resultType": "generated",
    "semanticType": "elevation",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}([ ,.;:!?-][A-Za-z]{2,}){1,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9800,
    "headerPatterns": [
      {
        "regExp": "(?i).*elevation.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "elevation_description"
        ],
        "negativeExamples": [
          "elevation_meters"
        ]
      },
      {
        "regExp": "(?i).*(elevation|elev).*(notes|remarks|text).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "elev_remarks"
        ],
        "negativeExamples": [
          "elev_code"
        ]
      },
      {
        "regExp": "(?i).*(altitude|alt).*(description|notes|details).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "altitude_notes"
        ],
        "negativeExamples": [
          "altitude_m"
        ]
      },
      {
        "regExp": "(?i).*(elevation|altitude).*(details|info|summary).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "terrain_elevation_details"
        ],
        "negativeExamples": [
          "terrain_elevation_max"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "identifier"
        ]
      }
    ],
    "positiveContentExamples": [
      "High elevation with frequent snowfall",
      "Located on a plateau above the valley",
      "Moderate altitude conditions throughout the year",
      "Area sits well above sea level",
      "Low elevation near coastal plain",
      "Ridge rises steeply from surrounding terrain",
      "Approximately two thousand meters above baseline",
      "Mountain site at considerable height"
    ],
    "negativeContentExamples": [
      "1200 m",
      "elev-1200",
      "mountainous",
      "sea-level",
      "approx. 1200m",
      "m 1200",
      "ELEV1000",
      "3000 feet"
    ],
    "positiveHeaderExamples": [
      "elevation_description",
      "elevation_notes",
      "site_elevation_text",
      "terrain_elevation_details",
      "altitude_notes",
      "elev_remarks",
      "elevation_info"
    ],
    "negativeHeaderExamples": [
      "elevation_meters",
      "elevation_ft",
      "height_m",
      "altitude_m",
      "min_elev",
      "gps_altitude",
      "elev_code",
      "elevation_id"
    ],
    "explanation": "This semantic type is intended to detect free-text descriptive fields related to elevation/altitude, where values are natural language phrases or sentences rather than structured numeric measurements or codes. It uses a conservative regex requiring at least two alphabetic words with common separators, avoiding matches to purely numeric or code-like tokens. The header patterns prioritize columns explicitly labeled as elevation descriptions, notes, or details, with a final primitive pattern for generic descriptions to support fallback identification.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:13.867648"
  },
  {
    "resultType": "generated",
    "semanticType": "publisher",
    "description": "This represents the complete corporate name including any legal suffixes such as Corporation, Inc., LLC, or Ltd. The name typically includes proper capitalization and may contain multiple words, punctuation, and legal designations but excludes stock symbols or abbreviations.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][A-Za-z0-9'&\\-]*( [A-Za-z&\\-][A-Za-z0-9'&\\-]*){0,8}(, )?(Corporation|Corp|Corp\\.|Company|Co|Co\\.|Incorporated|Inc|Inc\\.|LLC|L\\.L\\.C|L\\.L\\.C\\.|Ltd|Ltd\\.|Limited|PLC|LLP|LLP\\.)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9750,
    "headerPatterns": [
      {
        "regExp": "(?i).*publisher.*corporate.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publisher_corporate_name"
        ],
        "negativeExamples": [
          "publisher_id"
        ]
      },
      {
        "regExp": "(?i).*(publisher|publishing).*company.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publishing_company_name"
        ],
        "negativeExamples": [
          "company_name"
        ]
      },
      {
        "regExp": "(?i).*(publisher|publishing|imprint).*(legal|registered).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publisher_legal_name"
        ],
        "negativeExamples": [
          "publication_name"
        ]
      },
      {
        "regExp": "(?i).*(publisher|publishing|imprint).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publisher_name"
        ],
        "negativeExamples": [
          "author_name"
        ]
      },
      {
        "regExp": "(?i).*(pub|publ).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "pub_name"
        ],
        "negativeExamples": [
          "publication_name"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "Penguin Random House LLC",
      "O'Reilly Media, Inc.",
      "HarperCollins Publishers Ltd",
      "Simon & Schuster, Inc.",
      "Pearson Education Limited",
      "Hachette Book Group, LLC",
      "John Wiley & Sons, Inc.",
      "Macmillan Publishers Ltd."
    ],
    "negativeContentExamples": [
      "Penguin Random House",
      "Simon & Schuster",
      "Pearson PLC Class A",
      "O'Reilly Media Inc (US)",
      "HarperCollins Ltd (NYSE: HCP)",
      "wiley & sons, inc.",
      "Acme Publishing Group",
      "Penguin Random House, Incorporated Europe"
    ],
    "positiveHeaderExamples": [
      "publisher_corporate_name",
      "publisher_company_name",
      "publisher_legal_name",
      "publisher_name",
      "publishing_company_name",
      "imprint_name",
      "pub_name",
      "corporate_publisher_name"
    ],
    "negativeHeaderExamples": [
      "author_name",
      "publication_name",
      "publisher_id",
      "publisher_code",
      "company_name",
      "title",
      "book_name",
      "date"
    ],
    "explanation": "Identifies corporate publisher names that include a legal suffix (e.g., Inc., LLC, Ltd, Corporation). The regex expects a properly capitalized multi-word organization name, optionally a comma before the suffix, and disallows trailing stock symbols or extra qualifiers after the legal suffix. Useful for classifying columns containing legal publisher names rather than generic organization labels or IDs.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:17.012880"
  },
  {
    "resultType": "generated",
    "semanticType": "reference",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier may include letters, digits, and common separators such as hyphen, underscore, slash, or dot, and is expected to be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z]{1,6}\\d[A-Z0-9]{0,10}([\\-_/\\.][A-Z0-9]{1,12}){0,3}\\b|\\b[A-Z0-9]{1,6}[\\-_/\\.]\\d[A-Z0-9]{0,7}([\\-_/\\.][A-Z0-9]{1,12}){0,2}\\b|\\b[A-Z0-9]{1,6}[\\-_/\\.][A-Z]{1,8}[\\-_/\\.]\\d[A-Z0-9]{0,11}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9650,
    "headerPatterns": [
      {
        "regExp": "(?i).*(order|invoice|customer|external).*reference.*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_reference_code"
        ],
        "negativeExamples": [
          "order_id_code"
        ]
      },
      {
        "regExp": "(?i).*(order|invoice|customer|external).*reference.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_reference"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(ref[_\\- ]?code|reference[_\\- ]?id|xref).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ref_code"
        ],
        "negativeExamples": [
          "refrigerator_code"
        ]
      },
      {
        "regExp": "(?i).*(record|entity).*reference.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_reference"
        ],
        "negativeExamples": [
          "record_number"
        ]
      },
      {
        "regExp": "(?i).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "code"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "REF-00123",
      "A123",
      "X9-2024-AB",
      "PO_000123",
      "AB12_34",
      "CUST.9876-B",
      "R/2023/00045",
      "PRJ-ALPHA-01"
    ],
    "negativeContentExamples": [
      "REF",
      "123456",
      "AB-CD",
      "INV--123",
      "AB_",
      "PRJ-ALPHA",
      "A-B-C",
      "ref#123"
    ],
    "positiveHeaderExamples": [
      "order_reference_code",
      "customer_reference",
      "ref_code",
      "external_reference",
      "xref",
      "reference_id",
      "record_reference",
      "internal_reference_code"
    ],
    "negativeHeaderExamples": [
      "order_id",
      "invoice_number",
      "reference_date",
      "product_sku",
      "transaction_id",
      "status_code",
      "postal_code",
      "account_number"
    ],
    "explanation": "Reference codes are often used to link or look up records across systems, such as order references, customer references, or cross-references. This type focuses on compact alphanumeric identifiers that may include common separators and typically include at least one digit, making them suitable for classifying general-purpose reference codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:18.824189"
  },
  {
    "resultType": "generated",
    "semanticType": "series",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']{1,}([,.;:!?-]*[ \\t]+[A-Za-z0-9'][A-Za-z0-9']{1,})+",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9770,
    "headerPatterns": [
      {
        "regExp": "(?i).*series.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "series_description"
        ],
        "negativeExamples": [
          "series_id"
        ]
      },
      {
        "regExp": "(?i).*series.*(summary|narrative|overview|abstract).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "series_summary"
        ],
        "negativeExamples": [
          "series_count"
        ]
      },
      {
        "regExp": "(?i).*(long|detailed).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "detailed_description"
        ],
        "negativeExamples": [
          "description_length"
        ]
      },
      {
        "regExp": "(?i).*(notes|comments|remark|free[ _]text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "dataset"
        ]
      }
    ],
    "positiveContentExamples": [
      "The project aims to streamline internal workflows across departments.",
      "Customer reported intermittent connectivity issues after the update.",
      "An elegant, minimalist design with durable materials and a matte finish.",
      "Payment was processed successfully, but the confirmation email never arrived.",
      "This dataset includes daily observations collected during the pilot phase.",
      "Please contact support if the problem persists beyond three business days.",
      "A rich, full-bodied flavor with notes of caramel and dark chocolate.",
      "The committee will review all submissions and announce winners next month."
    ],
    "negativeContentExamples": [
      "Hello",
      "2024-06-01",
      "john.doe@example.com",
      "AB-1234",
      "12345",
      "True",
      "SKU_123",
      "v2.1.0"
    ],
    "positiveHeaderExamples": [
      "series_description",
      "series_summary",
      "narrative_text",
      "detailed_description",
      "customer_notes",
      "free_text",
      "general_comments",
      "remarks"
    ],
    "negativeHeaderExamples": [
      "series_id",
      "sku_code",
      "record_number",
      "birth_date",
      "email_address",
      "ip_address",
      "country_code",
      "amount"
    ],
    "explanation": "This semantic type represents free-form, human-readable text fields intended for narrative content rather than structured identifiers or codes. Typical uses include descriptions, notes, comments, summaries, and other natural language entries. The detection pattern requires at least two word-like tokens separated by whitespace (optionally with punctuation), which helps distinguish genuine text from single tokens, codes, or formatted identifiers.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:19.097720"
  },
  {
    "resultType": "generated",
    "semanticType": "end",
    "description": "This type captures Unix timestamp values expressed in seconds precision for standard time measurement and system operations. The values represent time as an integer count of seconds from the Unix epoch without any formatting, separators, or textual date components.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9][0-9]{8,9}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 9690,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unix).*(timestamp|time).*(sec|seconds).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "unix_time_sec"
        ],
        "negativeExamples": [
          "unix_timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(seconds|secs).*since.*epoch.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "seconds_since_epoch"
        ],
        "negativeExamples": [
          "milliseconds_since_epoch"
        ]
      },
      {
        "regExp": "(?i).*(epoch|unix).*(timestamp|time).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "epoch_time"
        ],
        "negativeExamples": [
          "timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(ts|tstamp).*(sec|secs).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "ts_sec"
        ],
        "negativeExamples": [
          "ts_ms"
        ]
      },
      {
        "regExp": "(?i).*date.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "date"
        ],
        "negativeExamples": [
          "time"
        ]
      }
    ],
    "positiveContentExamples": [
      "315532800",
      "631152000",
      "946684800",
      "1104537600",
      "1262304000",
      "1451606400",
      "1609459200",
      "2147483647"
    ],
    "negativeContentExamples": [
      "1609459200000",
      "1609459200.0",
      "-315532800",
      "0812345678",
      "99999999",
      "17000000000",
      "1,609,459,200",
      "1609459200Z"
    ],
    "positiveHeaderExamples": [
      "unix_timestamp",
      "unix_time_sec",
      "seconds_since_epoch",
      "epoch_seconds",
      "timestamp_epoch",
      "created_unix",
      "epoch_time",
      "ts_sec"
    ],
    "negativeHeaderExamples": [
      "unix_timestamp_ms",
      "milliseconds_since_epoch",
      "timestamp_ms",
      "created_at",
      "datetime",
      "time",
      "epoch_nanos",
      "duration_seconds"
    ],
    "explanation": "This semantic type identifies integer Unix timestamps with seconds precision, restricted to 9\u201310 digit positive integers without separators or text. It intentionally excludes milliseconds/microseconds (13+ digits), negatives, fractional values, and values with formatting or suffixes to avoid false positives.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:20.753372"
  },
  {
    "resultType": "generated",
    "semanticType": "price",
    "description": "Monetary price amounts represented with currency symbols or 3-letter currency codes, with optional thousands separators and optional two decimal places. Supports negative amounts via a leading minus sign or surrounding parentheses, and currency codes/symbols placed before or after the number.",
    "pluginType": "regex",
    "regexPattern": "\\(\\s*(([A-Z]{3}\\s+[$\u20ac\u00a3]?)|[$\u20ac\u00a3])?\\s*((\\d{1,3}(,\\d{3})+)|\\d+)(\\.\\d{2})?\\s*\\)|\\b-?\\s*(([A-Z]{3}\\s+)?[$\u20ac\u00a3]|[A-Z]{3}\\s+)\\s*((\\d{1,3}(,\\d{3})+)|\\d+)(\\.\\d{2})?\\b|\\b-?\\s*((\\d{1,3}(,\\d{3})+)|\\d+)(\\.\\d{2})?\\s*[A-Z]{3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9510,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unit|list|sale|retail|wholesale|purchase)[ _-]*price.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unit_price"
        ],
        "negativeExamples": [
          "unit_cost"
        ]
      },
      {
        "regExp": "(?i).*(pricing|cost)[ _-]*(amount|amt|value|price).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "pricing_amount"
        ],
        "negativeExamples": [
          "discount_amount"
        ]
      },
      {
        "regExp": "(?i).*(msrp|rrp|prc|price[ _-]*amt).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "msrp"
        ],
        "negativeExamples": [
          "prod_code"
        ]
      },
      {
        "regExp": "(?i).*price.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "total_price"
        ],
        "negativeExamples": [
          "total_cost"
        ]
      },
      {
        "regExp": "(?i).*(number|num).*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "price_number"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      }
    ],
    "positiveContentExamples": [
      "$12.99",
      "USD 75.50",
      "\u20ac1,234.56",
      "(1,250.00)",
      "1,000.00 USD",
      "-\u00a342.00",
      "CAD 0.00",
      "$1,200"
    ],
    "negativeContentExamples": [
      "15%",
      "1234",
      "1.234,56",
      "USD75",
      "EUR 12,34",
      "$12.9",
      "\u00a3-42.00",
      "1 234,56 USD"
    ],
    "positiveHeaderExamples": [
      "unit_price",
      "sale_price",
      "list_price",
      "retail_price",
      "price_amount",
      "msrp",
      "rrp",
      "total_price"
    ],
    "negativeHeaderExamples": [
      "unit_cost",
      "discount_percent",
      "quantity",
      "tax_rate",
      "currency_code",
      "total_amount",
      "customer_name",
      "invoice_number"
    ],
    "explanation": "This semantic type identifies monetary price values that include a currency cue (symbol like $, \u20ac, \u00a3 or a 3-letter currency code), with support for common formatting such as thousands separators, optional two decimal places, negatives via minus sign or parentheses, and codes positioned before or after the numeric value. It avoids matching generic numeric fields that lack currency cues to reduce ambiguity with plain quantities or identifiers.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:23.942390"
  },
  {
    "resultType": "generated",
    "semanticType": "percentage",
    "description": "Captures numeric percentage values represented with a percent symbol. Accepts optional sign, optional space before the % symbol, and integer or decimal forms using dot or comma as the decimal separator. Excludes word-based expressions like 'percent' without the % symbol and non-numeric strings.",
    "pluginType": "regex",
    "regexPattern": "\\b[+-]?\\d{1,4}([.,]\\d{1,3})?\\s?%\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9860,
    "headerPatterns": [
      {
        "regExp": "(?i).*(conversion|discount|churn|growth|win).*(percentage|percent|pct).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "discount_percentage"
        ],
        "negativeExamples": [
          "discount_amount"
        ]
      },
      {
        "regExp": "(?i).*(rate|ratio).*(percentage|percent|pct).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "interest_rate_percent"
        ],
        "negativeExamples": [
          "interest_rate"
        ]
      },
      {
        "regExp": "(?i).*(pct|pctg|perc|pcnt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "conversion_pct"
        ],
        "negativeExamples": [
          "conversion_count"
        ]
      },
      {
        "regExp": "(?i).*(percent|percentage).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "percent_of_total"
        ],
        "negativeExamples": [
          "average_score"
        ]
      },
      {
        "regExp": "(?i).*(number|num).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "result_number"
        ],
        "negativeExamples": [
          "result_value"
        ]
      }
    ],
    "positiveContentExamples": [
      "45%",
      "12.5%",
      "0%",
      "100%",
      "3%",
      "75 %",
      "-2.5%",
      "12,5%"
    ],
    "negativeContentExamples": [
      "45",
      "45%%",
      "12.%",
      "12,",
      "100.0000%",
      "1/2%",
      "fifty%",
      "12.5 percent"
    ],
    "positiveHeaderExamples": [
      "discount_percentage",
      "conversion_pct",
      "interest_rate_percent",
      "growth_percentage_qoq",
      "churn_pct",
      "percent_of_total",
      "win_rate_pct",
      "utilization_percentage"
    ],
    "negativeHeaderExamples": [
      "discount_amount",
      "conversion_count",
      "interest_rate",
      "growth_rate_value",
      "total_number",
      "ratio_value",
      "average_score",
      "customer_name"
    ],
    "explanation": "This semantic type identifies data values that are numeric percentages denoted with a % symbol. It is useful for fields like growth rates, discount percentages, conversion rates, and utilization percentages across analytics, finance, and reporting datasets. The pattern is constrained to avoid overbroad matches by requiring a numeric token and the percent symbol, allowing a limited decimal precision and optional whitespace before the symbol.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:31.804716"
  },
  {
    "resultType": "generated",
    "semanticType": "period",
    "description": "This type identifies quarterly period designations as they appear in business reporting, financial analysis, and temporal data organization. The values represent standardized quarter indicators using common abbreviations to denote three-month periods within annual business or calendar cycles.",
    "pluginType": "regex",
    "regexPattern": "\\b((Q[1-4]|QTR[ -]?[1-4]|QUARTER[ -]?[1-4])\\s*(FY\\s*)?('?\\d{2}|\\d{4})|((FY\\s*)?('?\\d{2}|\\d{4})\\s*[-/ ]\\s*(Q[1-4]|QTR[ -]?[1-4]|QUARTER[ -]?[1-4])))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9820,
    "headerPatterns": [
      {
        "regExp": "(?i).*(fiscal|fy).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fiscal_quarter"
        ],
        "negativeExamples": [
          "fiscal_year"
        ]
      },
      {
        "regExp": "(?i).*(reporting|accounting).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "reporting_quarter"
        ],
        "negativeExamples": [
          "reporting_month"
        ]
      },
      {
        "regExp": "(?i).*quarter.*period.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "quarter_period"
        ],
        "negativeExamples": [
          "billing_period"
        ]
      },
      {
        "regExp": "(?i).*(fyq|fq|qtr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fy_qtr"
        ],
        "negativeExamples": [
          "qty"
        ]
      },
      {
        "regExp": "(?i).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "quarter_label"
        ],
        "negativeExamples": [
          "month_name"
        ]
      }
    ],
    "positiveContentExamples": [
      "Q1 2023",
      "Q4-2020",
      "2021 Q3",
      "FY2022 Q2",
      "Q3 FY2024",
      "2023/Q1",
      "QTR 2 2025",
      "QUARTER 4 2019"
    ],
    "negativeContentExamples": [
      "Q5 2023",
      "Q0 2023",
      "Q1 '2",
      "2023 Q1A",
      "FY20Q3",
      "2023/Q5",
      "Q 1 2023",
      "Quarter five 2023"
    ],
    "positiveHeaderExamples": [
      "fiscal_quarter",
      "reporting_quarter",
      "quarter_period",
      "fy_qtr",
      "qtr",
      "quarter_label",
      "accounting_quarter"
    ],
    "negativeHeaderExamples": [
      "fiscal_year",
      "reporting_month",
      "billing_period",
      "qty",
      "month_name",
      "quarterback",
      "code"
    ],
    "explanation": "Quarterly period labels are commonly used to tag records with a fiscal or calendar quarter and year, enabling grouping and time-series analysis (e.g., Q1 2023, FY2022 Q2). This type focuses on recognizable quarter tokens (Q1\u2013Q4, QTR, QUARTER) paired with a 2- or 4-digit year, optionally with a fiscal year prefix. The regex is structured with word boundaries and explicit tokens to avoid over-broad matches while accommodating typical separators and formats.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:31.804934"
  },
  {
    "resultType": "generated",
    "semanticType": "route",
    "description": "This type captures full English street names including both the identifying name and the street type suffix for addressing and navigation purposes. The values represent complete street designations using proper English spelling, capitalization, and standard type markers such as Street, Avenue, or Road.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+(-[A-Z][a-z]+)?( [A-Z][a-z]+(-[A-Z][a-z]+)?){0,3}) (Street|Avenue|Road|Boulevard|Drive|Lane|Court|Place|Terrace|Way|Circle|Parkway|Square|Trail|Highway|Route)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9680,
    "headerPatterns": [
      {
        "regExp": "(?i).*(street|road|avenue|boulevard|drive|lane|court|place|terrace|way|circle|parkway|square|trail|highway).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "street_name"
        ],
        "negativeExamples": [
          "route_number"
        ]
      },
      {
        "regExp": "(?i).*(route|street).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "route_name"
        ],
        "negativeExamples": [
          "address_line1"
        ]
      },
      {
        "regExp": "(?i).*(st|rd|ave|blvd|dr|ln|ct|pl|ter|wy|cir|pkwy|sq|trl|hwy).*name.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "st_name"
        ],
        "negativeExamples": [
          "route_id"
        ]
      },
      {
        "regExp": "(?i).*(street|road|avenue|boulevard|drive|lane|court|place|terrace|way|circle|parkway|square|trail|highway).*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "street"
        ],
        "negativeExamples": [
          "city"
        ]
      },
      {
        "regExp": "(?i).*route.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "route"
        ],
        "negativeExamples": [
          "postal_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Maple Street",
      "Oak Avenue",
      "Pine Road",
      "Martin Luther King Boulevard",
      "River Drive",
      "Meadow Lane",
      "Blue-Green Way",
      "Grand Parkway"
    ],
    "negativeContentExamples": [
      "123 Main Street",
      "Main St",
      "MAIN STREET",
      "Main street",
      "Main Street Apt 2",
      "5th Avenue",
      "Elm Rd",
      "Avenue of the Americas"
    ],
    "positiveHeaderExamples": [
      "street_name",
      "road_name",
      "route_name",
      "full_street_name",
      "street",
      "avenue_name",
      "primary_street",
      "st_name"
    ],
    "negativeHeaderExamples": [
      "address",
      "address_line1",
      "city",
      "state",
      "postal_code",
      "route_number",
      "highway_code",
      "route_id",
      "street_number"
    ],
    "explanation": "SPATIAL.route identifies full English street names comprising the proper-cased name tokens followed by a spelled-out street type suffix (e.g., Street, Avenue, Road). It is useful for classifying columns that store the street route component of an address without house numbers or unit information, enabling cleaner address parsing and geocoding.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:34.278703"
  },
  {
    "resultType": "generated",
    "semanticType": "abbreviation",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']{2,}([ \\t]+[A-Za-z0-9][A-Za-z0-9'()&,%#:/\\-.]{1,}){1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9570,
    "headerPatterns": [
      {
        "regExp": "(?i).*(free[ _-]?text|long[ _-]?text|detailed[ _-]?description).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "customer_free_text"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*support.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "support_ticket_description"
        ],
        "negativeExamples": [
          "support_ticket_id"
        ]
      },
      {
        "regExp": "(?i).*(description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(comments|comment|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "agent_comments"
        ],
        "negativeExamples": [
          "agent_number"
        ]
      },
      {
        "regExp": "(?i).*(desc|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "short_desc"
        ],
        "negativeExamples": [
          "discount_rate"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached document and provide feedback.",
      "Order delayed due to weather conditions in the region.",
      "Customer reported intermittent connectivity issues today.",
      "This item shows minor signs of wear and tear.",
      "Meeting rescheduled to next Thursday afternoon.",
      "Use gentle cycle and cold water when washing.",
      "Payment received and applied to the outstanding balance.",
      "The system will undergo maintenance this weekend."
    ],
    "negativeContentExamples": [
      "ASAP",
      "N/A",
      "Q4 FY25",
      "A-19",
      "http://example.com",
      "12345",
      "OK",
      "SKU123-45"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "case_notes",
      "user_comments",
      "free_text",
      "long_text",
      "ticket_description",
      "additional_details",
      "short_desc"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "customer_name",
      "discount_rate",
      "transaction_date",
      "support_ticket_id",
      "order_number",
      "note_id",
      "status_code"
    ],
    "explanation": "This semantic type is intended to identify free-form, natural language text fields such as descriptions, comments, notes, and other narrative entries. It targets multi-word human-readable content and avoids short codes, identifiers, or single-token values. Typical use cases include product descriptions, support ticket narratives, internal comments, and any field meant for unstructured user-entered text.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:34.489854"
  },
  {
    "resultType": "generated",
    "semanticType": "abstract",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9]*([-'][A-Za-z0-9]+)*([ \\t][A-Za-z][A-Za-z0-9]*([-'][A-Za-z0-9]+)*){11,}[.!?]\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9840,
    "headerPatterns": [
      {
        "regExp": "(?i).*(paper|article|manuscript).*abstract.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "article_abstract"
        ],
        "negativeExamples": [
          "article_summary"
        ]
      },
      {
        "regExp": "(?i).*(project|study|report).*abstract.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_abstract_text"
        ],
        "negativeExamples": [
          "project_description"
        ]
      },
      {
        "regExp": "(?i).*(exec|executive|short).*summary.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "executive_summary"
        ],
        "negativeExamples": [
          "executive_overview"
        ]
      },
      {
        "regExp": "(?i).*(abstract|summary).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abstract_text"
        ],
        "negativeExamples": [
          "sms_text"
        ]
      },
      {
        "regExp": "(?i).*\\babs\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abs"
        ],
        "negativeExamples": [
          "abstract_status"
        ]
      },
      {
        "regExp": "(?i).*abstract.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abstract"
        ],
        "negativeExamples": [
          "summary"
        ]
      }
    ],
    "positiveContentExamples": [
      "This study investigates how urban green spaces influence mental health outcomes significantly.",
      "We present a novel approach that improves classification accuracy across diverse real world datasets.",
      "The proposed framework reduces processing time while maintaining accuracy and supporting flexible deployment scenarios.",
      "Our findings highlight key limitations in existing methods and suggest directions for future research.",
      "Participants reported increased satisfaction after training and demonstrated improved performance on complex tasks.",
      "This paper analyzes consumer behavior under uncertainty using experimental data from multiple sessions.",
      "We outline the system architecture discuss implementation details and evaluate results on benchmark suites."
    ],
    "negativeContentExamples": [
      "This summary describes methods and results for the preliminary study",
      "We present a method to improve accuracy across several datasets",
      "This study investigates how green spaces influence health outcomes",
      "Our findings highlight key limitations in existing methods today.",
      "Abstract of the report",
      "The approach reduces time and supports flexible deployment",
      "We present preliminary results across domains with detailed analysis, tables, and figures"
    ],
    "positiveHeaderExamples": [
      "article_abstract",
      "paper_abstract_text",
      "project_abstract",
      "study_abstract",
      "executive_summary",
      "abstract_text",
      "abs",
      "report_abstract"
    ],
    "negativeHeaderExamples": [
      "abstracts_count",
      "abstract_flag",
      "abstracted_subject",
      "summary_flag",
      "resume_text",
      "description",
      "notes_count",
      "introduction"
    ],
    "explanation": "Abstract fields usually contain multi-sentence natural language text summarizing a document, study, or project. The detection focuses on paragraph-like content comprising many words and typical sentence-ending punctuation, reducing confusion with short labels, codes, or structured identifiers.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:35.003062"
  },
  {
    "resultType": "generated",
    "semanticType": "length",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9,;:.'\\\"()/&%\\-]* [A-Za-z0-9][A-Za-z0-9,;:.'\\\"()/&%\\-]*( [A-Za-z0-9][A-Za-z0-9,;:.'\\\"()/&%\\-]*)*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9540,
    "headerPatterns": [
      {
        "regExp": "(?i).*long.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_text"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*(customer|user|product).*comments?",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(detailed|long).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "detailed_description"
        ],
        "negativeExamples": [
          "file_description"
        ]
      },
      {
        "regExp": "(?i).*(remarks|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "internal_notes"
        ],
        "negativeExamples": [
          "note_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|summary|message|bio|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_summary"
        ],
        "negativeExamples": [
          "user_status"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver the package to the side door after 5 pm.",
      "This account has been inactive for over a year and requires review.",
      "Customer reported intermittent issues when logging in on mobile.",
      "A quick brown fox jumps over the lazy dog near the riverbank.",
      "Payment was processed successfully, but the receipt email bounced.",
      "Thank you for your feedback; we'll follow up within two business days.",
      "The item arrived damaged; requesting a replacement or refund.",
      "This is a sample paragraph intended to test long-form text fields."
    ],
    "negativeContentExamples": [
      "1234567890 9876543210",
      "HELLO",
      "OK-123",
      "lorem_ipsum",
      "N/A",
      "2024-07-21 10:00",
      "Hello,World",
      "A1B2C3"
    ],
    "positiveHeaderExamples": [
      "long_text",
      "customer_comments",
      "detailed_description",
      "internal_notes",
      "product_summary",
      "user_message",
      "bio",
      "description"
    ],
    "negativeHeaderExamples": [
      "id",
      "status_code",
      "created_date",
      "amount",
      "phone_number",
      "postal_code",
      "latitude",
      "checksum"
    ],
    "explanation": "This semantic type is intended for classification of unstructured, natural language fields such as comments, descriptions, summaries, messages, and similar free-text inputs. It emphasizes multiple-word text with natural punctuation to avoid false positives from codes, identifiers, or purely numeric values. The high threshold and priority ensure it yields to more specific semantic types when applicable while still capturing general narrative text columns.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:35.827494"
  },
  {
    "resultType": "generated",
    "semanticType": "width",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}[A-Za-z0-9,'\";:()\\-\\/&%!?\\.]*\\s+[A-Za-z]{2,}[A-Za-z0-9,'\";:()\\-\\/&%!?\\.]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9870,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|issue|order|customer).*(description|comments|notes|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(long|free|detailed|open).*(text|description|comment|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "detailed_text"
        ],
        "negativeExamples": [
          "long_number"
        ]
      },
      {
        "regExp": "(?i).*(desc|txt|msg|rmk|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "acct_num"
        ]
      },
      {
        "regExp": "(?i).*(narrative|summary|details|body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "incident_summary"
        ],
        "negativeExamples": [
          "exchange_rate"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog.",
      "Customer requested expedited shipping by Friday.",
      "Please review and approve the attached proposal.",
      "This item shows minor signs of wear but functions properly.",
      "Payment received; order will ship within 2 business days.",
      "Meeting rescheduled to next week due to conflicts.",
      "User reports intermittent connectivity issues on Wi-Fi.",
      "Notes: Replace filter quarterly or as needed."
    ],
    "negativeContentExamples": [
      "Hello",
      "N/A",
      "123 456",
      "WIDTH",
      "AB-1234",
      "lorem_ipsum",
      "2025-08-11",
      "ok"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "customer_comments",
      "issue_notes",
      "detailed_text",
      "item_desc",
      "incident_summary",
      "free_text",
      "message_body"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "width",
      "item_count",
      "account_number",
      "file_name",
      "exchange_rate",
      "order_date",
      "id"
    ],
    "explanation": "This semantic type is intended to detect free-form, human-readable text content such as descriptions, comments, summaries, or narratives. It looks for at least two alphabetic word tokens separated by whitespace, allowing common punctuation typically found in natural language text. Use it for columns that store narrative or descriptive fields rather than structured identifiers, codes, or purely numeric data.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:38.935283"
  },
  {
    "resultType": "generated",
    "semanticType": "currency",
    "description": "This type captures the complete names of currencies as they are expressed in English for international financial and economic contexts. The values represent standard currency terminology using proper English names without codes, symbols, or abbreviated forms.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]{3,}( [A-Z][a-z]{2,}){0,4} )?(afghani|ariary|balboa|baht|birr|boliviano|cedi|colon|cordoba|dalasi|denar|dinar|dirham|dobra|dollar|dong|dram|euro|florin|forint|franc|gourde|guarani|hryvnia|kina|kip|koruna|krona|krone|kronor|kwacha|kwanza|lari|leke|lempira|leu|lev|lilangeni|lira|mark|metical|naira|nakfa|ngultrum|ouguiya|paanga|pataca|peso|pound sterling|pound|pula|quetzal|rand|real|riel|riyal|ruble|rupee|shekel|shilling|sol|som|somoni|tenge|tugrik|taka|vatu|won|yen|yuan|zloty)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9780,
    "headerPatterns": [
      {
        "regExp": "(?i).*currency.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "currency full name"
        ],
        "negativeExamples": [
          "currency code"
        ]
      },
      {
        "regExp": "(?i).*currency.*english.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "currency english name"
        ],
        "negativeExamples": [
          "currency local name"
        ]
      },
      {
        "regExp": "(?i).*(currency|curr|ccy).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ccy name"
        ],
        "negativeExamples": [
          "currency symbol"
        ]
      },
      {
        "regExp": "(?i).*(currency|curr|ccy).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "currency"
        ],
        "negativeExamples": [
          "exchange rate"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "United States dollar",
      "Euro",
      "Japanese yen",
      "Pound sterling",
      "Swiss franc",
      "Canadian dollar",
      "Indian rupee",
      "South African rand"
    ],
    "negativeContentExamples": [
      "USD",
      "US dollar",
      "U.S. dollar",
      "Euro (EUR)",
      "Canadian $",
      "Japanese yen \u00a5",
      "United-States dollar",
      "United States dollars"
    ],
    "positiveHeaderExamples": [
      "currency name",
      "currency full name",
      "ccy name",
      "currency long name",
      "currency english name",
      "curr name"
    ],
    "negativeHeaderExamples": [
      "currency code",
      "currency symbol",
      "exchange rate",
      "country name",
      "customer name",
      "account number"
    ],
    "explanation": "Identifies English currency names written out in full, without symbols, ISO codes, or abbreviations. Useful for datasets storing human-readable currency values such as payment method configuration, pricing catalogs, or financial reference tables.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:41:41.863165"
  },
  {
    "resultType": "generated",
    "semanticType": "creator",
    "description": "Full personal names in Western order: given name followed by family name, separated by a single space. No middle names, initials-only first names, titles, prefixes, or suffixes are included. Hyphens and apostrophes within either name part are allowed.",
    "pluginType": "regex",
    "regexPattern": "\\b(([A-Za-z]{2,}([-'][A-Za-z]{2,})*|[A-Za-z][-'][A-Za-z]{2,}([-'][A-Za-z]{2,})*)) (([A-Za-z]{2,}([-'][A-Za-z]{2,})*|[A-Za-z][-'][A-Za-z]{2,}([-'][A-Za-z]{2,})*))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9760,
    "headerPatterns": [
      {
        "regExp": "(?i).*(created[_ ]by).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "created_by_name"
        ],
        "negativeExamples": [
          "created_by_id"
        ]
      },
      {
        "regExp": "(?i).*creator.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "creator_full_name"
        ],
        "negativeExamples": [
          "creator_id"
        ]
      },
      {
        "regExp": "(?i).*author.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "author_name"
        ],
        "negativeExamples": [
          "author_count"
        ]
      },
      {
        "regExp": "(?i).*(created[_ ]by|creator|author).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "creator"
        ],
        "negativeExamples": [
          "creation_date"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Anna-Marie Johnson",
      "Liam O'Brien",
      "D'Angelo Russell",
      "Chloe-Grace Moretz",
      "Mary Jane",
      "Jean-Paul Gaultier",
      "Siobhan O'Shea"
    ],
    "negativeContentExamples": [
      "J Smith",
      "John A Smith",
      "Smith, John",
      "John  Smith",
      "Dr John Smith",
      "John Smith Jr.",
      "JohnSmith",
      "Mary-Jane"
    ],
    "positiveHeaderExamples": [
      "creator",
      "created_by",
      "creator_name",
      "author_name",
      "creator_full_name",
      "created_by_name",
      "document_creator",
      "content_author"
    ],
    "negativeHeaderExamples": [
      "creation_date",
      "creator_id",
      "created_by_email",
      "author_count",
      "file_creator_code",
      "created_timestamp",
      "authoring_tool",
      "owner_group"
    ],
    "explanation": "This semantic type identifies two-part personal names in the format First Last with a single space, allowing internal hyphens or apostrophes in either part. It is suited for columns representing the person who created or authored a record, where the stored value is a clean first-and-last name without titles, middle names, or suffixes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:42:03.159125"
  },
  {
    "resultType": "generated",
    "semanticType": "company",
    "description": "Represents the complete corporate or business legal name, including a required legal suffix such as Corporation, Inc., LLC, Ltd, or similar. Names may include multiple words, spaces, commas, hyphens, ampersands, apostrophes, and periods, and typically use proper capitalization. Excludes stock tickers or isolated abbreviations that are not full legal names.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z0-9][A-Za-z0-9&',\\-\\. ]{1,80}\\s+(Corporation|Corp\\.?|Incorporated|Inc\\.?|LLC|L\\.L\\.C\\.|Ltd\\.?|Limited|LLP|L\\.L\\.P\\.|PLC|P\\.L\\.C\\.|Company|Co\\.)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9740,
    "headerPatterns": [
      {
        "regExp": "(?i).*(legal|registered).*company.*name.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "legal_company_name"
        ],
        "negativeExamples": [
          "company_code"
        ]
      },
      {
        "regExp": "(?i).*(corporate|business).*name.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "corporate_name"
        ],
        "negativeExamples": [
          "corporate_number"
        ]
      },
      {
        "regExp": "(?i).*company.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "company_name"
        ],
        "negativeExamples": [
          "company_code"
        ]
      },
      {
        "regExp": "(?i).*(corp|co)\\W*name.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "corp_name"
        ],
        "negativeExamples": [
          "corp_id"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "Acme Corporation",
      "Global Ventures Inc.",
      "O'Reilly Media, Inc.",
      "Smith & Sons, Ltd.",
      "Blue Sky Holdings LLC",
      "Northern Lights Company",
      "3M Company",
      "Sunrise Partners LLP"
    ],
    "negativeContentExamples": [
      "Acme",
      "Global Ventures",
      "AAPL",
      "Blue Sky Holdings L.L.C",
      "Acme Co Ltd",
      "Widgets GmbH",
      "Northern Lights Co",
      "Apex Trading P.L.C"
    ],
    "positiveHeaderExamples": [
      "legal_company_name",
      "registered_company_name",
      "company_name",
      "corporate_name",
      "business_entity_name",
      "co_name",
      "corp_name",
      "official_company_name"
    ],
    "negativeHeaderExamples": [
      "company_code",
      "legal_entity_id",
      "corporate_number",
      "business_unit",
      "organization_code",
      "corp_id",
      "ticker",
      "stock_symbol"
    ],
    "explanation": "This semantic type identifies full legal company names that include a recognized legal suffix (e.g., Inc., Corporation, LLC, Ltd., Company). The regex favors proper names composed of words and limited punctuation, followed by a legal designator. It intentionally excludes stock tickers and entries lacking a legal suffix to reduce false positives. Header cues prioritize explicit fields like legal_company_name and company_name, with broader fallbacks to capture common naming conventions.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:42:03.622217"
  },
  {
    "resultType": "generated",
    "semanticType": "event",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\"(),;:/\\-]+(\\s+[A-Za-z][A-Za-z0-9'\u2019\"(),;:/\\-]+){3,}[.?!]?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9880,
    "headerPatterns": [
      {
        "regExp": "(?i).*event.*(description|details|notes|text|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "event_details"
        ],
        "negativeExamples": [
          "event_date"
        ]
      },
      {
        "regExp": "(?i).*(incident|occurrence).*(description|details|notes|text|narrative|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "incident_description"
        ],
        "negativeExamples": [
          "incident_date"
        ]
      },
      {
        "regExp": "(?i).*event.*(summary|message|comment|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "event_summary"
        ],
        "negativeExamples": [
          "event_id"
        ]
      },
      {
        "regExp": "(?i).*(evt|inc).*?(desc|notes|txt|narr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "evt_desc"
        ],
        "negativeExamples": [
          "inc_date"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "User reported intermittent login failures after password reset.",
      "Power outage impacted building A from 09:00 to 11:30.",
      "Conference session rescheduled due to speaker illness.",
      "The deployment completed successfully with minor warnings noted.",
      "Unexpected spike in API latency observed during peak traffic.",
      "Fire alarm triggered on the third floor; evacuation completed safely.",
      "Customer requested cancellation citing duplicate order created by mistake.",
      "Road closure announced for maintenance between Oak St and Pine Ave."
    ],
    "negativeContentExamples": [
      "Network outage",
      "Minor server issue",
      "2025-08-10 14:33",
      "User reported issue",
      "Error 500 occurred",
      "INV-12345 created",
      "john.doe@example.com",
      "High CPU usage"
    ],
    "positiveHeaderExamples": [
      "event_description",
      "event_details",
      "event_notes",
      "event_text",
      "incident_description",
      "event_narrative",
      "occurrence_summary",
      "event_message"
    ],
    "negativeHeaderExamples": [
      "event_date",
      "event_time",
      "event_id",
      "event_code",
      "event_type",
      "date",
      "id",
      "code"
    ],
    "explanation": "The 'event' semantic type identifies free-form, human-readable text fields that typically contain narrative descriptions, summaries, comments, or notes about an event or occurrence. It is intended for multi-word natural language content rather than structured identifiers, dates, or codes. The regex favors strings with several word tokens and allows common punctuation to distinguish narrative text from short labels or coded values. Header patterns prioritize event-focused descriptors and common synonyms before falling back to the primitive 'text' term.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:42:06.258011"
  },
  {
    "resultType": "generated",
    "semanticType": "party",
    "description": "Open-ended natural language text intended for human reading, such as sentences, phrases, and short paragraphs. Values are variable in length and content, and typically contain multiple words with common punctuation.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z]+([ \\t,.;:!?-]+[A-Za-z0-9][A-Za-z0-9']+){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9890,
    "headerPatterns": [
      {
        "regExp": "(?i).*(involved[ _]party|counterparty|legal[ _]party).*(notes|comments|description|narrative|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "legal_party_notes"
        ],
        "negativeExamples": [
          "legal_party_id"
        ]
      },
      {
        "regExp": "(?i).*party.*(notes|comments|description|narrative|text|details).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "party_description"
        ],
        "negativeExamples": [
          "party_id"
        ]
      },
      {
        "regExp": "(?i).*(counterparty|legal[ _]party|involved[ _]party).*(statement|details).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "counterparty_details"
        ],
        "negativeExamples": [
          "counterparty_code"
        ]
      },
      {
        "regExp": "(?i).*(pty).*(cmts|desc|txt).*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "pty_cmts"
        ],
        "negativeExamples": [
          "pty_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "additional_text"
        ],
        "negativeExamples": [
          "additional_info"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver by Friday afternoon.",
      "The parties agree to the following terms and conditions.",
      "Contact the client if any issues arise during installation.",
      "This item was returned due to a manufacturing defect.",
      "Payment was received in full on 12 June.",
      "Brief summary of the discussion is attached below.",
      "Thank you for your prompt response to our request.",
      "All materials must be stored in a cool, dry place."
    ],
    "negativeContentExamples": [
      "Pending",
      "Urgent request",
      "OK",
      "N/A",
      "A-1234-B",
      "12345 67890",
      "Yes/No",
      "ACME-12345"
    ],
    "positiveHeaderExamples": [
      "legal_party_notes",
      "counterparty_description",
      "involved_party_comments",
      "party_narrative",
      "party_free_text",
      "pty_cmts",
      "additional_text",
      "legal_party_details"
    ],
    "negativeHeaderExamples": [
      "party_id",
      "counterparty_code",
      "party_number",
      "case_summary",
      "account_memo",
      "message_body",
      "entity_overview",
      "record_notes"
    ],
    "explanation": "This semantic type identifies free-form, human-readable text fields used for notes, comments, descriptions, narratives, and similar prose. Detection prioritizes headers referencing party-related narratives and generic text markers, and content is recognized by having multiple word tokens with natural punctuation, avoiding short codes or identifiers. Use this type to capture unstructured textual content associated with parties or related entities, while keeping a high threshold and priority to minimize conflicts with more specific structured types.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:42:13.399933"
  },
  {
    "resultType": "generated",
    "semanticType": "format",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}[A-Za-z'\\-]*\\b[.,;:!?]?\\s+\\b[A-Za-z]{2,}[A-Za-z'\\-]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9850,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|client|internal|public).*(comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(message|msg).*(body|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "message_body"
        ],
        "negativeExamples": [
          "body_weight"
        ]
      },
      {
        "regExp": "(?i).*(long|short).*(description|desc).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "short_code"
        ]
      },
      {
        "regExp": "(?i).*(description|details|remarks|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "order_status"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "index"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached document.",
      "Payment has been received and recorded.",
      "High priority items should be addressed first.",
      "This product requires assembly before use.",
      "Customer reported intermittent connection issues.",
      "The project timeline has been updated.",
      "Contact support if the problem persists.",
      "Thank you for your feedback and suggestions."
    ],
    "negativeContentExamples": [
      "OK",
      "A brief",
      "john_doe",
      "2024-07-15",
      "ABC-123-XYZ",
      "Error:404",
      "Hello123 world",
      "N/A"
    ],
    "positiveHeaderExamples": [
      "description",
      "long_description",
      "customer_comments",
      "internal_notes",
      "remarks",
      "message_body",
      "details",
      "free_text"
    ],
    "negativeHeaderExamples": [
      "status_code",
      "customer_name",
      "invoice_number",
      "created_date",
      "postal_code",
      "ip_address",
      "amount",
      "exchange_rate"
    ],
    "explanation": "This semantic type targets free-form, human-readable text content typically found in fields like descriptions, comments, notes, messages, and narratives. It is designed to capture multi-word natural language entries rather than structured identifiers or codes, helping separate general text from strongly formatted data.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:42:20.771836"
  },
  {
    "resultType": "generated",
    "semanticType": "definition",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'\u2019\\-]*\\b( +\\b[A-Za-z][A-Za-z'\u2019\\-]*\\b){5,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9590,
    "headerPatterns": [
      {
        "regExp": "(?i).*(glossary|term|field|product|concept)[ _-]*definition.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "glossary_definition"
        ],
        "negativeExamples": [
          "glossary_term"
        ]
      },
      {
        "regExp": "(?i).*(glossary|dictionary|concept).*[ _-]definition.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "dictionary_definition"
        ],
        "negativeExamples": [
          "dictionary_entry"
        ]
      },
      {
        "regExp": "(?i).*\\bdefn?\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "defn"
        ],
        "negativeExamples": [
          "default_value"
        ]
      },
      {
        "regExp": "(?i).*(meaning|explanation).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "term_meaning"
        ],
        "negativeExamples": [
          "error_message"
        ]
      },
      {
        "regExp": "(?i).*definition.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "definition"
        ],
        "negativeExamples": [
          "description"
        ]
      }
    ],
    "positiveContentExamples": [
      "A portable computer designed for mobile use with integrated screen and keyboard.",
      "The process of converting raw data into meaningful information for analysis.",
      "A lightweight framework for building responsive user interfaces and components.",
      "A financial instrument representing ownership in a company and claims on assets.",
      "An approach to project management emphasizing iterative development and feedback.",
      "A safety protocol outlining steps to prevent workplace injuries and incidents.",
      "The legal document that grants permission to operate a business within a jurisdiction.",
      "A structured set of instructions that a computer can interpret and execute reliably."
    ],
    "negativeContentExamples": [
      "Portable computer",
      "Convert data to information",
      "UI framework",
      "Ownership in company",
      "Iterative project method",
      "Safety protocol steps",
      "Business license",
      "Instruction set"
    ],
    "positiveHeaderExamples": [
      "term_definition",
      "product_definition",
      "glossary_definition",
      "field_definition",
      "concept_definition",
      "definition",
      "defn",
      "definition_text"
    ],
    "negativeHeaderExamples": [
      "description",
      "summary",
      "notes",
      "comments",
      "title",
      "label",
      "instructions",
      "requirements"
    ],
    "explanation": "Definition identifies freeform natural language text that explains the meaning or details of a term, field, product, or concept. It is useful for detecting columns that contain explanatory prose rather than short labels or coded values. The content regex requires a sequence of at least six words, promoting detection of sentence-like text while avoiding short titles and codes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:43:04.444598"
  },
  {
    "resultType": "generated",
    "semanticType": "role",
    "description": "This type captures job titles and occupational designations as they appear in professional contexts, employment records, and organizational structures. The values represent standard professional roles, specialized positions, or functional titles using conventional workplace terminology.",
    "pluginType": "regex",
    "regexPattern": "\\b((Chief|Senior|Sr\\.|Junior|Jr\\.|Lead|Head|Assistant|Associate)\\s+)?(([A-Z][a-z]+(/[A-Z][a-z]+)?)\\s+)?(Engineer|Developer|Designer|Manager|Director|Officer|Analyst|Consultant|Specialist|Administrator|Coordinator|Architect|Scientist|Technician|Accountant|Supervisor|Professor|Teacher|Nurse|Doctor|Attorney|Agent|Operator|Planner|Buyer|Producer|Editor|Writer|Recruiter|Pharmacist|Therapist)\\b(\\s+((of|for)\\s+[A-Z][a-z]+(\\s+[A-Z][a-z]+){0,2}))?)|\\b(CEO|CFO|CTO|COO|CMO|CIO|CISO|CHRO|CDO|CPO|CRO|CCO|CLO|CBO|VP|SVP|EVP|AVP|GM|MD)\\b(\\s+[A-Z][a-z]+(\\s+[A-Z][a-z]+){0,2})?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9610,
    "headerPatterns": [
      {
        "regExp": "(?i).*(employee|staff|personnel).*(job|position|role|title).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "employee_job_title"
        ],
        "negativeExamples": [
          "job_history"
        ]
      },
      {
        "regExp": "(?i).*job.*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "job_title"
        ],
        "negativeExamples": [
          "job_type"
        ]
      },
      {
        "regExp": "(?i).*position.*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "position_title"
        ],
        "negativeExamples": [
          "position_id"
        ]
      },
      {
        "regExp": "(?i).*(job|position).*(role|title).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "job_role"
        ],
        "negativeExamples": [
          "job_location"
        ]
      },
      {
        "regExp": "(?i).*role.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "role"
        ],
        "negativeExamples": [
          "user_name"
        ]
      }
    ],
    "positiveContentExamples": [
      "Senior Software Engineer",
      "Chief Operating Officer",
      "VP Sales",
      "Director of Finance",
      "Product Manager",
      "Data Scientist",
      "Associate Professor",
      "CEO"
    ],
    "negativeContentExamples": [
      "Chief of Operations",
      "Project Lead",
      "Quality Assurance",
      "V.P. Sales",
      "Sr. Dev",
      "Team Lead",
      "Marketing",
      "C.E.O"
    ],
    "positiveHeaderExamples": [
      "employee_job_title",
      "position_title",
      "job_role",
      "staff_position",
      "role",
      "job_title",
      "employee_role",
      "occupation_title"
    ],
    "negativeHeaderExamples": [
      "job_history",
      "position_id",
      "role_id",
      "user_role_id",
      "job_location",
      "department",
      "code",
      "employee_name"
    ],
    "explanation": "PERSON.ROLE identifies cells containing occupational and job titles, from common roles (Manager, Engineer) to executive abbreviations (CEO, CFO) and multi-word titles with qualifiers (Senior, Associate) and departmental context (Director of Finance). Use this to classify employment-related columns and values representing professional positions in HR systems, directories, and resumes.",
    "description_pattern": "P2",
    "generated_at": "2025-08-10T18:43:27.278209"
  }
]