{
  "dataset": "fintech_bank_transaction",
  "description_number": 2,
  "timestamp": "20250808_110430",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "TransactionID",
      "description": "A unique transaction identifier that begins with the literal prefix 'TX' followed by exactly six numerical digits, used for transactional tracking across systems.",
      "pluginType": "regex",
      "regexPattern": "TX\\d{6}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "TX123456",
        "TX000001",
        "TX999999",
        "TX567890",
        "TX100000",
        "TX789012",
        "TX456789",
        "TX234567"
      ],
      "negativeContentExamples": [
        "TX12345",
        "TX1234567",
        "tx123456",
        "TXA12345",
        "RX123456",
        "TX 123456",
        "123456TX",
        "T123456"
      ],
      "positiveHeaderExamples": [
        "transaction_id",
        "trans_id",
        "txn_id",
        "tx_id",
        "transaction_number",
        "payment_transaction_id",
        "order_transaction_id",
        "transaction_ref"
      ],
      "negativeHeaderExamples": [
        "customer_id",
        "order_id",
        "product_id",
        "reference_number",
        "invoice_id",
        "account_number",
        "confirmation_code",
        "tracking_number"
      ],
      "confidenceThreshold": 98.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_id"
          ],
          "negativeExamples": [
            "customer_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*trans.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "trans_id"
          ],
          "negativeExamples": [
            "order_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_id"
          ],
          "negativeExamples": [
            "ref_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*tx.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "tx_id"
          ],
          "negativeExamples": [
            "rx_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transaction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction"
          ],
          "negativeExamples": [
            "interaction"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "id"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 4790,
      "explanation": "This semantic type identifies transaction identifiers that follow a specific format requirement of starting with 'TX' followed by exactly six digits. This pattern is commonly used in financial systems, e-commerce platforms, and payment processing systems where a standardized transaction ID format is required for tracking and reconciliation purposes. The strict format ensures consistency across systems and enables reliable transaction matching and auditing.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:55:40.794761"
    },
    {
      "resultType": "generated",
      "semanticType": "AccountID",
      "description": "A standardized account identifier that begins with 'AC' prefix followed by exactly five numeric digits, used to link transactions and balances to specific customer accounts",
      "pluginType": "regex",
      "regexPattern": "AC\\d{5}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "AC12345",
        "AC00001",
        "AC99999",
        "AC54321",
        "AC78901",
        "AC23456",
        "AC67890",
        "AC11111"
      ],
      "negativeContentExamples": [
        "AC1234",
        "AC123456",
        "BC12345",
        "AC1234A",
        "ac12345",
        "A12345",
        "ACC12345",
        "AC 12345"
      ],
      "positiveHeaderExamples": [
        "account_code",
        "customer_account_id",
        "acct_code",
        "account_identifier",
        "customer_acct_code",
        "account_ref",
        "acct_id",
        "account_number"
      ],
      "negativeHeaderExamples": [
        "product_code",
        "transaction_id",
        "order_number",
        "customer_name",
        "department_code",
        "invoice_number",
        "reference_code",
        "category_code"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*account.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "account_code"
          ],
          "negativeExamples": [
            "product_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*customer.*account.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_account_id"
          ],
          "negativeExamples": [
            "customer_order_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*acct.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "acct_code"
          ],
          "negativeExamples": [
            "dept_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*account.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "account_id"
          ],
          "negativeExamples": [
            "transaction_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*acct.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "acct"
          ],
          "negativeExamples": [
            "dept"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "code"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 4800,
      "explanation": "This semantic type identifies standardized account codes used in financial and customer management systems. The pattern AC followed by exactly five digits provides a consistent format for account identification, enabling reliable linking of transactions, balances, and other account-related data. This type of identifier is commonly used in banking, accounting, and customer relationship management systems where a standardized account reference format is required for data integrity and system integration.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:56:20.339742"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionAmount",
      "description": "A decimal number representing a financial value or transaction amount in the system's base currency, with support for whole numbers and decimals up to two decimal places for cents representation",
      "pluginType": "regex",
      "regexPattern": "\\d{1,10}(\\.\\d{1,2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "123.45",
        "0.99",
        "1000.00",
        "50",
        "9999999.99",
        "0.01",
        "250.5",
        "15000"
      ],
      "negativeContentExamples": [
        "123.456",
        "-50.00",
        "$123.45",
        "1,234.56",
        "123.4.5",
        "abc.def",
        "123.",
        ".99"
      ],
      "positiveHeaderExamples": [
        "transaction_amount",
        "payment_value",
        "invoice_total",
        "price",
        "cost",
        "amount_due",
        "financial_value",
        "monetary_sum"
      ],
      "negativeHeaderExamples": [
        "transaction_id",
        "payment_date",
        "invoice_number",
        "price_category",
        "cost_center",
        "amount_type",
        "currency_code",
        "account_number"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*(transaction|payment|invoice).*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_amount"
          ],
          "negativeExamples": [
            "transaction_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(price|cost|value|total|subtotal).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_price"
          ],
          "negativeExamples": [
            "price_category"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(financial|monetary|currency).*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "financial_value"
          ],
          "negativeExamples": [
            "financial_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(amt|val|sum).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_amt"
          ],
          "negativeExamples": [
            "amt_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(amount|value).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "amount"
          ],
          "negativeExamples": [
            "amount_type"
          ],
          "rationale": null
        }
      ],
      "priority": 4810,
      "explanation": "This semantic type identifies decimal numbers that represent financial amounts or currency values in a system's base currency. It matches positive numbers with up to 10 digits before the decimal point and up to 2 digits after (for cents), supporting both whole numbers and decimal values. This is commonly used for transaction amounts, prices, costs, totals, and other monetary values in financial systems. The pattern excludes negative values, currency symbols, and formatting characters like commas, focusing on the raw numeric representation of financial amounts.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:56:52.891478"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionDate",
      "description": "Captures the exact timestamp when a transaction was processed, formatted as a complete date-time string including month, day, year, and precise time with hours, minutes, and seconds",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}\\s+\\d{1,2}:\\d{2}:\\d{2}(\\.\\d{1,6})?(\\s*[AaPp][Mm])?|\\d{4}-\\d{2}-\\d{2}[T\\s]\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,6})?(Z|[+-]\\d{2}:?\\d{2})?|\\d{2}/\\d{2}/\\d{4}\\s+\\d{2}:\\d{2}:\\d{2}|\\w{3}\\s+\\d{1,2},?\\s+\\d{4}\\s+\\d{1,2}:\\d{2}:\\d{2}(\\s*[AaPp][Mm])?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "12/15/2023 14:32:45",
        "2023-12-15T14:32:45.123Z",
        "12-15-2023 2:32:45 PM",
        "2023-12-15 14:32:45.456789",
        "Dec 15, 2023 2:32:45 PM",
        "15/12/2023 14:32:45",
        "2023-12-15T14:32:45-05:00",
        "12/15/23 14:32:45"
      ],
      "negativeContentExamples": [
        "12/15/2023",
        "14:32:45",
        "2023-12-15",
        "December 15, 2023",
        "14:32",
        "2023",
        "15-Dec-2023",
        "1702651965"
      ],
      "positiveHeaderExamples": [
        "transaction_timestamp",
        "processed_timestamp",
        "txn_processed_time",
        "transaction_datetime",
        "processing_timestamp",
        "trans_time_stamp",
        "payment_timestamp",
        "settlement_timestamp"
      ],
      "negativeHeaderExamples": [
        "transaction_date",
        "created_date",
        "transaction_id",
        "process_time",
        "transaction_amount",
        "last_modified",
        "expiry_date",
        "birth_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_timestamp"
          ],
          "negativeExamples": [
            "transaction_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transaction.*processed.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_processed_time"
          ],
          "negativeExamples": [
            "transaction_created_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(txn|trans).*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_time"
          ],
          "negativeExamples": [
            "txn_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*processed.*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "processed_timestamp"
          ],
          "negativeExamples": [
            "processed_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "timestamp"
          ],
          "negativeExamples": [
            "date"
          ],
          "rationale": null
        }
      ],
      "priority": 4820,
      "explanation": "This semantic type identifies transaction timestamps - precise date-time values that capture when financial or business transactions were processed. It supports multiple common timestamp formats including ISO 8601, US date formats with time components, and various international date-time representations. The pattern is specifically designed to match complete date-time strings that include both date and time components with seconds precision, which is essential for transaction processing systems that require exact timing information for audit trails, reconciliation, and regulatory compliance.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:57:25.343218"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionType",
      "description": "Indicates the directional nature of financial movements using standard banking terminology, specifying whether money flows into or out of an account using predefined categorical values like debit/credit, in/out, deposit/withdrawal.",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "DEBIT",
        "CREDIT",
        "IN",
        "OUT",
        "DEPOSIT",
        "WITHDRAWAL",
        "INCOMING",
        "OUTGOING",
        "INBOUND",
        "OUTBOUND",
        "RECEIVED",
        "SENT",
        "PLUS",
        "MINUS",
        "POSITIVE",
        "NEGATIVE",
        "DR",
        "CR",
        "+",
        "-"
      ],
      "backout": "(?i)(debit|credit|deposit|withdrawal|incoming|outgoing|inbound|outbound|received|sent|plus|minus|positive|negative|[dr]|[cr]|[\\+\\-])",
      "positiveContentExamples": [
        "debit",
        "credit",
        "in",
        "out",
        "deposit",
        "withdrawal",
        "incoming",
        "outgoing"
      ],
      "negativeContentExamples": [
        "pending",
        "completed",
        "failed",
        "authorized",
        "declined",
        "processing",
        "cancelled",
        "reversed"
      ],
      "positiveHeaderExamples": [
        "transaction_direction",
        "debit_credit_indicator",
        "flow_direction",
        "dr_cr_flag",
        "payment_direction",
        "money_flow",
        "transaction_type",
        "direction"
      ],
      "negativeHeaderExamples": [
        "transaction_status",
        "payment_method",
        "account_type",
        "currency_code",
        "transaction_amount",
        "merchant_name",
        "reference_number",
        "processing_date"
      ],
      "confidenceThreshold": 92.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*(transaction|txn).*direction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_direction"
          ],
          "negativeExamples": [
            "transaction_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(debit|credit).*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "debit_credit_type"
          ],
          "negativeExamples": [
            "credit_card_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(flow|movement).*direction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cash_flow_direction"
          ],
          "negativeExamples": [
            "traffic_flow_direction"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(dr|cr).*indicator.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dr_cr_indicator"
          ],
          "negativeExamples": [
            "status_indicator"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(in|out).*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "in_out_type"
          ],
          "negativeExamples": [
            "account_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*direction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "direction"
          ],
          "negativeExamples": [
            "location"
          ],
          "rationale": null
        }
      ],
      "priority": 4830,
      "explanation": "This semantic type identifies fields that specify the directional nature of financial transactions using standard banking and accounting terminology. It captures whether money is flowing into an account (credit, deposit, incoming, positive) or out of an account (debit, withdrawal, outgoing, negative). This is essential for financial data processing, accounting systems, and transaction analysis where understanding the direction of money flow is critical for proper categorization and reporting. The type uses a finite list of common banking terms and their abbreviations, with a backout pattern to catch variations in formatting or case.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:58:08.823310"
    },
    {
      "resultType": "existing",
      "semanticType": "Location",
      "description": "City/Town",
      "pluginType": "regex",
      "regexPattern": null,
      "listValues": null,
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [],
      "positiveHeaderExamples": [],
      "negativeHeaderExamples": [],
      "confidenceThreshold": 0.0,
      "headerPatterns": null,
      "priority": 4840,
      "explanation": "The CITY type is an excellent match for the user's requirements. The user specifically mentions \"city or geographic region\" and \"recognizable place names\" which directly aligns with the CITY semantic type. While the user's description includes \"geographic region\" which could be broader than just cities, the core concept of identifying place names for geographic context matches perfectly with the CITY type's purpose.",
      "existingTypeMatch": "CITY",
      "existingTypeDescription": "City/Town",
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": [
        "^(?i)(ort)$"
      ],
      "existingTypeIsBuiltIn": true,
      "suggestedAction": "use_existing",
      "comparison": {
        "existingTypeName": "CITY",
        "existingTypeDescription": "City/Town",
        "similarityScore": 0.7251965988281367,
        "similarities": [
          "Both types accept city and town names as their primary data values, with standard geographic place name validation rules applying to both"
        ],
        "differences": [
          {
            "aspect": "Key Difference",
            "description": "However, the user's type has broader scope by explicitly including geographic regions beyond just cities and towns, and adds specific context validation for financial transaction origins that the existing type lacks"
          }
        ],
        "recommendUseExisting": false,
        "recommendationReason": "The types are different enough that you should create a new semantic type.",
        "summary": "Both types accept city and town names as their primary data values, with standard geographic place name validation rules applying to both. However, the user's type has broader scope by explicitly including geographic regions beyond just cities and towns, and adds specific context validation for financial transaction origins that the existing type lacks.",
        "similarityPercentage": 72.51965988281367
      },
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:58:33.559568"
    },
    {
      "resultType": "generated",
      "semanticType": "DeviceID",
      "description": "A device-specific identifier that starts with the letter 'D' followed by exactly six numeric digits, used to track specific devices or terminals in transaction processing systems.",
      "pluginType": "regex",
      "regexPattern": "D\\d{6}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "D123456",
        "D000001",
        "D999999",
        "D567890",
        "D100200",
        "D789012",
        "D456789",
        "D234567"
      ],
      "negativeContentExamples": [
        "D12345",
        "D1234567",
        "d123456",
        "T123456",
        "D12345A",
        "123456",
        "DA23456",
        "D-123456"
      ],
      "positiveHeaderExamples": [
        "device_code",
        "terminal_id",
        "device_identifier",
        "transaction_device_code",
        "pos_device_id",
        "terminal_code",
        "device_serial",
        "processing_device"
      ],
      "negativeHeaderExamples": [
        "user_code",
        "product_code",
        "error_code",
        "location_code",
        "merchant_id",
        "transaction_id",
        "customer_code",
        "service_code"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*device.*terminal.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "device_terminal_code"
          ],
          "negativeExamples": [
            "terminal_location_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transaction.*device.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_device_id"
          ],
          "negativeExamples": [
            "transaction_user_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*device.*identifier.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "device_identifier"
          ],
          "negativeExamples": [
            "user_identifier"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*terminal.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "terminal_id"
          ],
          "negativeExamples": [
            "terminal_location"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*device.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "device_code"
          ],
          "negativeExamples": [
            "error_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*device.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "device"
          ],
          "negativeExamples": [
            "service"
          ],
          "rationale": null
        }
      ],
      "priority": 4850,
      "explanation": "This semantic type identifies device-specific codes used in transaction processing systems. The pattern D followed by exactly six digits creates a standardized identifier format that allows systems to track and identify specific devices or terminals. This is commonly used in point-of-sale systems, ATMs, and other transaction processing equipment where device tracking is essential for audit trails, maintenance scheduling, and transaction reconciliation. The strict format ensures consistent identification across different systems and helps prevent confusion with other types of identifiers.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:59:09.790351"
    },
    {
      "resultType": "generated",
      "semanticType": "IP Address",
      "description": "This field contains a standard IPv4 network address consisting of four numeric segments separated by periods. Each segment represents an octet value between 0 and 255 that identifies the network location of the transaction origin.",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.168.1.1",
        "10.0.0.1",
        "172.16.254.1",
        "8.8.8.8",
        "127.0.0.1",
        "255.255.255.255",
        "203.0.113.45",
        "0.0.0.0"
      ],
      "negativeContentExamples": [
        "192.168.1.256",
        "10.0.0",
        "172.16.254.1.1",
        "8.8.8",
        "127.0.0.1.0",
        "256.255.255.255",
        "192.168.-1.1",
        "2001:db8::1"
      ],
      "positiveHeaderExamples": [
        "ip_address",
        "source_ip",
        "client_ip_addr",
        "transaction_origin_ip",
        "server_ipv4",
        "remote_address",
        "host_ip",
        "network_address"
      ],
      "negativeHeaderExamples": [
        "mac_address",
        "ipv6_address",
        "street_address",
        "email_address",
        "port_number",
        "subnet_mask",
        "hostname",
        "url"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*origin.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_origin_ip_address"
          ],
          "negativeExamples": [
            "transaction_destination_port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*source.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "source_ip_address"
          ],
          "negativeExamples": [
            "source_port_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*client.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "client_ip"
          ],
          "negativeExamples": [
            "client_port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(ip|ipv4).*addr.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "ipv4_addr"
          ],
          "negativeExamples": [
            "ipv6_addr"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(ip|ipaddress).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "ip_address"
          ],
          "negativeExamples": [
            "mac_address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "address"
          ],
          "negativeExamples": [
            "street"
          ],
          "rationale": null
        }
      ],
      "priority": 4860,
      "explanation": "This semantic type identifies IPv4 network addresses, which are fundamental identifiers in network communications. IPv4 addresses consist of four octets (0-255) separated by periods, forming a 32-bit address space. They are commonly used to identify the source or destination of network traffic, including transaction origins, client connections, server addresses, and network device locations. This type is essential for network analysis, security monitoring, geolocation services, and system administration tasks where understanding the network topology and traffic patterns is crucial.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T10:59:49.679903"
    },
    {
      "resultType": "generated",
      "semanticType": "MerchantID",
      "description": "A merchant identifier code that begins with the letter 'M' followed by exactly three numeric digits, used to categorize and track transactions by participating businesses or vendors.",
      "pluginType": "regex",
      "regexPattern": "M\\d{3}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "M001",
        "M123",
        "M456",
        "M789",
        "M000",
        "M999",
        "M250",
        "M847"
      ],
      "negativeContentExamples": [
        "M12",
        "M1234",
        "A123",
        "m123",
        "M12A",
        "123M",
        "MER123",
        "M-123"
      ],
      "positiveHeaderExamples": [
        "merchant_code",
        "vendor_code",
        "merchant_id",
        "business_code",
        "merchant_identifier",
        "vendor_id",
        "store_code",
        "retailer_code"
      ],
      "negativeHeaderExamples": [
        "product_code",
        "customer_code",
        "transaction_code",
        "discount_code",
        "postal_code",
        "currency_code",
        "employee_code",
        "category_code"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*merchant.*identifier.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "merchant_identifier_code"
          ],
          "negativeExamples": [
            "customer_identifier_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "merchant_code"
          ],
          "negativeExamples": [
            "product_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vendor.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vendor_code"
          ],
          "negativeExamples": [
            "discount_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "merchant_id"
          ],
          "negativeExamples": [
            "transaction_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*business.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "business_code"
          ],
          "negativeExamples": [
            "postal_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "code"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 4870,
      "explanation": "This semantic type identifies merchant codes used in transaction processing and business identification systems. The pattern M followed by exactly three digits provides a standardized way to identify participating merchants, vendors, or businesses in payment processing, e-commerce platforms, or transaction tracking systems. This format allows for up to 1,000 unique merchant identifiers (M000-M999) while maintaining a consistent, easily recognizable structure for automated processing and human readability.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:00:22.702019"
    },
    {
      "resultType": "generated",
      "semanticType": "Channel",
      "description": "Banking channel or medium used by customers to access services and complete transactions, including digital platforms, automated systems, and physical locations",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "ATM",
        "ONLINE BANKING",
        "MOBILE APP",
        "BRANCH",
        "PHONE BANKING",
        "KIOSK",
        "DRIVE-THROUGH",
        "WIRE TRANSFER",
        "ACH",
        "DEBIT CARD",
        "CREDIT CARD",
        "CHECK",
        "CASH",
        "DIRECT DEPOSIT",
        "ONLINE",
        "MOBILE",
        "TELLER",
        "SELF-SERVICE",
        "DIGITAL",
        "IN-PERSON"
      ],
      "backout": "(?i).*(atm|online|mobile|branch|phone|kiosk|drive|wire|ach|debit|credit|check|cash|deposit|teller|digital|self.service).*",
      "positiveContentExamples": [
        "ATM",
        "Online Banking",
        "Mobile App",
        "Branch",
        "Phone Banking",
        "Debit Card",
        "Teller",
        "Digital"
      ],
      "negativeContentExamples": [
        "Checking Account",
        "Savings Account",
        "USD",
        "Approved",
        "John Smith",
        "123456789",
        "Transfer",
        "Withdrawal"
      ],
      "positiveHeaderExamples": [
        "banking_channel",
        "transaction_channel",
        "access_channel",
        "service_method",
        "delivery_channel",
        "payment_method",
        "channel_type",
        "banking_platform"
      ],
      "negativeHeaderExamples": [
        "account_type",
        "transaction_amount",
        "customer_name",
        "account_balance",
        "transaction_date",
        "branch_code",
        "currency_code",
        "status_code"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*(banking|transaction).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "banking_channel"
          ],
          "negativeExamples": [
            "banking_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(access|delivery).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "access_channel"
          ],
          "negativeExamples": [
            "access_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(service|payment).*method.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "service_method"
          ],
          "negativeExamples": [
            "service_fee"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(transaction|txn).*medium.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_medium"
          ],
          "negativeExamples": [
            "txn_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(banking|bank).*platform.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "banking_platform"
          ],
          "negativeExamples": [
            "banking_balance"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "channel"
          ],
          "negativeExamples": [
            "balance"
          ],
          "rationale": null
        }
      ],
      "priority": 4880,
      "explanation": "This semantic type identifies banking channels or delivery methods used by customers to access banking services and complete transactions. It covers various touchpoints including digital channels (online banking, mobile apps), automated systems (ATMs, kiosks), physical locations (branches, drive-through), and transaction methods (cards, checks, wire transfers). This classification is essential for banking analytics to understand customer behavior patterns, channel preferences, operational costs, and service optimization across different delivery methods.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:00:56.673650"
    },
    {
      "resultType": "generated",
      "semanticType": "CustomerAge",
      "description": "This field contains a positive integer representing the customer's age in complete years. The value reflects the customer's chronological age and is used for demographic profiling and regulatory compliance purposes.",
      "pluginType": "regex",
      "regexPattern": "\\b(?:[1-9]|[1-9][0-9]|1[0-4][0-9]|150)\\b",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "25",
        "42",
        "18",
        "65",
        "33",
        "89",
        "1",
        "150"
      ],
      "negativeContentExamples": [
        "0",
        "-5",
        "151",
        "25.5",
        "thirty",
        "N/A",
        "999",
        "01"
      ],
      "positiveHeaderExamples": [
        "age",
        "customer_age",
        "person_age",
        "current_age",
        "age_years",
        "member_age",
        "patient_age",
        "user_age"
      ],
      "negativeHeaderExamples": [
        "age_group",
        "age_range",
        "birth_date",
        "years_experience",
        "stage",
        "vintage",
        "tenure",
        "seniority"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_age"
          ],
          "negativeExamples": [
            "customer_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*person.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "person_age"
          ],
          "negativeExamples": [
            "person_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*age.*years.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "age_in_years"
          ],
          "negativeExamples": [
            "years_employed"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_age"
          ],
          "negativeExamples": [
            "current_status"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*\\bage\\b.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "age"
          ],
          "negativeExamples": [
            "stage"
          ],
          "rationale": null
        }
      ],
      "priority": 4890,
      "explanation": "This semantic type identifies fields containing human age values expressed as positive integers representing complete years. The pattern matches ages from 1 to 150 years, which covers the realistic range of human ages. It's designed to distinguish age values from other numeric fields like IDs, counts, or measurements. The type is commonly used in demographic analysis, customer profiling, healthcare records, and regulatory compliance scenarios where age-based categorization or validation is required. The regex pattern ensures only valid age ranges are matched while excluding decimal ages, negative numbers, or unrealistic age values.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:01:32.278756"
    },
    {
      "resultType": "generated",
      "semanticType": "CustomerOccupation",
      "description": "Professional designation or employment category representing standardized job titles used to assess income potential and transaction patterns in financial contexts",
      "pluginType": "regex",
      "regexPattern": "(?i)(?:senior|sr\\.?|junior|jr\\.?|lead|chief|head|principal|associate|assistant|deputy|vice|executive|managing|general)?\\s*(?:accountant|analyst|architect|attorney|auditor|banker|broker|consultant|contractor|counselor|designer|developer|director|doctor|economist|engineer|executive|farmer|inspector|instructor|lawyer|manager|nurse|officer|pharmacist|physician|pilot|planner|professor|programmer|psychologist|researcher|salesperson|scientist|specialist|supervisor|surgeon|teacher|technician|therapist|trader|writer|administrator|clerk|coordinator|representative|agent|advisor|cashier|driver|mechanic|operator|receptionist|secretary|student|retired|unemployed|self[_\\s-]?employed|homemaker|freelancer)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "Self-Employed",
        "Retired",
        "Teacher",
        "Accountant"
      ],
      "negativeContentExamples": [
        "Bachelor's Degree",
        "New York",
        "Married",
        "$75,000",
        "Male",
        "American",
        "35 years old",
        "john.doe@email.com"
      ],
      "positiveHeaderExamples": [
        "occupation",
        "job_title",
        "profession",
        "employment_type",
        "customer_occupation",
        "professional_designation",
        "career_field",
        "work_category"
      ],
      "negativeHeaderExamples": [
        "education_level",
        "salary",
        "company_name",
        "work_address",
        "years_experience",
        "department",
        "employee_id",
        "hire_date"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*(?:customer|client|account|member).*(?:occupation|profession|job.*title|employment|career)",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_occupation"
          ],
          "negativeExamples": [
            "customer_education"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:professional|employment).*(?:designation|category|type)",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "professional_designation"
          ],
          "negativeExamples": [
            "professional_certification"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:job|work|career).*(?:title|type|category|field)",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "job_title"
          ],
          "negativeExamples": [
            "job_location"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:occupation|profession|employment)",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "occupation"
          ],
          "negativeExamples": [
            "education"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:job|career|work)",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "job"
          ],
          "negativeExamples": [
            "hobby"
          ],
          "rationale": null
        }
      ],
      "priority": 4900,
      "explanation": "This semantic type identifies professional occupations and job titles as they appear in customer profiles and financial records. It captures standardized employment categories that financial institutions use to assess customer risk profiles, income potential, and transaction patterns. The pattern recognizes common job titles with optional seniority prefixes and covers a broad range of professions from technical roles to service positions, including special employment statuses like retired, self-employed, and unemployed. This classification is essential for KYC (Know Your Customer) compliance and risk assessment in banking and financial services.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:02:09.339531"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionDuration",
      "description": "Measures the total processing time for a transaction expressed as a positive integer in seconds, capturing the duration from request receipt to final confirmation",
      "pluginType": "regex",
      "regexPattern": "[1-9][0-9]{0,6}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "15",
        "45",
        "120",
        "300",
        "1800",
        "3600",
        "7200"
      ],
      "negativeContentExamples": [
        "0",
        "-5",
        "12.5",
        "3.14",
        "1500.0",
        "abc",
        "2023-01-01",
        "12345678"
      ],
      "positiveHeaderExamples": [
        "processing_time_seconds",
        "transaction_duration",
        "exec_time_sec",
        "process_time",
        "response_time_seconds",
        "execution_duration",
        "processing_sec",
        "duration_seconds"
      ],
      "negativeHeaderExamples": [
        "processing_time_milliseconds",
        "start_time",
        "end_time",
        "creation_timestamp",
        "processing_count",
        "time_zone",
        "processing_date",
        "timeout_value"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*processing.*time.*seconds?.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_processing_time_seconds"
          ],
          "negativeExamples": [
            "transaction_processing_time_minutes"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*processing.*time.*sec.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "processing_time_sec"
          ],
          "negativeExamples": [
            "processing_time_ms"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*process.*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "process_duration"
          ],
          "negativeExamples": [
            "process_start_time"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*exec.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "exec_time"
          ],
          "negativeExamples": [
            "exec_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "duration"
          ],
          "negativeExamples": [
            "frequency"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "time"
          ],
          "negativeExamples": [
            "timestamp"
          ],
          "rationale": null
        }
      ],
      "priority": 4910,
      "explanation": "This semantic type identifies fields containing transaction processing times measured in seconds as positive integers. It's commonly used in performance monitoring, transaction logging, and system analytics to track how long operations take to complete. The pattern ensures only positive integers are matched (1-9999999 seconds), excluding zero, negative values, decimals, and non-numeric data. This is essential for distinguishing actual processing durations from timestamps, counts, or other time-related but semantically different data types.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:02:41.457016"
    },
    {
      "resultType": "generated",
      "semanticType": "LoginAttempts",
      "description": "A positive integer count representing the number of authentication attempts made by a user before successfully gaining access, used for security monitoring and anomaly detection",
      "pluginType": "regex",
      "regexPattern": "[1-9][0-9]*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "3",
        "5",
        "12",
        "25",
        "100",
        "999",
        "42"
      ],
      "negativeContentExamples": [
        "0",
        "-1",
        "3.5",
        "1.0",
        "abc",
        "01",
        "+5"
      ],
      "positiveHeaderExamples": [
        "login_attempts",
        "auth_attempt_count",
        "failed_logins",
        "signin_retries",
        "authentication_attempts",
        "login_retry_count",
        "access_attempts",
        "password_attempts"
      ],
      "negativeHeaderExamples": [
        "successful_logins",
        "login_duration",
        "attempt_timestamp",
        "login_method",
        "user_id",
        "session_timeout",
        "login_status",
        "auth_token"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*login.*attempt.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "login_attempt_count"
          ],
          "negativeExamples": [
            "login_success_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*auth.*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "auth_attempts"
          ],
          "negativeExamples": [
            "auth_method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*failed.*login.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "failed_login_count"
          ],
          "negativeExamples": [
            "failed_payment_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*signin.*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "signin_attempts"
          ],
          "negativeExamples": [
            "signin_method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*retry.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "retry_count"
          ],
          "negativeExamples": [
            "retry_interval"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "attempts"
          ],
          "negativeExamples": [
            "temperature"
          ],
          "rationale": null
        }
      ],
      "priority": 4920,
      "explanation": "This semantic type identifies fields that track the number of authentication attempts made by users before successfully logging in. It's crucial for security monitoring, detecting brute force attacks, identifying compromised accounts, and analyzing user behavior patterns. The pattern matches positive integers only, as zero attempts would indicate no login activity, and negative values are not meaningful in this context. This data is commonly used in security dashboards, anomaly detection systems, and compliance reporting.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:03:22.036256"
    },
    {
      "resultType": "generated",
      "semanticType": "AccountBalance",
      "description": "Represents an account's available funds as a decimal value that can include whole numbers and fractional amounts for precise currency representation. The balance reflects the net position after all previous transactions have been processed.",
      "pluginType": "regex",
      "regexPattern": "-?\\d{1,3}(?:,\\d{3})*(?:\\.\\d{2})?|-?\\d+(?:\\.\\d{2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1,234.56",
        "0.00",
        "-500.25",
        "10000.00",
        "999,999.99",
        "-1,250.75",
        "50",
        "-25.50"
      ],
      "negativeContentExamples": [
        "1,234.567",
        "$1,234.56",
        "1234.5",
        "1,23.45",
        "USD 500.00",
        "1,234,567.890",
        "N/A",
        "PENDING"
      ],
      "positiveHeaderExamples": [
        "account_balance",
        "current_balance",
        "available_balance",
        "acct_bal",
        "balance_amount",
        "account_bal",
        "funds_available",
        "balance"
      ],
      "negativeHeaderExamples": [
        "account_number",
        "transaction_amount",
        "payment_due",
        "credit_limit",
        "interest_rate",
        "account_type",
        "balance_date",
        "minimum_balance"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*account.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "account_balance"
          ],
          "negativeExamples": [
            "account_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*available.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "available_balance"
          ],
          "negativeExamples": [
            "available_credit"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_balance"
          ],
          "negativeExamples": [
            "current_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*acct.*bal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "acct_bal"
          ],
          "negativeExamples": [
            "acct_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*funds.*available.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "funds_available"
          ],
          "negativeExamples": [
            "funds_transfer"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "balance"
          ],
          "negativeExamples": [
            "transaction"
          ],
          "rationale": null
        }
      ],
      "priority": 4930,
      "explanation": "This semantic type identifies account balance values in financial datasets. It recognizes decimal currency amounts that may be positive (credit) or negative (debit), with optional thousands separators and exactly two decimal places for cents. The pattern accommodates various formatting styles commonly used in banking and financial systems, including whole dollar amounts without decimal places. This type is essential for financial analysis, accounting systems, and banking applications where precise monetary values need to be identified and processed.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:03:54.585620"
    },
    {
      "resultType": "generated",
      "semanticType": "PreviousTransactionDate",
      "description": "Captures the complete date and time of the immediately preceding transaction for historical context and pattern analysis. Includes full date components and precise time measurements to enable chronological sequencing.",
      "pluginType": "regex",
      "regexPattern": "\\d{4}[-/]\\d{1,2}[-/]\\d{1,2}[\\sT]\\d{1,2}:\\d{2}(:\\d{2})?(\\.\\d{1,6})?([\\sZ]|[+-]\\d{2}:?\\d{2})?|\\d{1,2}[-/]\\d{1,2}[-/]\\d{4}[\\sT]\\d{1,2}:\\d{2}(:\\d{2})?(\\.\\d{1,6})?([\\sZ]|[+-]\\d{2}:?\\d{2})?|\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2024-01-15 14:30:25",
        "2023-12-31T23:59:59.999Z",
        "2024-03-22 09:15:30.123",
        "12/25/2023 18:45:00",
        "2024-02-14T10:30:45+05:30",
        "2023-11-08 07:22:18.456789",
        "03-15-2024 16:20:35"
      ],
      "negativeContentExamples": [
        "2024-01-15",
        "14:30:25",
        "January 15, 2024",
        "15-01-2024",
        "2024-1-5 2:5:3",
        "next week",
        "1642248625"
      ],
      "positiveHeaderExamples": [
        "previous_transaction_datetime",
        "prev_txn_datetime",
        "last_transaction_timestamp",
        "prior_transaction_time",
        "previous_txn_dt",
        "last_txn_datetime",
        "prev_transaction_ts",
        "prior_txn_timestamp"
      ],
      "negativeHeaderExamples": [
        "current_transaction_datetime",
        "next_txn_datetime",
        "transaction_amount",
        "customer_name",
        "future_transaction_date",
        "transaction_id",
        "account_balance",
        "payment_method"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*previous.*transaction.*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "previous_transaction_datetime"
          ],
          "negativeExamples": [
            "next_transaction_datetime"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*prev.*txn.*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "prev_txn_datetime"
          ],
          "negativeExamples": [
            "next_txn_datetime"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*last.*transaction.*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "last_transaction_timestamp"
          ],
          "negativeExamples": [
            "first_transaction_timestamp"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*prior.*txn.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "prior_txn_time"
          ],
          "negativeExamples": [
            "current_txn_time"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*previous.*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "previous_datetime"
          ],
          "negativeExamples": [
            "current_datetime"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "datetime"
          ],
          "negativeExamples": [
            "duration"
          ],
          "rationale": null
        }
      ],
      "priority": 4940,
      "explanation": "This semantic type identifies datetime fields that specifically capture the timestamp of the immediately preceding transaction in a sequence. It's commonly used in financial systems, audit trails, and transaction processing systems where maintaining chronological context is crucial for pattern analysis, fraud detection, and historical tracking. The type supports various datetime formats including ISO 8601, standard US formats, and formats with timezone information to accommodate different system requirements and international usage.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P2",
      "generated_at": "2025-08-08T11:04:30.335829"
    }
  ]
}