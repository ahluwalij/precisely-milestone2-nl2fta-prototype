[
  {
    "resultType": "generated",
    "semanticType": "parent",
    "description": "Full name of a parent or guardian recorded as two tokens: first name and family name separated by a single space. Each token starts with an uppercase letter and may include a single internal hyphen or apostrophe.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{1,29}([\\-'][A-Z][a-z]{1,29})? [A-Z][a-z]{1,29}([\\-'][A-Z][a-z]{1,29})?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4370,
    "headerPatterns": [
      {
        "regExp": "(?i).*parent.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "parent_full_name"
        ],
        "negativeExamples": [
          "parent_first_name"
        ]
      },
      {
        "regExp": "(?i).*guardian.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "guardian_full_name"
        ],
        "negativeExamples": [
          "guardian_phone"
        ]
      },
      {
        "regExp": "(?i).*(primary|secondary).*parent.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "primary_parent_name"
        ],
        "negativeExamples": [
          "parent_email"
        ]
      },
      {
        "regExp": "(?i).*(prnt|guard).*full.*(name|nm).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prnt_full_nm"
        ],
        "negativeExamples": [
          "guard_id"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "parent name"
        ],
        "negativeExamples": [
          "parent_id"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Maria Garcia",
      "Anne-Marie Clark",
      "James O'Connor",
      "Li Wang",
      "Peter Johnson",
      "Chloe Brown",
      "Sara Lee"
    ],
    "negativeContentExamples": [
      "john smith",
      "John A. Smith",
      "J Smith",
      "Smith John",
      "John",
      "John Smith Jr",
      "John  Smith",
      "John-Smith"
    ],
    "positiveHeaderExamples": [
      "parent_full_name",
      "parent name",
      "guardian_full_name",
      "primary_parent_name",
      "parentname",
      "parent full name",
      "main_parent_name",
      "prnt_full_nm"
    ],
    "negativeHeaderExamples": [
      "parent_id",
      "guardian_phone",
      "student_name",
      "parent_first_name",
      "parent_last_name",
      "parent_address",
      "father_name",
      "parent_email"
    ],
    "explanation": "This semantic type identifies a parent's or guardian's full name as two words: a capitalized first name and a capitalized last name separated by a space, allowing a single internal hyphen or apostrophe within either token. It is suitable for columns that store combined first and last names for parental contacts in enrollment, CRM, or case management data.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:44.957940"
  },
  {
    "resultType": "generated",
    "semanticType": "start",
    "description": "epoch_seconds: standard Unix timestamp in seconds. Represents a start time as a 10-digit integer count of seconds since 1970-01-01T00:00:00Z, with no separators or decimals. Values are strictly numeric and typically non-negative.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9][0-9]{9}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 4380,
    "headerPatterns": [
      {
        "regExp": "(?i).*start.*epoch.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "start_epoch_seconds"
        ],
        "negativeExamples": [
          "end_epoch_seconds"
        ]
      },
      {
        "regExp": "(?i).*start.*unix.*timestamp.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "start_unix_timestamp"
        ],
        "negativeExamples": [
          "unix_timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*start.*epoch.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "start_epoch"
        ],
        "negativeExamples": [
          "epoch_millis"
        ]
      },
      {
        "regExp": "(?i).*start.*unix.*time.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "session_start_unix_time"
        ],
        "negativeExamples": [
          "local_time"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "timestamp"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      }
    ],
    "positiveContentExamples": [
      "1234567890",
      "1609459200",
      "1700000000",
      "2147483647",
      "1672531200",
      "1893456000",
      "1735689600",
      "1464739200"
    ],
    "negativeContentExamples": [
      "1700000000000",
      "946684800",
      "-1700000000",
      "1700000000.0",
      "1,700,000,000",
      "0214748364",
      "170000000O",
      "1700 000000"
    ],
    "positiveHeaderExamples": [
      "start_epoch_seconds",
      "start_unix_timestamp",
      "start_epoch",
      "event_start_epoch_sec",
      "job_start_timestamp_sec",
      "session_start_unix_time",
      "start_time_epoch",
      "start_time_unix"
    ],
    "negativeHeaderExamples": [
      "end_epoch_seconds",
      "timestamp_ms",
      "epoch_millis",
      "duration_seconds",
      "date",
      "created_time_ms",
      "offset_seconds",
      "ts_iso8601"
    ],
    "explanation": "Classifies numeric fields representing start times stored as Unix epoch seconds (10-digit integers). Use when data values are strictly 10 numeric characters with no signs, separators, or decimals, and headers indicate start-related epoch/timestamp semantics (especially epoch/unix seconds). This avoids conflating with millisecond timestamps or general time fields.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:46.380522"
  },
  {
    "resultType": "generated",
    "semanticType": "location",
    "description": "GPS Position: comma-separated latitude-longitude pair in decimal degrees. Latitude must be between -90 and 90, longitude between -180 and 180, optional leading sign, and optional fractional part.",
    "pluginType": "regex",
    "regexPattern": "\\b[+-]?((90(\\.0+)?)|([0-8]?\\d(\\.\\d+)?))\\s*,\\s*[+-]?((180(\\.0+)?)|((1[0-7]\\d|0?\\d?\\d)(\\.\\d+)?))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 4110,
    "headerPatterns": [
      {
        "regExp": "(?i).*(gps|geo).*(latitude|lat).*(longitude|lon).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "gps_latitude_longitude"
        ],
        "negativeExamples": [
          "gps_longitude"
        ]
      },
      {
        "regExp": "(?i).*(latitude[_-]?longitude|lat[_-]?lon).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "latitude_longitude"
        ],
        "negativeExamples": [
          "lat_value"
        ]
      },
      {
        "regExp": "(?i).*(gps|geo).*coordinates.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "geo_coordinates"
        ],
        "negativeExamples": [
          "geo_code"
        ]
      },
      {
        "regExp": "(?i).*(latlon|latlng|lat_long).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "latlng"
        ],
        "negativeExamples": [
          "lng_lat"
        ]
      },
      {
        "regExp": "(?i).*coordinate.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "coordinate"
        ],
        "negativeExamples": [
          "location"
        ]
      }
    ],
    "positiveContentExamples": [
      "37.7749, -122.4194",
      "-33.8688, 151.2093",
      "0, 0",
      "90, 180",
      "45, 9",
      "-12.5, +130.75",
      "51.5074, -0.1278",
      "89.9999, -179.9999"
    ],
    "negativeContentExamples": [
      "91, 181",
      "37.7749 -122.4194",
      "N37.7749, W122.4194",
      "37.7749, -",
      "37.7749, -122.4194, 15",
      "89.5; -179.5",
      "45.0,",
      "12.34, -200"
    ],
    "positiveHeaderExamples": [
      "gps_latitude_longitude",
      "latitude_longitude",
      "geo_coordinates",
      "latlon",
      "latlng",
      "coordinate",
      "lat_long"
    ],
    "negativeHeaderExamples": [
      "gps_longitude",
      "latitude",
      "geo_code",
      "location_name",
      "gps_status",
      "geo_location",
      "postal_code",
      "lat_value"
    ],
    "explanation": "This semantic type identifies decimal-degree GPS coordinate pairs formatted as a latitude and longitude separated by a comma, with optional whitespace and signs. It is useful for columns storing geospatial positions for mapping, geocoding, and spatial analytics.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:46.829142"
  },
  {
    "resultType": "generated",
    "semanticType": "domain",
    "description": "web_address: complete URL for network resource access. Identifies fully qualified HTTP, HTTPS, or FTP URLs that include a scheme, a hostname with a valid top-level domain, and optional port, path, query, or fragment components.",
    "pluginType": "regex",
    "regexPattern": "\\b(https?|ftp)://[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*\\.[A-Za-z]{2,}(:[0-9]{2,5})?(/[A-Za-z0-9._~!$&'()*+,;=:@%/?#-]*)?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4340,
    "headerPatterns": [
      {
        "regExp": "(?i).*(landing|destination|redirect).*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "landing_page_url"
        ],
        "negativeExamples": [
          "page_title"
        ]
      },
      {
        "regExp": "(?i).*(website|web).*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "website_url"
        ],
        "negativeExamples": [
          "user_email"
        ]
      },
      {
        "regExp": "(?i).*(resource|page|target).*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "resource_url"
        ],
        "negativeExamples": [
          "resource_id"
        ]
      },
      {
        "regExp": "(?i).*(full|canonical).*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "full_url"
        ],
        "negativeExamples": [
          "full_name"
        ]
      },
      {
        "regExp": "(?i).*url.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "url"
        ],
        "negativeExamples": [
          "uri"
        ]
      }
    ],
    "positiveContentExamples": [
      "https://example.com",
      "http://example.org/path",
      "https://sub.domain.co.uk/path/to/page?query=1",
      "https://shop.example.com:8080/cart/items?ref=aa#top",
      "ftp://files.example.net/downloads/release_v1.0.zip",
      "https://api.example.io/v1/users?active=true&sort=name",
      "http://news.example-news.com/articles/2025/07/title"
    ],
    "negativeContentExamples": [
      "www.example.com/path",
      "http//example.com",
      "https://example",
      "https://.com",
      "mailto:user@example.com",
      "https://example.c",
      "https://example .com/path"
    ],
    "positiveHeaderExamples": [
      "website_url",
      "web_address",
      "resource_url",
      "landing_page_url",
      "page_url",
      "target_url",
      "redirect_url"
    ],
    "negativeHeaderExamples": [
      "user_email",
      "ip_address",
      "file_path",
      "domain_name",
      "image_uri",
      "tracking_id",
      "phone_number"
    ],
    "explanation": "This semantic type detects fully qualified web addresses (URLs) that begin with http, https, or ftp and include a valid hostname with a top-level domain. It is useful for classifying fields that store links to web resources, landing pages, API endpoints, and downloadable assets.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:46.885308"
  },
  {
    "resultType": "generated",
    "semanticType": "language",
    "description": "spoken_language: full name of natural language in English",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]+([-'][A-Za-z]+)?( [A-Z][a-z]+([-'][A-Za-z]+)?){0,3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 4440,
    "headerPatterns": [
      {
        "regExp": "(?i).*spoken[_ ]?language.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "spoken_language"
        ],
        "negativeExamples": [
          "programming_language"
        ]
      },
      {
        "regExp": "(?i).*language[_ ]?name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "language_name"
        ],
        "negativeExamples": [
          "language_code"
        ]
      },
      {
        "regExp": "(?i).*preferred[_ ]?language.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "preferred_language"
        ],
        "negativeExamples": [
          "primary_language"
        ]
      },
      {
        "regExp": "(?i).*pref[_ ]?lang.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "pref_lang"
        ],
        "negativeExamples": [
          "user_language"
        ]
      },
      {
        "regExp": "(?i).*language.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "language"
        ],
        "negativeExamples": [
          "locale"
        ]
      }
    ],
    "positiveContentExamples": [
      "English",
      "Spanish",
      "Mandarin Chinese",
      "American Sign Language",
      "Brazilian Portuguese",
      "Serbo-Croatian",
      "Old Church Slavonic",
      "Quechua"
    ],
    "negativeContentExamples": [
      "english",
      "ENGLISH",
      "Chinese (Simplified)",
      "Proto-Indo-European",
      "Portugu\u00e9s",
      "German/Swiss",
      "Langue fran\u00e7aise",
      "ASL"
    ],
    "positiveHeaderExamples": [
      "spoken_language",
      "language_name",
      "preferred_language",
      "native_language",
      "customer_language",
      "user_spoken_language",
      "applicant_language",
      "primary_language"
    ],
    "negativeHeaderExamples": [
      "programming_language",
      "language_code",
      "locale",
      "country",
      "timezone",
      "currency",
      "language_id",
      "iso_language"
    ],
    "explanation": "Identifies values that are full, English-language names of natural human languages. Typical inputs are capitalized words or multi-word phrases such as English, Mandarin Chinese, or American Sign Language. The pattern allows 1\u20134 capitalized tokens with optional internal hyphen or apostrophe, and excludes codes, abbreviations, and values with punctuation or parentheses.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:49.377048"
  },
  {
    "resultType": "generated",
    "semanticType": "source",
    "description": "web_address: complete URL for network resource access",
    "pluginType": "regex",
    "regexPattern": "\\b(https?|ftp)://(([A-Za-z0-9-]+\\.)+[A-Za-z]{2,63}|(\\d{1,3}\\.){3}\\d{1,3}|localhost)(:[0-9]{1,5})?(/[A-Za-z0-9._~:/?#\\[\\]@!$&'()*+,;=%-]*)?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 4180,
    "headerPatterns": [
      {
        "regExp": "(?i).*(source|src)[ _-]*(url|uri|link).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "source_url"
        ],
        "negativeExamples": [
          "homepage_url"
        ]
      },
      {
        "regExp": "(?i).*(origin)[ _-]*(url|uri|link).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "origin_url"
        ],
        "negativeExamples": [
          "origin_id"
        ]
      },
      {
        "regExp": "(?i).*(source|src)[ _-]*web[ _-]*address.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "source_web_address"
        ],
        "negativeExamples": [
          "billing_address"
        ]
      },
      {
        "regExp": "(?i).*(data[ _-]*source).*(url|uri|link).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "data_source_url"
        ],
        "negativeExamples": [
          "data_source_id"
        ]
      },
      {
        "regExp": "(?i).*url.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "url"
        ],
        "negativeExamples": [
          "address"
        ]
      }
    ],
    "positiveContentExamples": [
      "http://example.com",
      "https://example.org/resource",
      "https://sub.example.co.uk/path/to/page?x=1&y=two",
      "ftp://ftp.example.com/pub/file.txt",
      "https://192.168.1.10:8080/api/v1/status",
      "https://localhost:3000/",
      "http://example.com#top",
      "https://example.com/a%20b?c=d"
    ],
    "negativeContentExamples": [
      "www.example.com",
      "http:/example.com",
      "https://",
      "mailto:user@example.com",
      "sftp://example.com",
      "https:// example.com/path",
      "file:///C:/path/to/file.txt",
      "http://example"
    ],
    "positiveHeaderExamples": [
      "source_url",
      "src_url",
      "source_uri",
      "origin_url",
      "source_link",
      "data_source_url",
      "ref_source_url",
      "source_web_address"
    ],
    "negativeHeaderExamples": [
      "homepage_url",
      "source_file",
      "url_path",
      "referrer",
      "email_address",
      "ip_address",
      "cust_source",
      "billing_address"
    ],
    "explanation": "This semantic type identifies complete web addresses (URLs) that include an explicit scheme (http, https, or ftp), a valid host (domain, IPv4 address, or localhost), and optional port, path, query, or fragment components. Use it to classify columns that store the originating or reference URL for a record, such as where data was sourced or fetched from.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:51.628816"
  },
  {
    "resultType": "generated",
    "semanticType": "position",
    "description": "Professional role or occupation designation used to describe an individual's job title, such as 'Senior Product Manager' or 'VP of Finance'. Suitable for free-text position titles that use words, acronyms, and standard connectors like of/and/for.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z]{2,5}|[A-Z][a-z]{1,}\\.|[A-Z][a-z]{1,})([ ,/&-]([A-Z]{2,5}|[A-Z][a-z]{1,}\\.|[A-Z][a-z]{1,}|of|and|for|the|to)){0,6}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 4290,
    "headerPatterns": [
      {
        "regExp": "(?i).*employee.*position.*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "employee_position_title"
        ],
        "negativeExamples": [
          "employee_position_id"
        ]
      },
      {
        "regExp": "(?i).*(job|position|role).*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "job_title"
        ],
        "negativeExamples": [
          "job_code"
        ]
      },
      {
        "regExp": "(?i).*(position|job|role).*(name|desc|designation).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "position_name"
        ],
        "negativeExamples": [
          "role_level"
        ]
      },
      {
        "regExp": "(?i).*(pos|jt|rol).*(title|ttl).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "jt_title"
        ],
        "negativeExamples": [
          "pos_code"
        ]
      },
      {
        "regExp": "(?i).*title.*",
        "confidence": 91,
        "mandatory": true,
        "positiveExamples": [
          "title"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Software Engineer",
      "Senior Product Manager",
      "VP of Finance",
      "Chief Executive Officer",
      "Registered Nurse",
      "Head of Operations",
      "QA Analyst",
      "Director, Marketing"
    ],
    "negativeContentExamples": [
      "software engineer",
      "123 Manager",
      "Product Manager (EMEA)",
      "Role: Product Manager",
      "Position 1",
      "C.E.O.",
      "S/W Engineer",
      "Project mgr"
    ],
    "positiveHeaderExamples": [
      "employee_position_title",
      "job_title",
      "position_name",
      "role_title",
      "staff_title",
      "title"
    ],
    "negativeHeaderExamples": [
      "job_code",
      "position_id",
      "employee_role_level",
      "title_date",
      "job_number",
      "position_status"
    ],
    "explanation": "This semantic type identifies free-text job/position titles, capturing common capitalization, acronyms (e.g., VP, CEO), and connectors like 'of' and 'for'. Use it to classify columns containing human-readable position titles rather than codes or numeric identifiers.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:54.078906"
  },
  {
    "resultType": "generated",
    "semanticType": "part",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]+([ ,;:'\"\\-\\.]+[A-Za-z]+){4,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4210,
    "headerPatterns": [
      {
        "regExp": "(?i).*(article|message|post).*body.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "article_body"
        ],
        "negativeExamples": [
          "article_id"
        ]
      },
      {
        "regExp": "(?i).*(customer|user|client).*(comments|feedback|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(case|ticket|order|record).*(notes|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_notes"
        ],
        "negativeExamples": [
          "case_number"
        ]
      },
      {
        "regExp": "(?i).*(description|details|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_description"
        ],
        "negativeExamples": [
          "item_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "subject"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog near the river bank.",
      "This section provides a detailed overview of the project goals and constraints.",
      "Customers reported intermittent issues during checkout when using older browsers.",
      "Please include a concise summary followed by a step by step explanation.",
      "The apartment features hardwood floors ample light and a renovated kitchen.",
      "In conclusion the results indicate a modest improvement across all metrics.",
      "Our mission is to deliver reliable services with clear communication and accountability.",
      "After careful review the committee recommended minor revisions to the final draft."
    ],
    "negativeContentExamples": [
      "Great product!",
      "Pending further review",
      "Not available at present",
      "Issue 12345 unresolved",
      "High-quality materials",
      "To be determined",
      "Short note only",
      "Reference manual"
    ],
    "positiveHeaderExamples": [
      "article_body",
      "customer_comments",
      "case_notes",
      "item_description",
      "record_narrative",
      "message_text",
      "user_feedback",
      "order_remarks"
    ],
    "negativeHeaderExamples": [
      "article_id",
      "customer_id",
      "case_number",
      "item_code",
      "record_status",
      "message_type",
      "user_email",
      "order_total"
    ],
    "explanation": "This semantic type targets free-form narrative or descriptive blocks of text, such as descriptions, notes, comments, and bodies of articles or messages. It is designed to recognize values containing multiple alphabetic words typical of prose, reducing false positives from short labels or codes. The header patterns prioritize specific variants like article_body and customer_comments, then broaden to notes/description and finally the primitive term text.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:54.498685"
  },
  {
    "resultType": "generated",
    "semanticType": "owner",
    "description": "Full person name: a first (given) name followed by a family (surname) name separated by a single space. Each token starts with an uppercase letter and may include a single internal hyphen or apostrophe.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{1,30}(['-][A-Za-z]{2,30})?\\s+[A-Z][a-z]{1,30}(['-][A-Za-z]{2,30})?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 4260,
    "headerPatterns": [
      {
        "regExp": "(?i).*owner[ _-]*full[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "owner_full_name"
        ],
        "negativeExamples": [
          "owner_first_name"
        ]
      },
      {
        "regExp": "(?i).*(account|property|policy|vehicle)[ _-]*owner[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "account_owner_name"
        ],
        "negativeExamples": [
          "account_holder_name"
        ]
      },
      {
        "regExp": "(?i).*owner[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ownerName"
        ],
        "negativeExamples": [
          "previous_owner_id"
        ]
      },
      {
        "regExp": "(?i).*(ownr|own)[ _-]*(nm|name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ownr_nm"
        ],
        "negativeExamples": [
          "own_id"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "email"
        ]
      }
    ],
    "positiveContentExamples": [
      "Liam Nguyen",
      "Ava O'Connor",
      "Jean-Luc Martin",
      "Maria Garcia",
      "Peter O'Brien",
      "Sofia Rossi",
      "Daniel Kim",
      "Chloe Dubois"
    ],
    "negativeContentExamples": [
      "Liam R. Nguyen",
      "NGUYEN LIAM",
      "Liam",
      "liam Nguyen",
      "Ava O Connor",
      "Jean Luc Picard",
      "Peter OBrien",
      "Daniel-Kim"
    ],
    "positiveHeaderExamples": [
      "owner_full_name",
      "account_owner_name",
      "property_owner_full_name",
      "vehicleOwnerName",
      "policy_owner_name",
      "owner name",
      "ownr_nm",
      "own_name"
    ],
    "negativeHeaderExamples": [
      "owner_id",
      "previous_owner",
      "account_holder_name",
      "owner_email",
      "username",
      "customer_name",
      "owner_address",
      "policy_owner_number"
    ],
    "explanation": "This semantic type identifies an 'owner' full name as two name tokens (given name and surname) separated by a single space, with optional internal hyphen or apostrophe in each token. It targets datasets where the role is specifically the owner (e.g., account, property, vehicle) and the value is the owner's full name.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:54.605111"
  },
  {
    "resultType": "generated",
    "semanticType": "date",
    "description": "Standard Unix timestamp expressed as whole seconds since 1970-01-01T00:00:00Z (UTC). Values are integer seconds, typically 9\u201310 digits for historical to near-future dates, and may be negative for pre-1970 dates.",
    "pluginType": "regex",
    "regexPattern": "\\b-?\\d{9,10}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4060,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\b(unix|epoch)\\b.*\\b(timestamp|time|ts)\\b.*\\b(sec|secs|seconds)\\b.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "unix_timestamp_seconds"
        ],
        "negativeExamples": [
          "unix_timestamp_millis"
        ]
      },
      {
        "regExp": "(?i).*\\b(epoch|unix)\\b.*\\b(sec|secs|seconds)\\b.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "epoch_seconds"
        ],
        "negativeExamples": [
          "epoch_milliseconds"
        ]
      },
      {
        "regExp": "(?i).*\\b(epoch|unix)\\b.*\\b(timestamp|time|ts)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "login_unix_time"
        ],
        "negativeExamples": [
          "unix_code"
        ]
      },
      {
        "regExp": "(?i).*\\b(ts|timestamp)\\b.*\\b(sec|secs|seconds)\\b.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "timestamp_sec"
        ],
        "negativeExamples": [
          "response_time_seconds"
        ]
      },
      {
        "regExp": "(?i).*date.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "event_date"
        ],
        "negativeExamples": [
          "event_time"
        ]
      }
    ],
    "positiveContentExamples": [
      "1609459200",
      "946684800",
      "1234567890",
      "915148800",
      "1704067200",
      "-315619200",
      "4070908800",
      "1000000000"
    ],
    "negativeContentExamples": [
      "1609459200000",
      "99999999999",
      "1609459200.0",
      "+1609459200",
      "1_609_459_200",
      "16094592",
      "1970-01-01",
      "1609459200Z"
    ],
    "positiveHeaderExamples": [
      "unix_timestamp_seconds",
      "epoch_seconds",
      "timestamp_sec",
      "unix_ts_seconds",
      "created_epoch_seconds",
      "event_epoch_sec",
      "login_unix_time",
      "event_date_epoch"
    ],
    "negativeHeaderExamples": [
      "timestamp_ms",
      "unix_millis",
      "response_time_seconds",
      "duration_seconds",
      "iso8601_timestamp",
      "human_readable_time",
      "created_at",
      "seconds_since_start"
    ],
    "explanation": "This semantic type targets integer Unix time in seconds, commonly used in log data and event tracking where compact numeric time is preferred. It intentionally excludes millisecond (13-digit) and sub-second forms, as well as formatted date/time strings. Pair with header cues mentioning epoch/unix and seconds for higher confidence.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:54.635629"
  },
  {
    "resultType": "generated",
    "semanticType": "description",
    "description": "Free-form narrative text intended to describe or explain an entity, event, or record. Typically consists of multiple words and sentences, may include punctuation, and is not constrained to a fixed schema.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]{2,}\\b[ \\t]+\\b[A-Za-z][A-Za-z'-]{2,}\\b[ \\t]+\\b[A-Za-z][A-Za-z'-]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4010,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|order)[ _-]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(long|detailed)[ _-]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "long_code"
        ]
      },
      {
        "regExp": "(?i).*(issue|ticket|case)[ _-]*(details|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_details"
        ],
        "negativeExamples": [
          "issue_number"
        ]
      },
      {
        "regExp": "(?i).*(notes|remarks|narrative|details|summary)[ _-]*(text|field|desc).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks_text"
        ],
        "negativeExamples": [
          "remarks_code"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|text)[ _-]*(field|info).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "desc_field"
        ],
        "negativeExamples": [
          "text_code"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "User reported intermittent failures during upload",
      "Detailed description of the event timeline",
      "Customer noted a slight color variation on delivery",
      "Steps to reproduce the issue are listed below",
      "Package arrived damaged with dents on the corner",
      "This section summarizes key findings from testing",
      "Background information relevant to this record",
      "Observed behavior patterns during peak traffic"
    ],
    "negativeContentExamples": [
      "Pending review",
      "See above",
      "In progress now",
      "TBD later",
      "OK to ship",
      "2019 report",
      "N/A",
      "High-priority bug"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "item_long_description",
      "order_description",
      "remarks_text",
      "issue_details_text",
      "detailed_description",
      "customer_notes",
      "description"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "item_name",
      "order_number",
      "status",
      "remarks_code",
      "notes_flag",
      "summary_count",
      "comment_id"
    ],
    "explanation": "This semantic type targets columns containing unrestricted narrative descriptions, typically multi-word free text used to explain or elaborate on records. It suits fields like product descriptions, issue details, or general remarks where content length and vocabulary vary widely.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:57.646783"
  },
  {
    "resultType": "generated",
    "semanticType": "topic",
    "description": "Unrestricted narrative or descriptive text intended for free-form content fields, such as notes, explanations, or message bodies. This type captures multi-word natural language text rather than short labels or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-]{1,}\\b([ ,.;:!?-]+\\b[A-Za-z][A-Za-z0-9'\u2019\\-]{1,}\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4460,
    "headerPatterns": [
      {
        "regExp": "(?i).*topic.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "topic_text"
        ],
        "negativeExamples": [
          "topic_id"
        ]
      },
      {
        "regExp": "(?i).*message.*body.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "message_body"
        ],
        "negativeExamples": [
          "body_length"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_details"
        ]
      },
      {
        "regExp": "(?i).*desc.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "item_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "username"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported intermittent outages during peak hours.",
      "The shipment was delayed due to adverse weather conditions along the route.",
      "A concise overview of the quarterly performance and key risks.",
      "User describes difficulty logging in after password reset.",
      "This policy outlines the steps required to request reimbursement.",
      "Notes from the call summarizing action items and next steps.",
      "Detailed explanation of test setup, parameters, and outcomes."
    ],
    "negativeContentExamples": [
      "OK",
      "N/A",
      "Pending",
      "High-priority",
      "Login failed",
      "2024-05-01 meeting",
      "See appendix",
      "Draft"
    ],
    "positiveHeaderExamples": [
      "topic_text",
      "message_body",
      "product_description",
      "long_description",
      "item_desc",
      "free_text",
      "case_text",
      "ticket_desc"
    ],
    "negativeHeaderExamples": [
      "topic_id",
      "body_length",
      "message_count",
      "subject_line",
      "product_details",
      "body_html",
      "comment_notes",
      "content_type"
    ],
    "explanation": "This semantic type identifies free-form narrative or descriptive text fields that contain multi-word natural language content, such as notes, explanations, and message bodies. It uses a regex requiring at least three word tokens to distinguish substantive text from short labels, statuses, or codes. Header patterns prioritize specific variants (topic_text, message_body), then common descriptors (description, desc), and finally the primitive term (text) to robustly align with typical column naming.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:58.000328"
  },
  {
    "resultType": "generated",
    "semanticType": "region",
    "description": "us_state_name: complete American state designation. Values are full names of U.S. states, written out completely (no abbreviations), typically one to three words.",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "ALABAMA",
      "ALASKA",
      "ARIZONA",
      "ARKANSAS",
      "CALIFORNIA",
      "COLORADO",
      "CONNECTICUT",
      "DELAWARE",
      "FLORIDA",
      "GEORGIA",
      "HAWAII",
      "IDAHO",
      "ILLINOIS",
      "INDIANA",
      "IOWA",
      "KANSAS",
      "KENTUCKY",
      "LOUISIANA",
      "MAINE",
      "MARYLAND",
      "MASSACHUSETTS",
      "MICHIGAN",
      "MINNESOTA",
      "MISSISSIPPI",
      "MISSOURI"
    ],
    "backout": "^[A-Za-z]{2,14}( [A-Za-z]{2,14}){0,2}$",
    "confidenceThreshold": 97,
    "priority": 4400,
    "headerPatterns": [
      {
        "regExp": "(?i).*us[ _-]*state[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "us_state_name"
        ],
        "negativeExamples": [
          "state_code"
        ]
      },
      {
        "regExp": "(?i).*state[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "state_name"
        ],
        "negativeExamples": [
          "statement_name"
        ]
      },
      {
        "regExp": "(?i).*(billing|shipping|home|customer)[ _-]*state.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "billing_state"
        ],
        "negativeExamples": [
          "billing_status"
        ]
      },
      {
        "regExp": "(?i).*st[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "st_name"
        ],
        "negativeExamples": [
          "st_code"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "CALIFORNIA",
      "COLORADO",
      "CONNECTICUT",
      "FLORIDA",
      "GEORGIA",
      "ILLINOIS",
      "MASSACHUSETTS",
      "MISSOURI"
    ],
    "negativeContentExamples": [
      "CA",
      "CALIFORNIA STATE",
      "NEW-YORK",
      "WASHINGTON, D.C.",
      "PUERTO RICO",
      "RHODEISLAND",
      "MISSOURRI",
      "GEORGIA."
    ],
    "positiveHeaderExamples": [
      "us_state_name",
      "state_name",
      "billing_state",
      "shipping_state",
      "home_state",
      "customer_state",
      "st_name",
      "us_region_name"
    ],
    "negativeHeaderExamples": [
      "state_code",
      "province_name",
      "country_name",
      "status",
      "statement_date",
      "us_territory",
      "county_name",
      "region_code"
    ],
    "explanation": "This semantic type identifies full U.S. state names spelled out completely (e.g., CALIFORNIA, MASSACHUSETTS). It is intended for columns storing human-readable state names rather than abbreviated codes, and helps distinguish U.S. state name data in address, demographic, or customer datasets.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:58.176467"
  },
  {
    "resultType": "generated",
    "semanticType": "population",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9,.;:'\"()/-]* [A-Za-z0-9 ,.;:'\"()/-]{30,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4270,
    "headerPatterns": [
      {
        "regExp": "(?i).*population.*(description|summary|notes|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "population_description"
        ],
        "negativeExamples": [
          "population_count"
        ]
      },
      {
        "regExp": "(?i).*(demographic|demographics).*(summary|text|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "demographics_text"
        ],
        "negativeExamples": [
          "demographic_code"
        ]
      },
      {
        "regExp": "(?i).*population.*(overview|details|comment|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "population_overview"
        ],
        "negativeExamples": [
          "people_overview"
        ]
      },
      {
        "regExp": "(?i).*(pop|demo|demog).*(desc|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "pop_text"
        ],
        "negativeExamples": [
          "pop_total"
        ]
      },
      {
        "regExp": "(?i).*population.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "population"
        ],
        "negativeExamples": [
          "people"
        ]
      }
    ],
    "positiveContentExamples": [
      "The city's population has grown steadily since 2000, reaching an estimated 245,000 residents in 2020.",
      "Population trends indicate sustained in-migration, with younger households driving growth across the northern districts.",
      "As of the latest census, the municipality shows a diverse age structure, with median age declining over the past decade.",
      "Rural areas experienced modest increases, while urban neighborhoods saw faster population gains due to new housing developments.",
      "Seasonal population fluctuations are evident, particularly during summer months when temporary residents arrive.",
      "Household size has decreased slightly, reflecting shifting demographics and changing housing preferences.",
      "Population density remains highest near transit corridors, where recent projects have added thousands of residents."
    ],
    "negativeContentExamples": [
      "Population: 245,000",
      "245000",
      "Pop 2019 est: 2.45M",
      "2010\u20132020 growth: +12%",
      "Pop total 2020",
      "245k residents",
      "Est. 2020: 245,000"
    ],
    "positiveHeaderExamples": [
      "population_description",
      "population_summary",
      "population_notes",
      "demographics_text",
      "population_narrative",
      "population_overview",
      "demographic_summary",
      "population_details"
    ],
    "negativeHeaderExamples": [
      "population",
      "population_count",
      "population_estimate",
      "pop_total",
      "population_2020",
      "residents_number",
      "population_code",
      "people_count"
    ],
    "explanation": "This semantic type targets narrative or descriptive text specifically associated with population-related fields, such as summaries, notes, and overviews. It is designed to capture longer free-text content rather than numeric counts, estimates, or codes, and uses conservative patterning to avoid over-matching. Use this type to identify columns where human-readable descriptions of population context, changes, or characteristics are stored, not the raw totals.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:59.513016"
  },
  {
    "resultType": "generated",
    "semanticType": "value",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'\\-]+([ \\t,;:!?\\.\\(\\)\"]+[A-Za-z][A-Za-z'\\-]+){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4430,
    "headerPatterns": [
      {
        "regExp": "(?i).*(text|narrative).*(content|body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_text_content"
        ],
        "negativeExamples": [
          "product_content_code"
        ]
      },
      {
        "regExp": "(?i).*(long|freeform|free|unstructured).*(text|content).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "freeform_text"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(description|desc|details).*(text|content|body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description_text"
        ],
        "negativeExamples": [
          "product_description_code"
        ]
      },
      {
        "regExp": "(?i).*(note|notes|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_feedback"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Package arrived earlier than expected and was well packaged.",
      "Customer reported intermittent issues during login after the update.",
      "This lightweight jacket is perfect for cool evenings in spring.",
      "Please provide detailed summary of meeting outcomes and action items.",
      "The methodology outlines steps for data collection, analysis, and reporting.",
      "Our mission emphasizes reliable service and transparent communication.",
      "Payment delays were caused by internal approvals and system maintenance.",
      "Use cases include onboarding guidance, feature highlights, and best practices."
    ],
    "negativeContentExamples": [
      "Value: 12345",
      "OK",
      "Error: E12-9",
      "Main description",
      "Lorem ipsum",
      "Status updated",
      "Notes",
      "Updated on 2023-10-05"
    ],
    "positiveHeaderExamples": [
      "long_text_content",
      "narrative_body",
      "freeform_text",
      "unstructured_content",
      "product_description_text",
      "customer_notes",
      "details_description"
    ],
    "negativeHeaderExamples": [
      "status_code",
      "customer_name",
      "order_number",
      "created_date",
      "ip_address",
      "latitude",
      "description_code"
    ],
    "explanation": "This semantic type targets freeform narrative or descriptive text fields that contain multiple words and sentences. The regex favors sequences of three or more alphabetic words separated by spaces or common punctuation to distinguish narrative text from short labels, codes, or identifiers.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:54:59.801254"
  },
  {
    "resultType": "generated",
    "semanticType": "year",
    "description": "Time span capturing a beginning and ending year as a duration period. Values are two four-digit years (typically 1800\u20132099) separated by a hyphen, dash, slash, or the word \"to\" with optional spaces, e.g., 1999-2005, 1980 to 1989, 2001\u20132003.",
    "pluginType": "regex",
    "regexPattern": "\\b(18|19|20)\\d{2}\\s*(-|\u2013|\u2014|/|\\s+to\\s+)\\s*(18|19|20)\\d{2}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4150,
    "headerPatterns": [
      {
        "regExp": "(?i).*(employment|project|coverage|validity).*year.*(range|span|period).*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "employment_year_range"
        ],
        "negativeExamples": [
          "employment_start_date"
        ]
      },
      {
        "regExp": "(?i).*(from|start).*year.*(to|end).*year.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "from_year_to_year"
        ],
        "negativeExamples": [
          "fiscal_year"
        ]
      },
      {
        "regExp": "(?i).*(years|yrs).*(duration|tenure|term|coverage).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "years_of_coverage"
        ],
        "negativeExamples": [
          "year_built"
        ]
      },
      {
        "regExp": "(?i).*(year|yrs).*(range|span).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "year_span"
        ],
        "negativeExamples": [
          "year_month"
        ]
      },
      {
        "regExp": "(?i).*year.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "year"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "1999-2005",
      "2001\u20132003",
      "2010/2012",
      "1980 to 1989",
      "2000 \u2014 2001",
      "2015-2015",
      "1890\u20131900",
      "2020-2021"
    ],
    "negativeContentExamples": [
      "2010-12-05",
      "2010-201",
      "1999/00",
      "2019 to 21",
      "1890\u201300",
      "202-2023",
      "2015\u201320158",
      "0099-2010"
    ],
    "positiveHeaderExamples": [
      "employment_year_range",
      "project_year_span",
      "coverage_years_period",
      "validity_year_range",
      "from_year_to_year",
      "years_of_coverage",
      "contract_year_span",
      "service_years_range"
    ],
    "negativeHeaderExamples": [
      "year_built",
      "fiscal_year",
      "tax_year",
      "birth_year",
      "transaction_date",
      "year_month",
      "manufacture_year",
      "age_years"
    ],
    "explanation": "This semantic type identifies values that represent a span of time expressed solely as two four-digit years with a clear separator, suitable for fields like employment periods, project durations, or coverage windows. It intentionally excludes single years, partial years, and dates with months or days to minimize ambiguity and false positives.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:00.949517"
  },
  {
    "resultType": "generated",
    "semanticType": "district",
    "description": "Portuguese territory: district administrative unit",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "AVEIRO",
      "BEJA",
      "BRAGA",
      "BRAGAN\u00c7A",
      "CASTELO BRANCO",
      "COIMBRA",
      "\u00c9VORA",
      "FARO",
      "GUARDA",
      "LEIRIA",
      "LISBOA",
      "PORTALEGRE",
      "PORTO",
      "SANTAR\u00c9M",
      "SET\u00daBAL",
      "VIANA DO CASTELO",
      "VILA REAL",
      "VISEU"
    ],
    "backout": "^[A-Z\u00c0-\u00da\u00c7\u00c3\u00d5\u00c9\u00ca\u00c1\u00cd\u00d3\u00d4\u00c2\u00dc ]{3,20}$",
    "confidenceThreshold": 98,
    "priority": 4410,
    "headerPatterns": [
      {
        "regExp": "(?i).*(portugal|portuguese|pt).*district.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "portugal_district"
        ],
        "negativeExamples": [
          "district_id"
        ]
      },
      {
        "regExp": "(?i).*(address|location|residence|birth).*district.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "residence_district"
        ],
        "negativeExamples": [
          "address_region"
        ]
      },
      {
        "regExp": "(?i).*(distrito).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "location_distrito"
        ],
        "negativeExamples": [
          "district_code"
        ]
      },
      {
        "regExp": "(?i).*\\bdist\\b.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "pt_dist"
        ],
        "negativeExamples": [
          "distance_meters"
        ]
      },
      {
        "regExp": "(?i).*district.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "district"
        ],
        "negativeExamples": [
          "province"
        ]
      }
    ],
    "positiveContentExamples": [
      "LISBOA",
      "PORTO",
      "SANTAR\u00c9M",
      "\u00c9VORA",
      "VIANA DO CASTELO",
      "CASTELO BRANCO",
      "VILA REAL",
      "SET\u00daBAL"
    ],
    "negativeContentExamples": [
      "LISBON",
      "OPORTO",
      "BRAGANCA",
      "SETUBAL",
      "CASTELOBRANCO",
      "VIANA DO CASTELLO",
      "A\u00c7ORES",
      "MADEIRA"
    ],
    "positiveHeaderExamples": [
      "portugal_district",
      "pt_district",
      "portuguese_district",
      "residence_district",
      "address_district",
      "district_of_birth",
      "district_name",
      "location_distrito"
    ],
    "negativeHeaderExamples": [
      "province",
      "region",
      "municipality",
      "parish",
      "county",
      "state_province",
      "region_code",
      "city"
    ],
    "explanation": "Identifies Portuguese first-level administrative districts (Distritos). Use for columns containing official district names in Portugal, including multi-word and accented forms. Suitable for address normalization, geospatial enrichment, and regional analytics restricted to mainland Portugal districts.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:01.458860"
  },
  {
    "resultType": "generated",
    "semanticType": "family",
    "description": "Family name (surname) representing the inherited last name used to identify family lineage across generations. Accepts capitalized, all-caps, hyphenated, and certain apostrophe forms, and may include short lowercase particles as part of multi-token surnames.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+|[A-Z]{2,}|[A-Z][a-z]+'[A-Z][a-z]+)(-([A-Z][a-z]+|[A-Z]{2,})){0,2}( ([A-Z][a-z]+|[A-Z]{2,}|[a-z]{2,3})){0,2}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4170,
    "headerPatterns": [
      {
        "regExp": "(?i).*(family[_\\s-]?name|surname).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "family_name"
        ],
        "negativeExamples": [
          "family_id"
        ]
      },
      {
        "regExp": "(?i).*(last[_\\s-]?name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "last_name"
        ],
        "negativeExamples": [
          "last_login"
        ]
      },
      {
        "regExp": "(?i).*(lname|l[_\\s-]?name|fam[_\\s-]?name|sname).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "lname"
        ],
        "negativeExamples": [
          "line_name"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "Smith",
      "O'Neill",
      "McDonald",
      "GARCIA",
      "Van der Meer",
      "Jean-Luc",
      "De Sousa",
      "St John"
    ],
    "negativeContentExamples": [
      "van Dyke",
      "D'angelo",
      "Smith-",
      "ANNA-MARIA3",
      "O''Connor",
      "Nunez-S",
      "xavier",
      "De  Souza"
    ],
    "positiveHeaderExamples": [
      "family_name",
      "surname",
      "last_name",
      "lname",
      "family surname",
      "customer_last_name",
      "employee_family_name",
      "user_lastname"
    ],
    "negativeHeaderExamples": [
      "family_id",
      "last_login",
      "birth_date",
      "email_address",
      "title",
      "alias",
      "household_id",
      "given_name"
    ],
    "explanation": "This semantic type identifies family names (surnames), typically used as the inherited last name in personal records. It targets common surname structures, including capitalized words, all-caps forms, hyphenated compounds, and apostrophe constructions (e.g., O'Neill), and allows short lowercase particles within multi-token surnames. Typical use cases include classifying or validating columns that store a person's family name in customer, employee, patient, or citizen datasets.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:03.578801"
  },
  {
    "resultType": "generated",
    "semanticType": "comment",
    "description": "Unrestricted narrative or descriptive text intended for human reading, such as free-form comments, feedback, or notes. Typically consists of multiple words and often includes sentence punctuation.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-\\.,;:]*([ ]+[A-Za-z0-9'\u2019\\-\\.,;:]+){2,}[.!?]\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4200,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|client|internal|public)[ _-]*(comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*(feedback|review|remark|note)[ _-]*(text|body|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "review_text"
        ],
        "negativeExamples": [
          "review_date"
        ]
      },
      {
        "regExp": "(?i).*(desc|details|message|msg)[ _-]*(text|body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "msg_text"
        ],
        "negativeExamples": [
          "msg_id"
        ]
      },
      {
        "regExp": "(?i).*(notes|remarks|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "notes"
        ],
        "negativeExamples": [
          "status_history"
        ]
      },
      {
        "regExp": "(?i).*comment.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comment"
        ],
        "negativeExamples": [
          "description"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver to the back door by 5 pm.",
      "Customer reported a clicking noise during startup.",
      "Great service, will definitely order again!",
      "Needs follow-up; missing attachment from the last email.",
      "Not applicable to Q4; defer to next cycle.",
      "I tried rebooting, but the issue persists.",
      "Arrived late, and the packaging was damaged.",
      "This worked after clearing the cache."
    ],
    "negativeContentExamples": [
      "See notes",
      "OK",
      "123 Main St",
      "2023-11-05",
      "ABC-123-XYZ",
      "error_code: 500",
      "John Smith",
      "www.example.com"
    ],
    "positiveHeaderExamples": [
      "customer_comments",
      "review_text",
      "internal_comment",
      "feedback_comment",
      "user_feedback_text",
      "notes"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "email_address",
      "product_code",
      "start_date",
      "phone_number",
      "status"
    ],
    "explanation": "This type captures free-form narrative fields where users write comments, feedback, or descriptive notes. It is intentionally broad and low-priority to avoid conflicts with more specific types; it emphasizes multi-word, sentence-like content typical of human-entered comments.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:05.605811"
  },
  {
    "resultType": "generated",
    "semanticType": "weight",
    "description": "Measured weight or mass values expressed as a numeric quantity followed by a recognized unit (e.g., kg, g, mg, lb, lbs, oz, ton, tonne). Supports integers, decimals, and thousands separators, with or without a space between number and unit. Excludes compound expressions (e.g., kg/m2), trailing punctuation on the unit (e.g., lb.), unsupported units (e.g., stone), or numbers without units.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b([0-9]{1,3}(,[0-9]{3})*|[0-9]+)(\\.[0-9]+)?\\s?(kg|kilogram|kilograms|g|gram|grams|mg|milligram|milligrams|lb|lbs|pound|pounds|oz|ounce|ounces|ton|tons|tonne|tonnes)\\b(?![./])",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4120,
    "headerPatterns": [
      {
        "regExp": "(?i).*(package|parcel|shipment|item|body|product).*\\bweight\\b.*(kg|g|lb|lbs|oz|ton|tonne).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "package_weight_kg"
        ],
        "negativeExamples": [
          "package_width_kg"
        ]
      },
      {
        "regExp": "(?i).*(gross|net).*\\bweight\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "net_weight"
        ],
        "negativeExamples": [
          "net_mass"
        ]
      },
      {
        "regExp": "(?i).*\\b(body|payload|tare)\\b.*\\bweight\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "body_weight_lb"
        ],
        "negativeExamples": [
          "body_mass_index"
        ]
      },
      {
        "regExp": "(?i).*\\b(item|product|container)\\b.*\\bweight\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "container_weight_g"
        ],
        "negativeExamples": [
          "container_volume_l"
        ]
      },
      {
        "regExp": "(?i).*\\bweight\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "weight"
        ],
        "negativeExamples": [
          "weighting_factor"
        ]
      }
    ],
    "positiveContentExamples": [
      "70 kg",
      "2.5kg",
      "185 lb",
      "0.75 lb",
      "12 ounces",
      "3,200 grams",
      "0.250 mg",
      "1,234.5 kg"
    ],
    "negativeContentExamples": [
      "70kgs",
      "kg 70",
      "70kg/m2",
      "70 km",
      "1,234.5",
      "12 stone",
      "0.5 Lb.",
      "10 gms"
    ],
    "positiveHeaderExamples": [
      "package_weight_kg",
      "body_weight_lb",
      "shipment_weight",
      "item_net_weight",
      "gross_weight_oz",
      "payload_weight_tonne",
      "container_weight_g",
      "weight"
    ],
    "negativeHeaderExamples": [
      "package_width_kg",
      "body_mass_index",
      "shipping_volume",
      "net_mass",
      "weighting_factor",
      "weighted_score",
      "tare_mass",
      "package_cost"
    ],
    "explanation": "This semantic type identifies weight or mass measurements represented as a number followed by a valid unit token. It is suitable for physical product data, logistics/shipping attributes, health-related body weight fields, and general measurement datasets. The regex is designed to be precise by requiring explicit units and rejecting derivative forms (e.g., per-area mass), unsupported units, or numbers without units.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:06.281685"
  },
  {
    "resultType": "generated",
    "semanticType": "title",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9'&()\\-]{2,}\\b([ ,.;:!?\\-]+\\b[A-Za-z0-9'&()\\-]{2,}\\b){5,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4080,
    "headerPatterns": [
      {
        "regExp": "(?i).*(article|document|product|page|story).*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "article_title"
        ],
        "negativeExamples": [
          "article_id"
        ]
      },
      {
        "regExp": "(?i).*(news|blog|post|record).*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "post_title"
        ],
        "negativeExamples": [
          "post_date"
        ]
      },
      {
        "regExp": "(?i).*(headline|subject|caption|heading).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "headline"
        ],
        "negativeExamples": [
          "topic_code"
        ]
      },
      {
        "regExp": "(?i).*(ttl|title_txt|title_text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ttl"
        ],
        "negativeExamples": [
          "txt_length"
        ]
      },
      {
        "regExp": "(?i).*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "title"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog near the river.",
      "A comprehensive overview of quarterly performance across all major regions.",
      "Detailed instructions for installing and configuring the application on Windows.",
      "This article explores sustainable materials used in modern construction projects.",
      "Customer reported intermittent connectivity failures during peak traffic hours.",
      "An in-depth review of camera features including battery life and image quality.",
      "These notes summarize the meeting outcomes and outline next actionable steps.",
      "A narrative account of the expedition, highlighting challenges and lessons learned."
    ],
    "negativeContentExamples": [
      "Annual financial report.",
      "User guide title.",
      "Project overview draft.",
      "A brief note about usage.",
      "Final summary pending approval.",
      "Subject: account update.",
      "Q3 results.",
      "Hello world!"
    ],
    "positiveHeaderExamples": [
      "article_title",
      "page_title",
      "document_title",
      "product_title",
      "story_title",
      "post_title",
      "headline",
      "subject"
    ],
    "negativeHeaderExamples": [
      "article_id",
      "post_date",
      "document_version",
      "name",
      "summary",
      "description",
      "topic_code",
      "txt_length"
    ],
    "explanation": "This semantic type identifies free-form narrative or descriptive text strings, typically comprising multiple words and often resembling sentences or short paragraphs. It is useful for columns that store human-readable text such as headlines, subjects, or long-form titles where the content is not constrained to codes or fixed formats.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:08.227414"
  },
  {
    "resultType": "generated",
    "semanticType": "name",
    "description": "Full name consisting of a given/first name followed by a family/last name separated by a single space. Each part uses alphabetic characters with optional internal hyphen or apostrophe within each part.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}([-'][A-Za-z]{2,})?\\s+[A-Za-z]{2,}([-'][A-Za-z]{2,})?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 99,
    "priority": 4020,
    "headerPatterns": [
      {
        "regExp": "(?i).*full[_ ]name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "full_name"
        ],
        "negativeExamples": [
          "first_name"
        ]
      },
      {
        "regExp": "(?i).*(customer|person|user|employee|contact)[_ ]full[_ ]name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_full_name"
        ],
        "negativeExamples": [
          "customer_first_name"
        ]
      },
      {
        "regExp": "(?i).*(combined[_ ]name|complete[_ ]name|name[_ ]combined).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "combined_name"
        ],
        "negativeExamples": [
          "combined_address"
        ]
      },
      {
        "regExp": "(?i).*(legal[_ ]name|official[_ ]name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "legal_name"
        ],
        "negativeExamples": [
          "official_title"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "address"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Anne-Marie Clarke",
      "Li Wei",
      "Maria Lopez",
      "Jean-Paul Durant",
      "Alan Torres",
      "Priya Kapoor",
      "Luca Romano"
    ],
    "negativeContentExamples": [
      "John",
      "J Doe",
      "John Smith Jr.",
      "Mary Ann Smith",
      "Smith, John",
      "John-Smith",
      "Jane O'Neill",
      "Alex2 Morgan"
    ],
    "positiveHeaderExamples": [
      "full_name",
      "customer_full_name",
      "employee_full_name",
      "legal_name",
      "combined_name",
      "person_name",
      "contact_full_name",
      "name"
    ],
    "negativeHeaderExamples": [
      "first_name",
      "last_name",
      "username",
      "display_name",
      "company_name",
      "address",
      "contact_id",
      "customer_number"
    ],
    "explanation": "Identifies two-token personal full names with a single separating space, allowing optional internal hyphen or apostrophe within each token. Useful for columns storing combined first and last names where middle names, suffixes, and punctuation are not expected.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:08.524942"
  },
  {
    "resultType": "generated",
    "semanticType": "field",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'\u2019\\-]+(\\s+[A-Za-z0-9][A-Za-z0-9'\u2019\\-]+){3,}[.!?]?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4100,
    "headerPatterns": [
      {
        "regExp": "(?i).*(narrative|long|free)[_\\s-]*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "customer_notes"
        ]
      },
      {
        "regExp": "(?i).*(description|comments?|notes|message[_\\s-]*body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "message_body"
        ],
        "negativeExamples": [
          "transaction_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|txt|msg|memo).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "txt_notes"
        ],
        "negativeExamples": [
          "name"
        ]
      },
      {
        "regExp": "(?i).*(details|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_details"
        ],
        "negativeExamples": [
          "error_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "The project encountered delays due to weather conditions.",
      "Please provide a detailed summary of the findings below.",
      "This description explains the purpose and scope of the module.",
      "Customer reported intermittent issues after the update.",
      "Notes indicate that further review may be necessary.",
      "The following paragraph outlines the key requirements.",
      "Add any relevant context to clarify the decision made.",
      "The system logs show consistent performance over time."
    ],
    "negativeContentExamples": [
      "Initial draft pending",
      "Update needed",
      "High priority - fix login",
      "2024-05-11",
      "SKU-48291",
      "user@example.com",
      "OK",
      "Title Only"
    ],
    "positiveHeaderExamples": [
      "narrative_text",
      "long_text_body",
      "free_text_comment",
      "description",
      "comments",
      "message_body",
      "desc",
      "txt_notes"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "invoice_number",
      "status_code",
      "created_date",
      "postal_code",
      "age",
      "ip_address",
      "country"
    ],
    "explanation": "This semantic type targets free-form narrative or descriptive text fields containing multiple words and natural language sentences. It is intended to capture comment bodies, long descriptions, and other unstructured text content where no strict format or code set applies.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:09.204674"
  },
  {
    "resultType": "generated",
    "semanticType": "race",
    "description": "Racial or ethnic category: full descriptive designation of a person's race or ethnicity as free text (e.g., \"Black or African American\", \"Asian\", \"Hispanic or Latino\"). Intended for human-readable labels rather than codes or abbreviations.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(american[ ]indian[ ]and[ ]alaska[ ]native|american[ ]indian|alaska[ ]native|native[ ]hawaiian|other[ ]pacific[ ]islander|pacific[ ]islander|black[ ]or[ ]african[ ]american|african[ ]american|black|white|caucasian|asian|middle[ ]eastern|north[ ]african|mena|hispanic[ ]or[ ]latino|hispanic|latino|latina|latinx|two[ ]or[ ]more[ ]races|multiracial|multi[ ]racial|multi-racial|native[ ]american|indigenous)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4220,
    "headerPatterns": [
      {
        "regExp": "(?i).*(race[ _-]*ethnicity|ethnicity[ _-]*race|racial[ _-]*category).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "racial_category"
        ],
        "negativeExamples": [
          "category"
        ]
      },
      {
        "regExp": "(?i).*(race|ethnicity)[ _-]*(group|category|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "race_description"
        ],
        "negativeExamples": [
          "race_code"
        ]
      },
      {
        "regExp": "(?i).*(demographic|demographics)[ _-]*(race|ethnicity).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "demographic_race"
        ],
        "negativeExamples": [
          "demographic_age"
        ]
      },
      {
        "regExp": "(?i).*(reported|self|self[ _-]*identified)[ _-]*(race|ethnicity).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "self_identified_race"
        ],
        "negativeExamples": [
          "reported_age"
        ]
      },
      {
        "regExp": "(?i).*race.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "race"
        ],
        "negativeExamples": [
          "gender"
        ]
      }
    ],
    "positiveContentExamples": [
      "Black or African American",
      "White",
      "Asian",
      "Native Hawaiian",
      "American Indian and Alaska Native",
      "Middle Eastern",
      "Hispanic or Latino",
      "Two or More Races"
    ],
    "negativeContentExamples": [
      "European American",
      "Prefer not to say",
      "Pacific coast islander",
      "Caucasus",
      "Afro-Caribbean",
      "Middle age",
      "Whitepaper",
      "Blacklist"
    ],
    "positiveHeaderExamples": [
      "racial_category",
      "race_ethnicity",
      "ethnicity_race",
      "race_description",
      "ethnic_group",
      "demographic_race",
      "self_identified_ethnicity",
      "reported_race"
    ],
    "negativeHeaderExamples": [
      "race_code",
      "gender",
      "language",
      "nationality",
      "country_of_origin",
      "account_number",
      "birth_date",
      "customer_name"
    ],
    "explanation": "This semantic type identifies free-text racial or ethnic categories commonly used in demographic data, capturing human-readable labels rather than coded values. It matches common designations such as Black or African American, Asian, Hispanic or Latino, Native Hawaiian, and related groups. Use this type to classify columns storing descriptive race/ethnicity values, not abbreviations or numeric codes.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:09.721256"
  },
  {
    "resultType": "generated",
    "semanticType": "county",
    "description": "US county-level jurisdiction names, including commonly used equivalents such as parishes (LA), boroughs and census areas (AK), as well as \"City and County of ...\" and independent city forms. Values are the human-readable jurisdiction names, not codes or abbreviations.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(([A-Za-z][A-Za-z .'\\-]+ (County|Parish|Borough|Census Area))|((City and County|City|Independent City|Municipality) of [A-Za-z][A-Za-z .'\\-]+))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4160,
    "headerPatterns": [
      {
        "regExp": "(?i).*(united[ _]states|usa|us).*(county|parish|borough|census[ _]area|independent[ _]city|city[ _]and[ _]county).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "us_county_name"
        ],
        "negativeExamples": [
          "country_name"
        ]
      },
      {
        "regExp": "(?i).*(county|parish|borough|census[ _]area|city[ _]and[ _]county).*(name|title).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "county_name"
        ],
        "negativeExamples": [
          "county_code"
        ]
      },
      {
        "regExp": "(?i).*(county|parish|borough|census[ _]area|independent[ _]city).*(jurisdiction|entity).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "county_jurisdiction"
        ],
        "negativeExamples": [
          "city_jurisdiction"
        ]
      },
      {
        "regExp": "(?i).*(county|parish|borough|census[ _]area|independent[ _]city).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "county_or_parish"
        ],
        "negativeExamples": [
          "country"
        ]
      },
      {
        "regExp": "(?i).*county.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "county"
        ],
        "negativeExamples": [
          "country"
        ]
      }
    ],
    "positiveContentExamples": [
      "Los Angeles County",
      "Miami-Dade County",
      "St. Louis County",
      "Prince George's County",
      "LaSalle Parish",
      "Matanuska-Susitna Borough",
      "Hoonah-Angoon Census Area",
      "City and County of San Francisco"
    ],
    "negativeContentExamples": [
      "Los Angeles",
      "Orange County, CA",
      "Baltimore City",
      "Kings County Hospital",
      "County Budget",
      "Washington Parish LA",
      "San Francisco",
      "City-County San Francisco"
    ],
    "positiveHeaderExamples": [
      "county_name",
      "us_county",
      "county_or_parish",
      "city_and_county",
      "borough_or_census_area",
      "county_jurisdiction",
      "county_parish_name"
    ],
    "negativeHeaderExamples": [
      "country_name",
      "state",
      "province",
      "county_code",
      "zip_code",
      "company_name",
      "city"
    ],
    "explanation": "This semantic type identifies US county-level jurisdictions by their full human-readable names, including equivalents like parishes, boroughs, census areas, and forms such as \"City and County of ...\" or independent cities. It is intended for textual county names in datasets, not for FIPS or other county codes, and not for state/province or country fields.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:09.779099"
  },
  {
    "resultType": "generated",
    "semanticType": "status",
    "description": "Free-form, unrestricted narrative or descriptive text conveying the current state, progress, or outcome, typically expressed as multi-word natural language (e.g., notes, messages, descriptions). Intended for human-readable status narratives rather than terse codes or identifiers.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'&%()/:\\-;,.!?]{1,}\\s+[A-Za-z][A-Za-z0-9'&%()/:\\-;,.!?]{1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4300,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\bstatus\\b.*(description|detail|text|message|notes).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "status_description"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*(current|previous|final).*status.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "current_status"
        ],
        "negativeExamples": [
          "final_state"
        ]
      },
      {
        "regExp": "(?i).*(order|shipment|account|payment).*status.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_status_text"
        ],
        "negativeExamples": [
          "customer_notes"
        ]
      },
      {
        "regExp": "(?i).*(\\bsts\\b|\\bstat\\b).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "order_sts"
        ],
        "negativeExamples": [
          "statistics"
        ]
      },
      {
        "regExp": "(?i).*status.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "status"
        ],
        "negativeExamples": [
          "state"
        ]
      }
    ],
    "positiveContentExamples": [
      "Pending approval from manager",
      "Shipment delayed due to weather",
      "Awaiting customer response",
      "On hold - awaiting parts",
      "Completed successfully on 2025-08-01",
      "In progress; ETA next week",
      "Requires manual review",
      "Cancelled by user request"
    ],
    "negativeContentExamples": [
      "OK",
      "PENDING",
      "Done",
      "N/A",
      "Y",
      "2025-08-11",
      "A-1",
      "12345"
    ],
    "positiveHeaderExamples": [
      "status_description",
      "current_status",
      "order_status_text",
      "shipment_status_notes",
      "processing_status_message",
      "final_status_detail",
      "account_status_update",
      "status_notes"
    ],
    "negativeHeaderExamples": [
      "status_code",
      "status_id",
      "state",
      "approval_code",
      "error_message",
      "notes",
      "description",
      "result_flag"
    ],
    "explanation": "This semantic type captures free-form, multi-word text that describes status in natural language (e.g., explanations, notes, or messages). It is useful for fields where users enter narrative status updates rather than structured codes, enabling downstream text analytics, summarization, or sentiment analysis while avoiding confusion with code-like or single-token status indicators.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:12.959094"
  },
  {
    "resultType": "generated",
    "semanticType": "result",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-]+( [A-Za-z0-9'\u2019\\-]+){3,}[.!?]?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4360,
    "headerPatterns": [
      {
        "regExp": "(?i).*(result|outcome).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "result_text"
        ],
        "negativeExamples": [
          "result_code"
        ]
      },
      {
        "regExp": "(?i).*(result|outcome).*(description|details|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "outcome_description"
        ],
        "negativeExamples": [
          "result_date"
        ]
      },
      {
        "regExp": "(?i).*(description|details|narrative).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "narrative_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|txt|message|msg|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog.",
      "Please provide a detailed explanation of the process.",
      "Customer reported intermittent connectivity issues today.",
      "This item includes all accessories and shows minimal wear.",
      "Steps taken to resolve the incident are documented.",
      "An in-depth analysis reveals significant improvements.",
      "The objective of this study is to evaluate user satisfaction.",
      "Further comments will be added after the review."
    ],
    "negativeContentExamples": [
      "See above",
      "Pending review",
      "Short note only",
      "Confirmed",
      "12345 details",
      "Q1 update pending",
      "Yes",
      "Note - resolved"
    ],
    "positiveHeaderExamples": [
      "result_text",
      "description",
      "details",
      "narrative",
      "comments",
      "free_text",
      "message",
      "notes"
    ],
    "negativeHeaderExamples": [
      "result_code",
      "description_id",
      "notes_count",
      "message_id",
      "status",
      "result_date",
      "customer_name",
      "response_code"
    ],
    "explanation": "Identifies columns containing unrestricted narrative or descriptive free-form text intended for notes, comments, or explanations. Useful for detecting long-form content where token count exceeds brief labels or codes, enabling downstream NLP or text analytics while avoiding misclassification of IDs, codes, or short tags.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:13.524192"
  },
  {
    "resultType": "generated",
    "semanticType": "treatment",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9'()\"/\\-]+[ ]+[A-Za-z0-9'()\"/\\-]+[ ]+[A-Za-z0-9 ,.;:'\"()\\/\\-]{10,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4350,
    "headerPatterns": [
      {
        "regExp": "(?i).*treatment.*(notes|description|summary|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_description"
        ],
        "negativeExamples": [
          "treatment_code"
        ]
      },
      {
        "regExp": "(?i).*(therapy|therapeutic).*(notes|description|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "therapy_notes"
        ],
        "negativeExamples": [
          "therapy_code"
        ]
      },
      {
        "regExp": "(?i).*(treat|therapy|tx).*(notes|desc|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "tx_notes"
        ],
        "negativeExamples": [
          "tx_code"
        ]
      },
      {
        "regExp": "(?i).*(care|plan).*(treatment|therapy).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "care_plan_treatment"
        ],
        "negativeExamples": [
          "care_plan_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_text"
        ],
        "negativeExamples": [
          "procedure_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Patient received IV fluids and antiemetics; symptoms improved after 2 hours.",
      "Wound cleaned with saline, dressed with sterile gauze, and tetanus booster administered.",
      "Initiated physical therapy focusing on range-of-motion; patient tolerated exercises well.",
      "Prescribed amoxicillin 500 mg tid for 7 days; advised hydration and rest.",
      "Applied ice and compression; advised elevation and follow-up if swelling persists.",
      "Counseled on dietary changes and medication adherence; provided written instructions.",
      "Administered inhaled bronchodilator; peak flow improved post-treatment.",
      "Referred to specialist for further evaluation; scheduled follow-up appointment."
    ],
    "negativeContentExamples": [
      "Chemotherapy",
      "CPT 99213",
      "TX: chemo q3w",
      "2023-05-11",
      "Amoxicillin 500mg",
      "Z00.00",
      "123456",
      "No treatment"
    ],
    "positiveHeaderExamples": [
      "treatment_description",
      "treatment_notes",
      "treatment_text",
      "therapy_notes",
      "care_plan_treatment",
      "treatment_summary",
      "treatment_details",
      "treatment_comments"
    ],
    "negativeHeaderExamples": [
      "treatment_code",
      "procedure_code",
      "patient_name",
      "admission_date",
      "treatment_id",
      "dose_amount",
      "provider_name",
      "diagnosis_code"
    ],
    "explanation": "This semantic type captures free-form narrative or descriptive treatment text found in clinical or operational datasets, such as notes, summaries, and descriptions detailing what was administered or performed. It is intentionally broad and leverages header context plus a conservative value-pattern requiring multiple words and sufficient length to avoid short labels or codes.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:15.234918"
  },
  {
    "resultType": "generated",
    "semanticType": "filename",
    "description": "File identifier representing a base file name with an extension for file system reference (e.g., report.csv, archive.tar.gz). Values are expected to be simple filenames, optionally with multiple dots before the final extension, and must not be full paths or URIs.",
    "pluginType": "regex",
    "regexPattern": "\\b[0-9A-Za-z][0-9A-Za-z _-]*(\\.[0-9A-Za-z][0-9A-Za-z _-]*)*\\.[A-Za-z0-9]{2,6}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4390,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\b(attachment|source|document|image|upload)\\b.*\\bfile\\b.*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "document_file_name"
        ],
        "negativeExamples": [
          "file_path"
        ]
      },
      {
        "regExp": "(?i).*\\b(file[_ ]?name|filename)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "file_name"
        ],
        "negativeExamples": [
          "file_size"
        ]
      },
      {
        "regExp": "(?i).*\\bfile\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "image_file"
        ],
        "negativeExamples": [
          "profile"
        ]
      },
      {
        "regExp": "(?i).*\\b(fname|file[_ ]?nm)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "upload_fname"
        ],
        "negativeExamples": [
          "first_name"
        ]
      },
      {
        "regExp": "(?i).*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "report.csv",
      "Sales_Q1-2024.xlsx",
      "IMG_0012.JPG",
      "archive.tar.gz",
      "my notes v2-final.pdf",
      "data.backup.2023-09-01.zip",
      "presentation.pptx",
      "script.min.js"
    ],
    "negativeContentExamples": [
      "report",
      ".gitignore",
      "imagejpeg",
      "readme.c",
      "data..csv",
      "financials.",
      "doc.7",
      "photo.jpeg2000"
    ],
    "positiveHeaderExamples": [
      "document_file_name",
      "file_name",
      "filename",
      "source_file_name",
      "image_file",
      "upload_fname",
      "input_file_name",
      "attachment_filename"
    ],
    "negativeHeaderExamples": [
      "file_size",
      "file_path",
      "mime_type",
      "url",
      "checksum",
      "created_date",
      "owner",
      "number"
    ],
    "explanation": "This semantic type captures filenames that include a base name and a final extension, allowing multiple dot-separated segments before the extension (e.g., archive.tar.gz). It excludes full paths, URIs, and dotfiles without a conventional extension. Use this type to identify columns that store filenames for attachments, documents, images, or uploaded items where the value is just the name with extension.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:17.395914"
  },
  {
    "resultType": "generated",
    "semanticType": "time",
    "description": "epoch_seconds: standard Unix timestamp in seconds. Represents an integer count of seconds since 1970-01-01T00:00:00Z (Unix epoch), typically 9\u201310 digits.",
    "pluginType": "regex",
    "regexPattern": "\\b[0-9]{9,10}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4040,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unix|epoch).*(timestamp|time).*(sec|secs|second|seconds).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "unix_timestamp_seconds"
        ],
        "negativeExamples": [
          "timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(epoch|unix).*(time|ts|timestamp).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "event_epoch_time"
        ],
        "negativeExamples": [
          "user_time"
        ]
      },
      {
        "regExp": "(?i).*(ts|timestamp).*(sec|secs).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ts_sec"
        ],
        "negativeExamples": [
          "ts_ms"
        ]
      },
      {
        "regExp": "(?i).*unix.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "unix_time"
        ],
        "negativeExamples": [
          "iso_time"
        ]
      },
      {
        "regExp": "(?i).*time.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "time"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "946684800",
      "1234567890",
      "1609459200",
      "1700000000",
      "631152000",
      "2147483647",
      "999999999",
      "4102444800"
    ],
    "negativeContentExamples": [
      "1700000000000",
      "1700000000ms",
      "1,700,000,000",
      "-1700000000",
      "170000000",
      "01609459200",
      "epoch1700000000",
      "1700000000Z"
    ],
    "positiveHeaderExamples": [
      "epoch_seconds",
      "unix_timestamp",
      "event_epoch_sec",
      "created_at_epoch",
      "ts_sec",
      "timestamp_seconds",
      "epoch_time",
      "unix_time"
    ],
    "negativeHeaderExamples": [
      "timestamp_ms",
      "duration_seconds",
      "time_zone",
      "iso_timestamp",
      "start_timecode",
      "date",
      "timezone_offset",
      "ms_since_epoch"
    ],
    "explanation": "This semantic type identifies Unix epoch time stored as a whole number of seconds since 1970-01-01T00:00:00Z. It focuses on 9\u201310 digit integers to distinguish seconds from milliseconds and smaller numeric identifiers, balancing precision with practical classification breadth.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:23.143433"
  },
  {
    "resultType": "generated",
    "semanticType": "height",
    "description": "Numeric height measurements expressed in metric or imperial units. Supports common formats such as centimeters, meters, inches, and feet-inches combinations (e.g., 180 cm, 1.75 m, 72 in, 5 ft 11 in, 5'9\").",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(\\d{2,3}\\s?(cm|centimeter|centimeters|centimetre|centimetres)|\\d(\\.\\d{1,2})?\\s?m|\\d\\s?m\\s?\\d{1,2}|\\d{1,2}\\s?(ft|foot|feet)\\s?\\d{1,2}\\s?(in|inch|inches)|\\d{1,2}\\s?(ft|foot|feet)|\\d{2,3}\\s?(in|inch|inches)|\\d{1,2}\\s?'\\s?\\d{1,2}\\s?(\"|in)?)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 4310,
    "headerPatterns": [
      {
        "regExp": "(?i).*(person|customer|patient|employee).*height.*(cm|centimeter|centimetre|m|meter|metre|ft|in|inch|feet|inches).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "patient_height_cm"
        ],
        "negativeExamples": [
          "customer_height_preference"
        ]
      },
      {
        "regExp": "(?i).*(body|physical|anthro|anthropometric).*height.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "anthro_height"
        ],
        "negativeExamples": [
          "body_weight"
        ]
      },
      {
        "regExp": "(?i).*(stature|hgt|height[_\\s]?cm|height[_\\s]?in).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "patient_hgt"
        ],
        "negativeExamples": [
          "weight_estimate"
        ]
      },
      {
        "regExp": "(?i).*(size|dimension).*height.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "dimension_height"
        ],
        "negativeExamples": [
          "size_class"
        ]
      },
      {
        "regExp": "(?i).*height.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "height"
        ],
        "negativeExamples": [
          "weight"
        ]
      }
    ],
    "positiveContentExamples": [
      "180 cm",
      "170 centimetres",
      "1.75 m",
      "1 m 80",
      "5 ft 11 in",
      "6 ft",
      "72 in",
      "5'9\""
    ],
    "negativeContentExamples": [
      "180",
      "1.75",
      "5ft11",
      "5 11",
      "170 cmm",
      "6ft, 2in",
      "5\u201911\u201d",
      "six ft"
    ],
    "positiveHeaderExamples": [
      "patient_height_cm",
      "body_height",
      "patient_hgt",
      "stature",
      "product_dimension_height",
      "height_in",
      "customer_height_m",
      "height"
    ],
    "negativeHeaderExamples": [
      "weight",
      "length_cm",
      "altitude",
      "width",
      "depth",
      "size_class",
      "comments",
      "dimension"
    ],
    "explanation": "This semantic type identifies height measurements, recognizing common metric and imperial formats with explicit units. It is useful for columns capturing a person's or object's vertical dimension and avoids matching plain numbers without units or unrelated numeric fields.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:24.639355"
  },
  {
    "resultType": "generated",
    "semanticType": "road",
    "description": "Complete street name in English, consisting of one or more capitalized words followed by a street type/suffix (e.g., Street, Ave, Rd), with optional leading or trailing cardinal direction (N, S, E, W, NE, NW, SE, SW). Excludes house numbers and trailing unit information.",
    "pluginType": "regex",
    "regexPattern": "\\b((N|S|E|W|NE|NW|SE|SW) )?[A-Z][A-Za-z'-]+( [A-Z][A-Za-z'-]+){0,3} (Street|St|Avenue|Ave|Road|Rd|Lane|Ln|Boulevard|Blvd|Drive|Dr|Court|Ct|Place|Pl|Terrace|Ter|Way|Parkway|Pkwy|Square|Sq|Highway|Hwy|Circle|Cir)( (N|S|E|W|NE|NW|SE|SW))?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4470,
    "headerPatterns": [
      {
        "regExp": "(?i).*complete.*street.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "complete_street_name"
        ],
        "negativeExamples": [
          "street_type"
        ]
      },
      {
        "regExp": "(?i).*full.*(street|road).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "full_street_name"
        ],
        "negativeExamples": [
          "street_number"
        ]
      },
      {
        "regExp": "(?i).*(shipping|billing).*street.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "shipping_street_name"
        ],
        "negativeExamples": [
          "shipping_street_number"
        ]
      },
      {
        "regExp": "(?i).*(street|road|avenue|boulevard).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "street_name"
        ],
        "negativeExamples": [
          "road_code"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Main Street",
      "Oak Road",
      "N Cedar Ave",
      "Maple Drive SE",
      "Martin Luther King Boulevard",
      "Pine Lane",
      "Sunset Blvd",
      "Elm St"
    ],
    "negativeContentExamples": [
      "123 Main Street",
      "Main",
      "Main St.",
      "North Avenue",
      "Main Street Apt 2",
      "MainStreet",
      "Rue de Rivoli",
      "SE-Maple Road"
    ],
    "positiveHeaderExamples": [
      "complete_street_name",
      "road_name",
      "full_street_name",
      "street_full_name",
      "address_street_name",
      "primary_street_name",
      "shipping_street_name",
      "street_name"
    ],
    "negativeHeaderExamples": [
      "street_type",
      "street_number",
      "name_on_street",
      "address_line2",
      "road_code",
      "street",
      "roadway_name",
      "street_direction"
    ],
    "explanation": "This semantic type targets full English street designations that include the core street name and a recognized street suffix (e.g., Street, Ave, Rd), with optional leading or trailing cardinal direction. It intentionally excludes house numbers, unit/apartment details, intersection descriptions, and non-English street types to reduce false positives.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:25.018622"
  },
  {
    "resultType": "generated",
    "semanticType": "notes",
    "description": "Unrestricted narrative or descriptive text intended for human-readable notes, comments, or remarks. Typically contains multiple words and may include punctuation, sentences, and free-form phrasing.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9'()\\-]+(\\s+[A-Za-z0-9'()\\-]+){2,}[A-Za-z0-9 ,;:.!?\\-'\"]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4330,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|case|ticket|agent).*(notes|comments|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*(support|service|interaction|contact).*(notes|comments|remarks).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "service_comments"
        ],
        "negativeExamples": [
          "service_code"
        ]
      },
      {
        "regExp": "(?i).*(internal|agent|staff|user).*(notes|comments|remarks|rmk|rmks|cmts).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "internal_rmks"
        ],
        "negativeExamples": [
          "internal_ids"
        ]
      },
      {
        "regExp": "(?i).*(free[_ ]?text|narrative|description).*",
        "confidence": 91,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "text_id"
        ]
      },
      {
        "regExp": "(?i).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "notes"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reports intermittent connectivity since Monday.",
      "Please call back after 5 pm; prefers text.",
      "Package arrived damaged; requesting replacement.",
      "Left voicemail with troubleshooting steps and ticket number.",
      "User cannot reset password despite receiving the code.",
      "Meeting rescheduled to next week due to team conflict.",
      "Agent noted duplicate account entries in the export.",
      "Followed up with vendor; awaiting RMA authorization."
    ],
    "negativeContentExamples": [
      "OK",
      "Damaged",
      "N/A",
      "12345",
      "Order 12345",
      "support@example.com",
      "2025-08-10",
      "See attached"
    ],
    "positiveHeaderExamples": [
      "customer_notes",
      "case_comments",
      "internal_remarks",
      "free_text",
      "narrative_description",
      "agent_notes",
      "order_notes",
      "service_comments"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "note_id",
      "notes_count",
      "comments_flag",
      "support_email",
      "description_code",
      "created_date",
      "ticket_number"
    ],
    "explanation": "This semantic type identifies free-form narrative text commonly stored in columns labeled notes, comments, remarks, narrative, or free text. It suits fields where users enter unstructured descriptions, updates, or observations rather than codes, identifiers, or single-word statuses. The detection favors multi-word content typical of human-authored notes and uses conservative header patterns to reduce conflicts with more specific types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:25.305132"
  },
  {
    "resultType": "generated",
    "semanticType": "rank",
    "description": "Identifies rank or position indicators expressed as ordinals or prefixed numerals (e.g., 1st, 23rd, #3, Rank 12, No. 7). Intended for columns that store an item's ranking rather than quantitative measures or descriptive text.",
    "pluginType": "regex",
    "regexPattern": "\\b([1-9][0-9]{0,2}(st|nd|rd|th)|#\\s?[1-9][0-9]{0,2}|(N|n)o\\.\\s?[1-9][0-9]{0,2}|(N|n)o\\s[1-9][0-9]{0,2}|[Rr]ank\\b[\\s\\-]?[1-9][0-9]{0,2})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 92,
    "priority": 4000,
    "headerPatterns": [
      {
        "regExp": "(?i).*(player|customer|employee|team|product)[_\\s\\-]*rank.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "player_rank"
        ],
        "negativeExamples": [
          "player_level"
        ]
      },
      {
        "regExp": "(?i).*rank[_\\s\\-]*(position|no|number).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "rank_number"
        ],
        "negativeExamples": [
          "account_number"
        ]
      },
      {
        "regExp": "(?i).*(global|overall|national|world)[_\\s\\-]*(rank|ranking).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "overall_ranking"
        ],
        "negativeExamples": [
          "overall_score"
        ]
      },
      {
        "regExp": "(?i).*(rnk|rk)[_\\s\\-]*(no|num)?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "rk_num"
        ],
        "negativeExamples": [
          "pk_num"
        ]
      },
      {
        "regExp": "(?i).*rank.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "rank"
        ],
        "negativeExamples": [
          "rating"
        ]
      }
    ],
    "positiveContentExamples": [
      "1st",
      "2nd",
      "10th",
      "23rd",
      "#3",
      "Rank 12",
      "No. 7",
      "no 15"
    ],
    "negativeContentExamples": [
      "0",
      "01st",
      "#0",
      "Rank: 5",
      "2023",
      "3 rd",
      "Ranked 4",
      "Top 3"
    ],
    "positiveHeaderExamples": [
      "player_rank",
      "rank_number",
      "overall_ranking",
      "team_rank",
      "rk_num",
      "customer_rank",
      "rank_position",
      "rnk"
    ],
    "negativeHeaderExamples": [
      "player_level",
      "account_number",
      "overall_score",
      "team_size",
      "pk_num",
      "customer_rating",
      "position",
      "top_score"
    ],
    "explanation": "This semantic type targets values that explicitly denote an item's ranking, such as ordinals (1st, 2nd, 23rd), hash-prefixed ranks (#3), and common textual prefixes (Rank 12, No. 7). It avoids plain numbers without ordinal or rank markers and is suitable for leaderboards, placement results, or ordered lists.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:25.403517"
  },
  {
    "resultType": "generated",
    "semanticType": "category",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']+\\b([ \\t]+[A-Za-z][A-Za-z']+\\b){4,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4070,
    "headerPatterns": [
      {
        "regExp": "(?i).*(incident|case|ticket).*(narrative|description|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_narrative"
        ],
        "negativeExamples": [
          "case_number"
        ]
      },
      {
        "regExp": "(?i).*(product|item|sku).*(description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(long|free|full).*(text|description|content).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(desc|txt|remarks|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "note_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "The customer described the issue in detail and requested further assistance",
      "This product performs well under heavy load according to field tests",
      "Notes indicate delays caused by weather and staffing shortages at site",
      "Please provide a comprehensive overview of the project goals and scope",
      "User reports intermittent failures when uploading large images and videos",
      "The narrative outlines key events leading to the observed performance drop",
      "Our team followed standard procedures and documented all relevant findings",
      "The description summarizes expected outcomes and identifies remaining risks"
    ],
    "negativeContentExamples": [
      "Pending further analysis tomorrow",
      "See details above",
      "In progress - awaiting approval",
      "Reviewed by QA team",
      "Free text",
      "Short description only",
      "Draft pending review",
      "Category Finance"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "case_narrative",
      "customer_feedback_text",
      "incident_notes",
      "bio_text",
      "full_description",
      "free_text",
      "item_details"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "case_number",
      "review_score",
      "comment_count",
      "sku",
      "id",
      "status",
      "price"
    ],
    "explanation": "This semantic type identifies free-form narrative or descriptive text fields, such as descriptions, notes, comments, narratives, and other long-form content intended for human reading. It is useful for distinguishing unstructured text from structured identifiers, codes, or numeric fields to enable appropriate NLP processing, search, or summarization workflows.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:26.855581"
  },
  {
    "resultType": "generated",
    "semanticType": "frequency",
    "description": "Expressions indicating how often an event or action occurs, including common adverbs (daily, weekly) and structured phrases like 'every 3 days', '3x per week', or 'once a month'. Designed to recognize frequency stated in natural language within text_content fields.",
    "pluginType": "regex",
    "regexPattern": "\\b(daily|weekly|monthly|quarterly|yearly|annually|hourly|biweekly|bi-annual|biannual|bimonthly|semiannual|semi-annual|fortnightly)\\b|\\bevery\\s+other\\s+(day|week|month|year)\\b|\\bevery\\s+([1-9]\\d{0,2})\\s+(minute|min|hour|day|week|month|year|minutes|hours|days|weeks|months|years)\\b|\\b(once|twice)\\s+(per|a)\\s+(minute|min|hour|day|week|month|year)\\b|\\b([1-9]\\d{0,2})\\s*(x|times)\\s*(per|/)\\s*(minute|min|hour|day|week|month|year)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4250,
    "headerPatterns": [
      {
        "regExp": "(?i).*(update|refresh|delivery|shipment).*frequency.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "update_frequency"
        ],
        "negativeExamples": [
          "update_interval"
        ]
      },
      {
        "regExp": "(?i).*(billing|payment|invoice).*frequency.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "billing_frequency"
        ],
        "negativeExamples": [
          "payment_terms"
        ]
      },
      {
        "regExp": "(?i).*(ship|shipment|delivery).*freq.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "shipment_freq"
        ],
        "negativeExamples": [
          "ship_date"
        ]
      },
      {
        "regExp": "(?i).*(times|occurrence|repeat|cycle).*(per|each|/).*(day|week|month|year).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "times_per_week"
        ],
        "negativeExamples": [
          "units_per_pack"
        ]
      },
      {
        "regExp": "(?i).*frequency.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "frequency"
        ],
        "negativeExamples": [
          "rate"
        ]
      }
    ],
    "positiveContentExamples": [
      "daily",
      "weekly",
      "biweekly",
      "semi-annual",
      "every 3 days",
      "every other week",
      "once a month",
      "3x per week"
    ],
    "negativeContentExamples": [
      "everyday",
      "per month",
      "every week",
      "3x weekly",
      "once weekly",
      "semi annually",
      "2 per",
      "each day"
    ],
    "positiveHeaderExamples": [
      "update_frequency",
      "billing_frequency",
      "delivery_frequency",
      "shipment_freq",
      "times_per_week",
      "repeat_per_month",
      "payment_frequency",
      "frequency"
    ],
    "negativeHeaderExamples": [
      "update_interval",
      "billing_cycle",
      "delivery_window",
      "ship_date",
      "payment_terms",
      "units_per_pack",
      "refresh_rate",
      "period_name"
    ],
    "explanation": "This semantic type targets textual expressions that describe recurrence or occurrence intervals, such as adverbs (daily, weekly) and structured phrases that quantify frequency (e.g., 'every 3 days', 'twice a month', '2 times/day'). It is useful for classifying scheduling, billing, update, or delivery cadence fields in datasets where frequency is expressed in natural language rather than as a numeric period length.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:28.494862"
  },
  {
    "resultType": "generated",
    "semanticType": "state",
    "description": "Full United States state names written out completely (e.g., California, New York, North Carolina). Intended for datasets where the value is the spelled-out state name rather than an abbreviation or code.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 4140,
    "headerPatterns": [
      {
        "regExp": "(?i).*(united[ _]states|usa|us).*state.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "united_states_state_full_name"
        ],
        "negativeExamples": [
          "state_full_name"
        ]
      },
      {
        "regExp": "(?i).*(us|usa|united[ _]states).*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "us_state_name"
        ],
        "negativeExamples": [
          "us_state_code"
        ]
      },
      {
        "regExp": "(?i).*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "state_name"
        ],
        "negativeExamples": [
          "state_code"
        ]
      },
      {
        "regExp": "(?i).*(us|usa).*st.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "usa_st_name"
        ],
        "negativeExamples": [
          "st_cd"
        ]
      },
      {
        "regExp": "(?i).*state.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "state"
        ],
        "negativeExamples": [
          "province"
        ]
      }
    ],
    "positiveContentExamples": [
      "California",
      "New York",
      "North Carolina",
      "Rhode Island",
      "Texas",
      "Washington",
      "Alaska",
      "Massachusetts"
    ],
    "negativeContentExamples": [
      "CA",
      "NewYork",
      "Wash",
      "District of Columbia",
      "Puerto Rico",
      "Quebec",
      "Texa",
      "Carolina"
    ],
    "positiveHeaderExamples": [
      "us_state_name",
      "state_full_name",
      "state_name",
      "usa_st_name",
      "united_states_state_name",
      "customer_state_name",
      "shipping_state_name",
      "residence_state"
    ],
    "negativeHeaderExamples": [
      "state_code",
      "state_abbr",
      "province",
      "region",
      "country_state",
      "us_state_code",
      "state_number",
      "postal_code"
    ],
    "explanation": "This semantic type identifies full U.S. state names as complete words, including single-word and multi-word states. It excludes abbreviations, truncated forms, and non-state regions or territories.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:29.316712"
  },
  {
    "resultType": "generated",
    "semanticType": "country",
    "description": "English-language sovereign country names (short form). Values are typically one to five words, with each significant word capitalized, and may include common connectors like 'and', 'of', or 'the'. Abbreviations and codes are excluded.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{2,}(-[A-Z][a-z]{2,})?( (and|of|the) | [A-Z][a-z]{2,}(-[A-Z][a-z]{2,})?){0,4}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4130,
    "headerPatterns": [
      {
        "regExp": "(?i).*country.*name.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "customer_country_name"
        ],
        "negativeExamples": [
          "customer_country_code"
        ]
      },
      {
        "regExp": "(?i).*(shipping|billing|mailing|registered|residence).*country.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "billing_country"
        ],
        "negativeExamples": [
          "billing_country_code"
        ]
      },
      {
        "regExp": "(?i).*country.*of.*(residence|origin|incorporation).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "country_of_residence"
        ],
        "negativeExamples": [
          "place_of_birth"
        ]
      },
      {
        "regExp": "(?i).*(ctry|cntry).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cntry_name"
        ],
        "negativeExamples": [
          "ctry_code"
        ]
      },
      {
        "regExp": "(?i).*country.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "country"
        ],
        "negativeExamples": [
          "country_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "United States",
      "United Kingdom",
      "Canada",
      "Mexico",
      "Germany",
      "France",
      "New Zealand",
      "South Africa"
    ],
    "negativeContentExamples": [
      "US",
      "USA",
      "U.S.",
      "U.S.A.",
      "united states",
      "United states",
      "United_States",
      "Korea, Republic of"
    ],
    "positiveHeaderExamples": [
      "customer_country_name",
      "billing_country",
      "shipping_country",
      "country_of_residence",
      "registered_country_name",
      "company_country"
    ],
    "negativeHeaderExamples": [
      "country_code",
      "county_name",
      "state_or_province",
      "nationality",
      "region",
      "locale_country_code"
    ],
    "explanation": "This semantic type identifies English country names written out as words, typically capitalized by word, optionally including lowercase connectors such as 'and', 'of', or 'the'. It is designed for datasets storing descriptive country names rather than codes or abbreviations. Common use cases include customer address attributes, company registration details, and location columns where full country names are required. It intentionally excludes country codes (e.g., ISO alpha-2/3), acronyms (e.g., USA), and values with punctuation like commas or ampersands.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:30.235105"
  },
  {
    "resultType": "generated",
    "semanticType": "type",
    "description": "Unrestricted narrative or descriptive text intended for free-form human-readable content. Typical values are multi-word sentences or paragraphs conveying explanations, descriptions, summaries, or comments.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{3,}\\s+[A-Za-z]{3,}\\s+[A-Za-z]{3,}\\s+[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 99,
    "priority": 4030,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(case|incident|ticket).*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ticket_comments"
        ],
        "negativeExamples": [
          "ticket_number"
        ]
      },
      {
        "regExp": "(?i).*(article|document|message).*body.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "article_body"
        ],
        "negativeExamples": [
          "document_id"
        ]
      },
      {
        "regExp": "(?i).*(description|comments|notes|narrative|summary|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "summary_text"
        ],
        "negativeExamples": [
          "zipcode"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog near sunset.",
      "Please review the attached report and provide your feedback by Friday.",
      "Customer reported intermittent connectivity issues after the update.",
      "This handcrafted table features solid oak construction with a natural finish.",
      "Our mission is to deliver reliable, efficient service at an affordable cost.",
      "After several delays, the project reached its final milestone successfully.",
      "In this study, we examine trends across multiple demographic segments.",
      "Note: Ensure all fields are completed before submitting the form."
    ],
    "negativeContentExamples": [
      "Approved",
      "Pending review",
      "John A Smith",
      "SKU-12345",
      "2024-08-15",
      "123 Main Street",
      "Error: 404",
      "Qty: 12"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "case_narrative",
      "ticket_comments",
      "article_body",
      "customer_notes",
      "summary_text",
      "detailed_description",
      "free_text"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "customer_name",
      "created_date",
      "invoice_number",
      "address_line",
      "email_address",
      "sku",
      "ip_address"
    ],
    "explanation": "This semantic type is intended to identify columns that contain free-form human-authored narrative text such as descriptions, comments, summaries, or other explanatory content. The pattern emphasizes multi-word sequences typical of sentences to reduce collisions with short labels, names, or codes. Use this type for long-form text fields where content length and structure vary widely, such as product descriptions, support ticket comments, and article bodies. Because it is broad, a high threshold and lower priority are used to minimize conflicts with more specific types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:30.951497"
  },
  {
    "resultType": "generated",
    "semanticType": "city",
    "description": "Location Name: municipal area designation. Represents the proper name of a municipality or city as a standalone value, without appended state/province, country, postal codes, or other address qualifiers.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+\\.?|[A-Z]{2,})(?:[-' ]([A-Z][a-z]+\\.?|[A-Z]{2,}|de|of|la|del|da|do)){0,4}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4190,
    "headerPatterns": [
      {
        "regExp": "(?i).*(billing|shipping|residence|home|work).*city.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "billing_city"
        ],
        "negativeExamples": [
          "billing_city_code"
        ]
      },
      {
        "regExp": "(?i).*(mailing|delivery).*city.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "mailing_city"
        ],
        "negativeExamples": [
          "mailing_city_id"
        ]
      },
      {
        "regExp": "(?i).*address.*city.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "address_city"
        ],
        "negativeExamples": [
          "address_city_code"
        ]
      },
      {
        "regExp": "(?i).*location.*city.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "location_city"
        ],
        "negativeExamples": [
          "location_country"
        ]
      },
      {
        "regExp": "(?i).*(addr|loc).*(city|cty).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "addr_cty"
        ],
        "negativeExamples": [
          "addr_state"
        ]
      },
      {
        "regExp": "(?i).*city.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "city"
        ],
        "negativeExamples": [
          "city_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Paris",
      "New York",
      "Los Angeles",
      "San Francisco",
      "Mexico City",
      "St. Louis",
      "Rio de Janeiro",
      "Ho Chi Minh City"
    ],
    "negativeContentExamples": [
      "New York, NY",
      "Los Angeles, CA",
      "Boston, Massachusetts",
      "New York 10001",
      "Quebec (QC)",
      "Washington, D.C.",
      "san francisco",
      "123 Main Street"
    ],
    "positiveHeaderExamples": [
      "billing_city",
      "shipping_city",
      "residence_city",
      "home_city",
      "mailing_city",
      "city",
      "city_name",
      "location_city"
    ],
    "negativeHeaderExamples": [
      "city_code",
      "city_id",
      "county",
      "state",
      "province",
      "country",
      "postcode",
      "address_line1"
    ],
    "explanation": "Identifies standalone city/municipality names within address data. Useful for parsing address components, validating user input forms, and normalizing location entities without state/province or country qualifiers. The pattern accepts typical city tokens with spaces, hyphens, apostrophes, and common stopwords like de/of/la, while rejecting values containing commas, parentheses, or digits indicative of appended regions or postal codes.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:32.105264"
  },
  {
    "resultType": "generated",
    "semanticType": "code",
    "description": "record_key: unique alphanumeric code for entity identification",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z0-9]{8,20}|[A-Z0-9]{2,8}([-_][A-Z0-9]{2,8}){1,3})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4230,
    "headerPatterns": [
      {
        "regExp": "(?i).*record[ _-]*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_code"
        ],
        "negativeExamples": [
          "record_date"
        ]
      },
      {
        "regExp": "(?i).*(entity|object)[ _-]*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "entity_code"
        ],
        "negativeExamples": [
          "entity_status"
        ]
      },
      {
        "regExp": "(?i).*(record|entity)[ _-]*key.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_key"
        ],
        "negativeExamples": [
          "record_id"
        ]
      },
      {
        "regExp": "(?i).*(rec|ent)[ _-]*(code|cd).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "rec_cd"
        ],
        "negativeExamples": [
          "rec_id"
        ]
      },
      {
        "regExp": "(?i).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "code"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "AB12CD34",
      "ZX9Q7L2M",
      "A1B2C3D4E5",
      "REC-2024-001",
      "USER_ABC_99",
      "KJ7H-88PL",
      "CUST_000123",
      "INV-ABCD-7890"
    ],
    "negativeContentExamples": [
      "ABCDEF",
      "ab12cd34",
      "ABCD-efgh-1234",
      "AB12 CD34",
      "AB12-CD34-!",
      "1234567",
      "AB12CD34EFGHJKLMNOPQRST",
      "________"
    ],
    "positiveHeaderExamples": [
      "record_code",
      "entity_code",
      "record key",
      "rec_code",
      "entity_key",
      "object_code",
      "code",
      "record_key"
    ],
    "negativeHeaderExamples": [
      "record_id",
      "record_date",
      "entity_status",
      "rec_id",
      "customer_code",
      "name",
      "identifier",
      "number"
    ],
    "explanation": "This semantic type identifies opaque, unique alphanumeric record keys or codes used to reference entities. Values are composed of uppercase letters and digits, optionally segmented by single hyphens or underscores, and exclude spaces and other special characters. It is intended for non-natural-language identifiers where the header context indicates a record/entity code or key.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:32.656734"
  },
  {
    "resultType": "generated",
    "semanticType": "model",
    "description": "text_content: unrestricted narrative or descriptive text. This type targets freeform, multi-word narrative or descriptive fields such as descriptions, notes, comments, and long-form text, emphasizing natural language phrases rather than structured codes or identifiers.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']{2,}([ ,;:\\-]+[A-Za-z][A-Za-z']{2,}){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4240,
    "headerPatterns": [
      {
        "regExp": "(?i).*text.*content.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*description.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description_text"
        ],
        "negativeExamples": [
          "description_code"
        ]
      },
      {
        "regExp": "(?i).*(description|narrative|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*(comments|comment|notes|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*(desc|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_txt"
        ],
        "negativeExamples": [
          "txn_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog.",
      "Customer reported intermittent issues after the update.",
      "This product features a durable frame and lightweight design.",
      "Please provide a detailed explanation of the methodology used.",
      "Project overview: milestones, risks, and resource needs.",
      "Strong winds expected throughout the afternoon and evening.",
      "The article explores trends in remote collaboration tools.",
      "Notes from the meeting summarize key decisions and actions."
    ],
    "negativeContentExamples": [
      "John Smith",
      "Update pending",
      "2024-07-15",
      "INV-20491",
      "Pending approval",
      "A brief",
      "Payment received",
      "https://example.com"
    ],
    "positiveHeaderExamples": [
      "text_content",
      "description_text",
      "free_text",
      "long_description",
      "narrative",
      "comments",
      "notes",
      "details_text"
    ],
    "negativeHeaderExamples": [
      "status",
      "email_address",
      "product_code",
      "customer_id",
      "phone_number",
      "amount",
      "event_date",
      "first_name"
    ],
    "explanation": "This semantic type identifies freeform narrative or descriptive text values, typically composed of multiple words and natural language sentences. The content regex looks for at least three alphabetic words (length \u22653) separated by common delimiters, which distinguishes narrative text from codes, IDs, or short labels. Header patterns progress from specific variants (e.g., text_content, description_text) to broader category terms and abbreviations, ending with the primitive term text. A high threshold and low priority reduce conflicts with more specific types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:33.000319"
  },
  {
    "resultType": "generated",
    "semanticType": "min",
    "description": "text_content: unrestricted narrative or descriptive text intended for sentences or short paragraphs rather than codes or identifiers. This captures verbose, free-form descriptions such as product descriptions, incident narratives, comments, and message bodies.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'-]*\\b([ ,;:()\\-]+\\b[A-Za-z][A-Za-z0-9'-]*\\b){4,}[ .,!?:;\"'()%-]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4320,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|article|case|incident|story|summary|message|comment).*(description|details|body|narrative|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(customer|user|client|feedback).*(text|comments|notes|description|content).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback_text"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|description|info|msg|message).*(text|body|content|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "msg_body"
        ],
        "negativeExamples": [
          "msg_id"
        ]
      },
      {
        "regExp": "(?i).*(free|long|unstructured).*(text|content|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_text"
        ],
        "negativeExamples": [
          "long_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog near the riverbank.",
      "Customer reported intermittent connection drops after the recent update.",
      "This compact blender delivers smooth results and cleans up easily.",
      "Our mission is to empower teams through clear, actionable insights.",
      "The article explores market trends and potential risks for startups.",
      "Please provide a detailed summary of the incident and mitigation steps.",
      "Built with durable materials, the chair offers firm back support."
    ],
    "negativeContentExamples": [
      "Blue cotton shirt",
      "Submit form ASAP",
      "Model AB-12345",
      "2025-07-14",
      "John M Doe",
      "High priority issue",
      "OK great"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "article_body",
      "incident_narrative",
      "customer_feedback_text",
      "long_text",
      "message_content",
      "story_details"
    ],
    "negativeHeaderExamples": [
      "product_code",
      "article_id",
      "case_number",
      "notes_count",
      "summary_date",
      "content_type",
      "free_tier"
    ],
    "explanation": "This semantic type targets free-form narrative or descriptive fields containing multiple word tokens, typically sentences or short paragraphs. The value regex favors at least five letter-starting words separated by spaces or punctuation to reduce false matches with codes, IDs, dates, or short labels. Header patterns progress from specific domain phrases (e.g., product_description, incident_narrative) to the primitive term text, improving precision in schema-driven detection. Use this type for columns storing descriptions, narratives, comments, or message bodies where content is expected to be unstructured natural language.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:36.174757"
  },
  {
    "resultType": "generated",
    "semanticType": "note",
    "description": "Unrestricted narrative or descriptive text intended for free-form notes, comments, or detailed explanations. Typical values are multi-word sentences or paragraphs that convey context, instructions, observations, or status in natural language.",
    "pluginType": "regex",
    "regexPattern": "\\b[a-zA-Z0-9][a-zA-Z0-9\"()\\/#&%\\-,:;.!?]*(\\s+[a-zA-Z0-9\"()\\/#&%\\-,:;.!?]+){3,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4090,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|case|internal).*note.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_note"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(case|order|ticket).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_notes"
        ],
        "negativeExamples": [
          "case_number"
        ]
      },
      {
        "regExp": "(?i).*(comment|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "internal_comments"
        ],
        "negativeExamples": [
          "internal_status"
        ]
      },
      {
        "regExp": "(?i).*(description|desc|narrative|free[ _]text|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_description"
        ],
        "negativeExamples": [
          "order_status"
        ]
      },
      {
        "regExp": "(?i).*note.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "note"
        ],
        "negativeExamples": [
          "email"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported intermittent errors after update, requesting a follow-up call tomorrow.",
      "Left detailed instructions for setup; user should verify network settings before proceeding.",
      "Package arrived damaged; replacement authorized and expedited via courier service.",
      "Spoke with supervisor who approved credit; document reference attached for review.",
      "Follow-up scheduled for next week to discuss migration plan and resource needs.",
      "User indicates performance improved significantly after cache clear and reboot.",
      "Multiple stakeholders provided feedback during workshop, notes consolidated below.",
      "Please document any exceptions encountered during testing and notify the team."
    ],
    "negativeContentExamples": [
      "Approved",
      "Left voicemail",
      "See attachment",
      "OK to ship",
      "Pending review",
      "Call back",
      "Follow up soon",
      "Short note"
    ],
    "positiveHeaderExamples": [
      "customer_note",
      "case_notes",
      "internal_comments",
      "order_description",
      "free_text",
      "remarks",
      "ticket_narrative",
      "additional_details"
    ],
    "negativeHeaderExamples": [
      "customer_id",
      "case_number",
      "order_status",
      "ticket_count",
      "product_code",
      "internal_status",
      "message_body",
      "additional_info"
    ],
    "explanation": "This semantic type detects fields that contain free-form narrative text typical of notes, comments, or descriptive details. The value pattern emphasizes multi-word, natural-language content by requiring at least four tokens (words) and allowing common punctuation, which helps distinguish it from short tags, codes, or single-word statuses. Header patterns progress from specific entity-based note fields to general synonyms (comments, description, narrative) and finally the primitive term 'note'. This type is broad and should be used at higher thresholds and lower precedence than more specific types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:36.175563"
  },
  {
    "resultType": "generated",
    "semanticType": "number",
    "description": "Unique alphanumeric record key used to identify an entity. Accepts either a single 8\u201320 character alphanumeric token or 2\u20135 groups of exactly 4 alphanumeric characters separated by hyphens.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9]{8,20}\\b|\\b[A-Za-z0-9]{4}(-[A-Za-z0-9]{4}){1,4}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 4630,
    "headerPatterns": [
      {
        "regExp": "(?i).*(record[\\s_-]*key).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_key"
        ],
        "negativeExamples": [
          "record date"
        ]
      },
      {
        "regExp": "(?i).*(record|entity)[\\s_-]*(number|no).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record number"
        ],
        "negativeExamples": [
          "phone number"
        ]
      },
      {
        "regExp": "(?i).*(record|entity)[\\s_-]*(id|identifier).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "entity_id"
        ],
        "negativeExamples": [
          "invoice id"
        ]
      },
      {
        "regExp": "(?i).*(rec|rk|ent)[\\s_-]*(num|no|id).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "rk_num"
        ],
        "negativeExamples": [
          "user id"
        ]
      },
      {
        "regExp": "(?i).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "number"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "A9F0B1C3",
      "XK12Z9M7Q4",
      "ABCD-1234",
      "AA11-BB22-CC33",
      "9Z8Y-7X6W-5V4U-3T2S",
      "Q1W2E3R4T5Y6",
      "M3N4P5Q6",
      "Z0Y9X8W7V6U5"
    ],
    "negativeContentExamples": [
      "A1B2_C3D4",
      "A1B2C3",
      "ABCD-123",
      "ABCD-1234-",
      "ABCD EFGH",
      "A1B2C3D4E5F6G7H8I9J0K1",
      "ABCD/1234",
      "abc-12345"
    ],
    "positiveHeaderExamples": [
      "record_key",
      "record number",
      "entity_id",
      "entity number",
      "rk_num",
      "unique record key",
      "rec_key",
      "record identifier"
    ],
    "negativeHeaderExamples": [
      "record date",
      "customer number",
      "phone number",
      "invoice id",
      "key field",
      "index number",
      "record count",
      "entity name"
    ],
    "explanation": "This semantic type detects unique alphanumeric record keys used for entity identification. It matches either a single 8\u201320 character alphanumeric token or 2\u20135 hyphen-separated groups of exactly four alphanumeric characters. Typical use cases include deduplicating records, joining datasets, and identifying entities where the key is not strictly numeric.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:38.015138"
  },
  {
    "resultType": "generated",
    "semanticType": "cost",
    "description": "Monetary cost amount represented as a numeric value, optionally prefixed by a currency symbol ($, \u20ac, \u00a3, \u00a5) or a 3-letter currency code. Supports thousands separators and two decimal places, including negatives with a leading minus or parentheses.",
    "pluginType": "regex",
    "regexPattern": "\\b\\(?-?\\s*(([A-Z]{3})|(\\$|\u20ac|\u00a3|\u00a5))\\s*\\d{1,3}(,\\d{3})*(\\.\\d{2})\\)?\\b|\\b\\(?-?\\s*\\d{1,3}(,\\d{3})*(\\.\\d{2})\\)?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4420,
    "headerPatterns": [
      {
        "regExp": "(?i).*(total|unit|standard).*cost.*amount.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "total_cost_amount"
        ],
        "negativeExamples": [
          "total_price_amount"
        ]
      },
      {
        "regExp": "(?i).*(item|product|material).*cost.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_cost"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(cost|expense|charge|fee).*(amt|amount|value).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cost_amt"
        ],
        "negativeExamples": [
          "charge_code"
        ]
      },
      {
        "regExp": "(?i).*cost.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unit_cost"
        ],
        "negativeExamples": [
          "price"
        ]
      },
      {
        "regExp": "(?i).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cost_number"
        ],
        "negativeExamples": [
          "invoice_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "$1,234.56",
      "199.99",
      "\u20ac75.50",
      "USD 12,345.67",
      "(1,200.00)",
      "-$45.00",
      "\u00a32,500.00",
      "0.00"
    ],
    "negativeContentExamples": [
      "$1,234",
      "1,234",
      "USD 1000",
      "12.",
      "12,34",
      "$- 45.00",
      "1.234,56",
      "45"
    ],
    "positiveHeaderExamples": [
      "total_cost_amount",
      "unit_cost",
      "item_cost",
      "cost_amt",
      "shipping_cost",
      "standard_cost",
      "material_cost",
      "cost_number"
    ],
    "negativeHeaderExamples": [
      "price_amount",
      "charge_code",
      "revenue",
      "total_price",
      "customer_name",
      "invoice_number",
      "cost_center",
      "standard_code"
    ],
    "explanation": "This semantic type identifies values that represent monetary costs, commonly found in financial, procurement, and billing datasets. It focuses on amounts with two decimal places and supports optional currency symbols or three-letter currency codes, including negative formats using a minus sign or parentheses.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:38.259515"
  },
  {
    "resultType": "generated",
    "semanticType": "class",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\u201c\u201d\"(),;:?!\\-]*([ ]+[A-Za-z0-9'\u2019\u201c\u201d\"(),;:?!\\-]{2,}){9,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4280,
    "headerPatterns": [
      {
        "regExp": "(?i).*text.*content.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "content_type"
        ]
      },
      {
        "regExp": "(?i).*(narrative|free).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "narrative_flag"
        ]
      },
      {
        "regExp": "(?i).*content.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "content"
        ],
        "negativeExamples": [
          "continent"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description_text"
        ],
        "negativeExamples": [
          "design_notes"
        ]
      },
      {
        "regExp": "(?i).*(txt|message|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "message_body"
        ],
        "negativeExamples": [
          "msg_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_text"
        ],
        "negativeExamples": [
          "caption"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumped over the lazy dog while children watched nearby.",
      "Customer reported intermittent connectivity issues after the latest software update was installed.",
      "This detailed note explains the reasoning behind the decision and outlines next steps.",
      "Please provide additional context regarding the billing discrepancy identified during the audit.",
      "Our team observed unusually high memory usage under heavy load in production last night.",
      "The incident occurred in the warehouse after hours and was reported to security immediately.",
      "In summary, the prototype met performance requirements but requires refinements to usability and reliability."
    ],
    "negativeContentExamples": [
      "Please follow up with the client tomorrow morning",
      "Unable to reproduce on test environment at this time",
      "Work in progress, needs verification",
      "Error 500 observed under peak load",
      "Short note about issue",
      "Updated configuration",
      "Call customer back",
      "See details above"
    ],
    "positiveHeaderExamples": [
      "text_content",
      "description_text",
      "narrative_text",
      "free_text",
      "content",
      "notes",
      "message_body",
      "long_text"
    ],
    "negativeHeaderExamples": [
      "continent",
      "messenger",
      "msg_code",
      "note_id",
      "title",
      "short_title",
      "label",
      "caption"
    ],
    "explanation": "Identifies free-form narrative or descriptive text fields, typically multi-sentence or long-form notes suitable for comments, descriptions, or message bodies. The regex requires at least ten space-separated tokens to reduce false positives from short phrases or identifiers, while allowing common punctuation. Use when the column stores unstructured long text rather than short titles, codes, or numeric fields.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:38.302843"
  },
  {
    "resultType": "generated",
    "semanticType": "area",
    "description": "Unrestricted narrative or descriptive text intended to capture free-form content such as notes, remarks, summaries, and multi-sentence descriptions. Values typically contain multiple words and punctuation, reflecting natural language prose.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}[A-Za-z0-9'(),;:!?\"%&/+-]*\\s+[A-Za-z]{2,}[A-Za-z0-9'(),;:!?\"%&/+-]*\\s+[A-Za-z]{2,}[A-Za-z0-9'(),;:!?\"%&/+-]+",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4450,
    "headerPatterns": [
      {
        "regExp": "(?i).*text[_\\s]*content.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "content_type"
        ]
      },
      {
        "regExp": "(?i).*long[_\\s]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "description_code"
        ]
      },
      {
        "regExp": "(?i).*narrative.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "narrator"
        ]
      },
      {
        "regExp": "(?i).*txt.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "txt_body"
        ],
        "negativeExamples": [
          "tax_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "notes"
        ]
      }
    ],
    "positiveContentExamples": [
      "The equipment was inspected and found to be in good working order.",
      "Customer reported intermittent outages during peak hours, particularly on weekends.",
      "Please deliver the package to the side entrance and ring the bell twice.",
      "This policy applies to contractors, vendors, and temporary staff across all regions.",
      "The design emphasizes simplicity, accessibility, and consistent branding throughout.",
      "If symptoms persist after 48 hours, consult a physician for further evaluation.",
      "Our mission is to create safe, reliable, and affordable transportation options.",
      "The meeting concluded with action items assigned to each department lead."
    ],
    "negativeContentExamples": [
      "Pending review",
      "See attached",
      "OK",
      "N/A",
      "ABCD-1234-EFGH",
      "v2.0 update",
      "Red, blue",
      "12 34 56"
    ],
    "positiveHeaderExamples": [
      "text_content",
      "long_description",
      "narrative_text",
      "txt_body",
      "product_text",
      "text",
      "item_text",
      "detailed_text"
    ],
    "negativeHeaderExamples": [
      "content_type",
      "description_code",
      "narrator",
      "tax_id",
      "status",
      "comment",
      "body",
      "metadata"
    ],
    "explanation": "This semantic type identifies free-form narrative fields that contain natural language prose with multiple words and typical punctuation. It is useful for detecting columns that store notes, remarks, or long descriptions rather than structured codes, names, or numeric identifiers. The value regex requires at least three words with alphabetic content to avoid short labels and code-like fragments, while header patterns prioritize common naming conventions such as text_content, long_description, and narrative.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:40.905001"
  },
  {
    "resultType": "generated",
    "semanticType": "end",
    "description": "epoch_seconds: standard Unix timestamp in seconds",
    "pluginType": "regex",
    "regexPattern": "\\b\\d{10}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4690,
    "headerPatterns": [
      {
        "regExp": "(?i).*epoch.*seconds?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "epoch_seconds"
        ],
        "negativeExamples": [
          "epoch_millis"
        ]
      },
      {
        "regExp": "(?i).*unix.*timestamp.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unix_timestamp_sec"
        ],
        "negativeExamples": [
          "unix_timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*epoch.*timestamp.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "epoch_timestamp"
        ],
        "negativeExamples": [
          "timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(ts|tstamp).*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "tstamp_sec"
        ],
        "negativeExamples": [
          "tstamp_ms"
        ]
      },
      {
        "regExp": "(?i).*date.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "date"
        ],
        "negativeExamples": [
          "email"
        ]
      }
    ],
    "positiveContentExamples": [
      "1000000000",
      "1234567890",
      "1451606400",
      "1577836800",
      "1609459200",
      "1672531200",
      "1700000000",
      "2147483647"
    ],
    "negativeContentExamples": [
      "1609459200000",
      "160945920",
      "01609459200",
      "17000000000",
      "1,609,459,200",
      "1609459200.0",
      "1609459200Z",
      "-1609459200"
    ],
    "positiveHeaderExamples": [
      "epoch_seconds",
      "unix_timestamp_sec",
      "epoch_timestamp",
      "ts_sec",
      "event_epoch_seconds",
      "created_ts_sec",
      "unix_time_seconds",
      "auth_epoch_seconds"
    ],
    "negativeHeaderExamples": [
      "epoch_millis",
      "unix_timestamp_ms",
      "timestamp_ms",
      "ts_ms",
      "ms_epoch",
      "date_time_ms",
      "epoch_nanos",
      "file_timestamp"
    ],
    "explanation": "Represents Unix epoch time expressed in whole seconds since 1970-01-01T00:00:00Z. Values are expected to be exactly 10 digits, distinguishing seconds from millisecond or nanosecond epochs. Suitable for columns storing compact second-resolution timestamps in logs, events, or audit records.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:43.135861"
  },
  {
    "resultType": "generated",
    "semanticType": "day",
    "description": "Numeric calendar day within a month, represented as an integer from 1 to 31, optionally zero-padded (01\u201309). Intended for fields that store only the day component, without month or year.",
    "pluginType": "regex",
    "regexPattern": "\\b(0?[1-9]|[12][0-9]|3[01])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 4620,
    "headerPatterns": [
      {
        "regExp": "(?i).*day[_ ]of[_ ]month.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "day_of_month"
        ],
        "negativeExamples": [
          "month_day"
        ]
      },
      {
        "regExp": "(?i).*calendar[_ ]day.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "calendar_day"
        ],
        "negativeExamples": [
          "calendar_date"
        ]
      },
      {
        "regExp": "(?i).*(dom|daynum|day[_ ]number).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "dom"
        ],
        "negativeExamples": [
          "dow"
        ]
      },
      {
        "regExp": "(?i).*(billing[_ ]day|statement[_ ]day|due[_ ]day).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "billing_day"
        ],
        "negativeExamples": [
          "billing_date"
        ]
      },
      {
        "regExp": "(?i).*(month[_ ]day|mday).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "month_day"
        ],
        "negativeExamples": [
          "month"
        ]
      },
      {
        "regExp": "(?i).*\\bday\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "day"
        ],
        "negativeExamples": [
          "weekday"
        ]
      }
    ],
    "positiveContentExamples": [
      "1",
      "2",
      "09",
      "10",
      "15",
      "21",
      "30",
      "31"
    ],
    "negativeContentExamples": [
      "0",
      "00",
      "32",
      "40",
      "1st",
      "31st",
      "09am",
      "A10"
    ],
    "positiveHeaderExamples": [
      "day_of_month",
      "calendar_day",
      "dom",
      "billing_day",
      "statement_day",
      "due_day",
      "month_day",
      "day_number"
    ],
    "negativeHeaderExamples": [
      "calendar_date",
      "day_of_week",
      "weekday",
      "dow",
      "month",
      "date",
      "billing_date",
      "days"
    ],
    "explanation": "This semantic type identifies values that represent the day of the month (1\u201331), with optional leading zeros for single-digit days. It is useful when the dataset stores the day component separately from month and year, such as in split date fields or recurring billing day fields. It excludes full dates, day-of-week names or codes, and any values outside the 1\u201331 range.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:46.003324"
  },
  {
    "resultType": "generated",
    "semanticType": "order",
    "description": "Unrestricted narrative or descriptive text associated with an order, including notes, special instructions, and human-readable details. Intended to capture multi-word sentences or phrases rather than structured identifiers or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-]+\\b([ \\t,;:.!?]+\\b[A-Za-z][A-Za-z0-9'\u2019\\-]+\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4490,
    "headerPatterns": [
      {
        "regExp": "(?i).*order.*description.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "order_description"
        ],
        "negativeExamples": [
          "order_date"
        ]
      },
      {
        "regExp": "(?i).*order.*notes.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "order_notes"
        ],
        "negativeExamples": [
          "shipment_notes"
        ]
      },
      {
        "regExp": "(?i).*order.*instructions.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_instructions"
        ],
        "negativeExamples": [
          "payment_instructions"
        ]
      },
      {
        "regExp": "(?i).*order.*details.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "order_details"
        ],
        "negativeExamples": [
          "order_total"
        ]
      },
      {
        "regExp": "(?i).*(ord).*desc.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "ord_desc"
        ],
        "negativeExamples": [
          "ord_id"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "order_id"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please ship all items together and leave the package at the back entrance.",
      "Customer requested gift wrapping with a handwritten note saying thank you.",
      "Fragile glassware; handle with care during transit.",
      "Deliver after 5pm; call upon arrival for gate access.",
      "Include assembly instructions and remove price tags before delivery.",
      "Pack in two separate boxes and prioritize the blue model first.",
      "Expedite if possible; order is for a time-sensitive event.",
      "Leave delivery at reception and obtain signature from front desk."
    ],
    "negativeContentExamples": [
      "Ship ASAP",
      "2024-05-01 delivery after 5",
      "Leave@reception#desk",
      "Call-before-delivery",
      "N/A",
      "Handle with",
      "12 items only",
      "5pm pickup only"
    ],
    "positiveHeaderExamples": [
      "order_description",
      "order_notes",
      "order_instructions",
      "ord_desc",
      "order_details",
      "order_text",
      "special_order_instructions"
    ],
    "negativeHeaderExamples": [
      "order_number",
      "order_date",
      "order_id",
      "customer_description",
      "product_notes",
      "payment_instructions",
      "order_status_code"
    ],
    "explanation": "This semantic type targets free-form text fields attached to orders, such as notes, instructions, and descriptive details. The regex requires at least three alphabetic-leading word tokens separated by common punctuation or whitespace, reducing false positives from short labels, codes, dates, or IDs. Header patterns prioritize explicit order-related text fields before a general description fallback, with a high threshold and low priority to minimize conflicts with more specific types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:53.833334"
  },
  {
    "resultType": "generated",
    "semanticType": "version",
    "description": "record_key: unique alphanumeric code for entity identification",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Za-z][A-Za-z0-9]{6,22}[0-9]|[0-9][A-Za-z0-9]{6,22}[A-Za-z])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 4600,
    "headerPatterns": [
      {
        "regExp": "(?i).*record[\\s_-]*key.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_key"
        ],
        "negativeExamples": [
          "key_record"
        ]
      },
      {
        "regExp": "(?i).*(entity|record)[\\s_-]*(id|code).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "entity_id"
        ],
        "negativeExamples": [
          "entity_count"
        ]
      },
      {
        "regExp": "(?i).*(rec|ent|rk|eid|uid)[\\s_-]*(id|key|code).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "rk_code"
        ],
        "negativeExamples": [
          "uid_status"
        ]
      },
      {
        "regExp": "(?i).*(unique|uniq|primary)[\\s_-]*(key|id|code).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "unique_code"
        ],
        "negativeExamples": [
          "primary_contact"
        ]
      },
      {
        "regExp": "(?i).*code.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "code"
        ],
        "negativeExamples": [
          "version"
        ]
      }
    ],
    "positiveContentExamples": [
      "A1B2C3D4",
      "9Z7Y6X5W",
      "AB12CD34",
      "7MNOPQ8R",
      "X9Y8Z7W6V5",
      "1A3B5C7D9E",
      "QWERTY12",
      "4GH56JKL78"
    ],
    "negativeContentExamples": [
      "ABCDEFGH",
      "12345678",
      "A1B2C3",
      "A1B2C3D4E5F6G7H8I9J0K1L2",
      "A1B2-C3D4",
      "A1B2C3D_",
      "A1B2C3D4!",
      "abc123\ud83d\ude42"
    ],
    "positiveHeaderExamples": [
      "record_key",
      "record key",
      "entity_id",
      "entity code",
      "unique_code",
      "id_code",
      "primary_key",
      "rk_code"
    ],
    "negativeHeaderExamples": [
      "version",
      "record_date",
      "entity_name",
      "record_status",
      "quantity",
      "checksum",
      "approval_number",
      "last_updated"
    ],
    "explanation": "This semantic type identifies unique alphanumeric record keys used to reference or link entities across datasets. Values are constrained to 8\u201324 alphanumeric characters and must include at least one letter and one digit, avoiding symbols or separators. Typical headers include record_key, entity_id, and unique_code, with a primitive focus on the term 'code'.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:54.404787"
  },
  {
    "resultType": "generated",
    "semanticType": "price",
    "description": "Monetary price values expressed with a currency symbol or ISO currency code alongside a numeric amount. Supports common formats with thousands separators and two-decimal precision in both dot-decimal and comma-decimal locales.",
    "pluginType": "regex",
    "regexPattern": "\\b(([$\u20ac\u00a3\u00a5\u20b9\u20a9\u20b1\u20bd\u20ab])\\s?\\d{1,3}([, ]\\d{3})?(?:[, ]\\d{3})*(\\.\\d{2})?|([$\u20ac\u00a3\u00a5\u20b9\u20a9\u20b1\u20bd\u20ab])\\s?\\d+(\\.\\d{2})?|\\d{1,3}([, ]\\d{3})?(?:[, ]\\d{3})*(\\.\\d{2})?\\s?([$\u20ac\u00a3\u00a5\u20b9\u20a9\u20b1\u20bd\u20ab])|\\d+(\\.\\d{2})?\\s?([$\u20ac\u00a3\u00a5\u20b9\u20a9\u20b1\u20bd\u20ab])|([$\u20ac\u00a3\u00a5\u20b9\u20a9\u20b1\u20bd\u20ab])\\s?\\d{1,3}(\\.\\d{3})+(,\\d{2})?|\\d{1,3}(\\.\\d{3})+(,\\d{2})?\\s?([$\u20ac\u00a3\u00a5\u20b9\u20a9\u20b1\u20bd\u20ab])|(USD|EUR|GBP|CAD|AUD|JPY|CNY|INR)\\s?\\d{1,3}([, ]\\d{3})*(\\.\\d{2})?|\\d{1,3}([, ]\\d{3})*(\\.\\d{2})?\\s?(USD|EUR|GBP|CAD|AUD|JPY|CNY|INR)|(USD|EUR|GBP|CAD|AUD|JPY|CNY|INR)\\s?\\d{1,3}(\\.\\d{3})+(,\\d{2})?|\\d{1,3}(\\.\\d{3})+(,\\d{2})?\\s?(USD|EUR|GBP|CAD|AUD|JPY|CNY|INR))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4510,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\bunit(_| )price\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unit_price"
        ],
        "negativeExamples": [
          "unit_count"
        ]
      },
      {
        "regExp": "(?i).*\\b(purchase|sale|list|net|gross)\\b.*\\bprice\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "sale_price"
        ],
        "negativeExamples": [
          "sale_date"
        ]
      },
      {
        "regExp": "(?i).*\\b(item|product|order|invoice)\\b.*\\bprice\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_price"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*\\b(ppu|msrp|srp|prc)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "msrp"
        ],
        "negativeExamples": [
          "avg_cost"
        ]
      },
      {
        "regExp": "(?i).*\\bprice\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "price"
        ],
        "negativeExamples": [
          "amount"
        ]
      }
    ],
    "positiveContentExamples": [
      "$12.99",
      "$1,234",
      "\u20ac1.234,56",
      "\u00a3250",
      "USD 99.95",
      "2,499.00 USD",
      "JPY 1,200",
      "\u20b9750.00"
    ],
    "negativeContentExamples": [
      "1299",
      "12.9 USD",
      "$1.234.56",
      "EUR 12,345.6",
      "USD-120.00",
      "\u20ac",
      "$ 12 34",
      "USD 12,34"
    ],
    "positiveHeaderExamples": [
      "unit_price",
      "sale_price",
      "product_price",
      "msrp",
      "list_price",
      "price",
      "purchase_price",
      "item_price_usd"
    ],
    "negativeHeaderExamples": [
      "unit_count",
      "sale_date",
      "product_code",
      "avg_cost",
      "amount",
      "invoice_number",
      "currency_code",
      "discount_rate"
    ],
    "explanation": "Identifies monetary price values that include a recognizable currency symbol (e.g., $, \u20ac, \u00a3, \u00a5, \u20b9) or a common ISO currency code (e.g., USD, EUR, GBP, CAD, AUD, JPY, CNY, INR) together with a numeric amount. Supports common US/intl formats with thousands separators and two-decimal fractional parts, including European comma-decimal style. This type is useful for columns storing unit, sale, list, or transaction prices and avoids matching plain numbers by requiring a currency indicator.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:55.652731"
  },
  {
    "resultType": "generated",
    "semanticType": "length",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]*( [A-Za-z][A-Za-z'-]*){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4540,
    "headerPatterns": [
      {
        "regExp": "(?i).*(long|full).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "description_code"
        ]
      },
      {
        "regExp": "(?i).*(case|ticket).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_notes"
        ],
        "negativeExamples": [
          "case_number"
        ]
      },
      {
        "regExp": "(?i).*(comments?|remarks?).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments_text"
        ],
        "negativeExamples": [
          "commenter_id"
        ]
      },
      {
        "regExp": "(?i).*(description|narrative|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_details"
        ],
        "negativeExamples": [
          "descriptor_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_text"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "The item arrived earlier than expected and was well packaged.",
      "Customer reports intermittent connectivity issues during peak hours.",
      "This dataset contains anonymized records for analysis purposes.",
      "Please contact support if the problem persists after rebooting.",
      "A comprehensive overview of the project milestones and risks.",
      "Installation completed successfully on all target machines.",
      "The proposed approach balances accuracy with computational cost.",
      "User noted that the interface is intuitive but could be faster."
    ],
    "negativeContentExamples": [
      "OK",
      "N/A",
      "John Doe",
      "123 Main St",
      "Issue: resolved",
      "Model X200",
      "Great product!",
      "Working"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "case_notes",
      "comments_text",
      "narrative",
      "long_text",
      "issue_details",
      "observation_text",
      "project_description"
    ],
    "negativeHeaderExamples": [
      "length",
      "status",
      "title",
      "category",
      "sku_code",
      "start_date",
      "email_address",
      "city"
    ],
    "explanation": "This semantic type detects free-form narrative or descriptive text content, characterized by multi-word phrases and sentences rather than single tokens or codes. It is useful for identifying columns that contain comments, descriptions, notes, narratives, and other unstructured textual fields in datasets.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:55.939495"
  },
  {
    "resultType": "generated",
    "semanticType": "id",
    "description": "Record key: unique alphanumeric identifier used to distinguish one entity or record from another within a dataset. Values are restricted to alphanumeric characters and a controlled length to reduce false positives.",
    "pluginType": "regex",
    "regexPattern": "\\b(?=[A-Za-z0-9]{8,20}\\b)([A-Za-z0-9]*[A-Za-z][A-Za-z0-9]*[0-9][A-Za-z0-9]*|[A-Za-z0-9]*[0-9][A-Za-z0-9]*[A-Za-z][A-Za-z0-9]*)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4050,
    "headerPatterns": [
      {
        "regExp": "(?i).*record[_ ]?key.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_key"
        ],
        "negativeExamples": [
          "record_date"
        ]
      },
      {
        "regExp": "(?i).*(unique[_ ]?identifier|unique[_ ]?id|uid).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unique_identifier"
        ],
        "negativeExamples": [
          "unique_code"
        ]
      },
      {
        "regExp": "(?i).*(record|entity|user|account)[_ ]?id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "entity_id"
        ],
        "negativeExamples": [
          "entity_name"
        ]
      },
      {
        "regExp": "(?i).*(primary|system)[_ ]?id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "primary_id"
        ],
        "negativeExamples": [
          "system_code"
        ]
      },
      {
        "regExp": "(?i).*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "id"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "A1B2C3D4",
      "9Z8Y7X6W",
      "X3K9M2P7",
      "1234ABCD",
      "AB12CD34",
      "R5T8Y2U0",
      "QW12ER34TY",
      "7G8H9J2K3"
    ],
    "negativeContentExamples": [
      "ABCDEFGH",
      "12345678",
      "A1B2C3",
      "A1B2C3D4E5F6G7H8I9J0K",
      "AB12-CD34",
      "AB12_CD34",
      "AB12 CD34",
      "A1B2C3D!"
    ],
    "positiveHeaderExamples": [
      "record_key",
      "entity_id",
      "user_id",
      "unique_identifier",
      "uid",
      "primary_id",
      "account_id",
      "system_id"
    ],
    "negativeHeaderExamples": [
      "record_date",
      "entity_name",
      "account_code",
      "reference_number",
      "checksum",
      "session_key",
      "postal_code",
      "user_email"
    ],
    "explanation": "This semantic type targets generic record identifiers composed only of letters and digits, with a length constraint to avoid matching free text or simple numbers. It is intended for columns that serve as primary keys or unique entity IDs, such as record_key, entity_id, or uid.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:55:56.489364"
  },
  {
    "resultType": "generated",
    "semanticType": "species",
    "description": "Scientific species name written in Latin binomial or trinomial form, consisting of a capitalized Genus followed by a lowercase specific epithet, optionally with a third infraspecific epithet (e.g., Homo sapiens, Canis lupus familiaris). Intended for precise taxonomic names without authorship, years, or abbreviations.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{2,} [a-z]{3,}( [a-z]{3,})?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 4640,
    "headerPatterns": [
      {
        "regExp": "(?i).*(scientific|latin).*species.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "scientific_species_name"
        ],
        "negativeExamples": [
          "species_code"
        ]
      },
      {
        "regExp": "(?i).*(binomial|trinomial).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "binomial_name"
        ],
        "negativeExamples": [
          "common_name"
        ]
      },
      {
        "regExp": "(?i).*(taxon|taxonomy).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "taxon_name"
        ],
        "negativeExamples": [
          "species_name"
        ]
      },
      {
        "regExp": "(?i).*species.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "species_name"
        ],
        "negativeExamples": [
          "species_count"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Homo sapiens",
      "Canis lupus",
      "Escherichia coli",
      "Drosophila melanogaster",
      "Quercus robur",
      "Pan troglodytes",
      "Anopheles gambiae",
      "Canis lupus familiaris"
    ],
    "negativeContentExamples": [
      "H. sapiens",
      "Homo sapiens Linnaeus, 1758",
      "HOMO SAPIENS",
      "Homo s.",
      "Canis-lupus",
      "Felis",
      "Gorilla g",
      "Homo  sapiens"
    ],
    "positiveHeaderExamples": [
      "species_name",
      "scientific_species_name",
      "binomial_name",
      "species_scientific",
      "taxon_name",
      "latin_species_name",
      "sci_name",
      "species"
    ],
    "negativeHeaderExamples": [
      "species_count",
      "animal_type",
      "genus_only",
      "species_code",
      "common_name",
      "description",
      "product_name",
      "date"
    ],
    "explanation": "This semantic type identifies scientific species names in binomial or trinomial format. The regex enforces a capitalized Genus followed by one or two lowercase epithets, rejecting initials, authorship strings, punctuation, and all-caps forms. Use this for columns labeled with species-related headers (e.g., species_name, binomial_name) to distinguish precise taxonomic names from common names or general text.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:01.160844"
  },
  {
    "resultType": "generated",
    "semanticType": "abbreviation",
    "description": "Values that are abbreviations, acronyms, or initialisms. Matches short uppercase sequences (2\u20134 letters) or compact tokens separated by dots, slashes, ampersands, or hyphens (e.g., U.S., N/A, R&D), with an optional trailing period. Excludes lowercase letters, spaces, and long words.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z]{2,4}|[A-Z0-9]{1,3}([./&-][A-Z0-9]{1,3}){1,4})\\.?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4570,
    "headerPatterns": [
      {
        "regExp": "(?i).*(official|standard).*(abbreviation|abbr|acronym).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "official_abbreviation"
        ],
        "negativeExamples": [
          "official_description"
        ]
      },
      {
        "regExp": "(?i).*(term|phrase|title|label).*(abbreviation|abbr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "term_abbreviation"
        ],
        "negativeExamples": [
          "term_full"
        ]
      },
      {
        "regExp": "(?i).*(acronym|initialism).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "initialism"
        ],
        "negativeExamples": [
          "initials"
        ]
      },
      {
        "regExp": "(?i).*abbr.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abbr"
        ],
        "negativeExamples": [
          "address"
        ]
      },
      {
        "regExp": "(?i).*abbreviation.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abbreviation"
        ],
        "negativeExamples": [
          "description"
        ]
      }
    ],
    "positiveContentExamples": [
      "ETA",
      "DOB",
      "SKU",
      "U.S.",
      "U.S.A.",
      "N/A",
      "R&D",
      "FYI"
    ],
    "negativeContentExamples": [
      "Data",
      "a.k.a.",
      "A",
      "ABCDEFG",
      "C-suite",
      "U_S_A",
      "N\\A",
      "FY 23"
    ],
    "positiveHeaderExamples": [
      "product_abbreviation",
      "official_abbreviation",
      "term_abbreviation",
      "acronym",
      "initialism",
      "abbr",
      "short_form",
      "standard_abbreviation"
    ],
    "negativeHeaderExamples": [
      "description",
      "full_term",
      "address",
      "short_description",
      "code",
      "sku",
      "notes",
      "name"
    ],
    "explanation": "This semantic type identifies cells that contain compact abbreviations, acronyms, or initialisms. It is suited for columns that store a short form of a term (e.g., U.S., N/A, R&D, SKU). The regex favors short uppercase tokens and common abbreviation separators (., /, &, -) while disallowing spaces and lowercase to reduce collisions with ordinary words.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:01.569896"
  },
  {
    "resultType": "generated",
    "semanticType": "created",
    "description": "Unix epoch timestamp expressed in whole seconds since 1970-01-01T00:00:00Z. Values are numeric only (no signs, separators, or decimals) and typically appear as 9\u201310 digit integers, excluding millisecond or microsecond forms.",
    "pluginType": "regex",
    "regexPattern": "\\b([1-9][0-9]{8}|[1-9][0-9]{9})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 96,
    "priority": 4710,
    "headerPatterns": [
      {
        "regExp": "(?i).*created.*epoch.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "created_epoch_seconds"
        ],
        "negativeExamples": [
          "created_epoch_ms"
        ]
      },
      {
        "regExp": "(?i).*created_at.*epoch.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "created_at_epoch"
        ],
        "negativeExamples": [
          "updated_at_epoch"
        ]
      },
      {
        "regExp": "(?i).*creation.*epoch.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "creation_epoch"
        ],
        "negativeExamples": [
          "session_epoch"
        ]
      },
      {
        "regExp": "(?i).*created.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "created"
        ],
        "negativeExamples": [
          "updated"
        ]
      },
      {
        "regExp": "(?i).*epoch.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "epoch"
        ],
        "negativeExamples": [
          "timestamp"
        ]
      }
    ],
    "positiveContentExamples": [
      "946684800",
      "999999999",
      "1104537600",
      "1234567890",
      "1451606400",
      "1609459200",
      "1700000000",
      "1893456000"
    ],
    "negativeContentExamples": [
      "1700000000000",
      "17000000000",
      "0123456789",
      "99999999",
      "1609459200.0",
      "1,609,459,200",
      "1609459200Z",
      "+1609459200"
    ],
    "positiveHeaderExamples": [
      "created_epoch_seconds",
      "created_at_epoch",
      "creation_epoch",
      "created_epoch_sec",
      "created_epoch",
      "epoch_created",
      "created",
      "epoch"
    ],
    "negativeHeaderExamples": [
      "updated_epoch",
      "created_timestamp_ms",
      "create_epoch_seconds",
      "created_date",
      "created_epoch_ms",
      "epoch_ms",
      "last_modified",
      "created_at"
    ],
    "explanation": "This semantic type detects integer Unix timestamps in seconds, commonly used for created/creation time fields. It excludes millisecond or microsecond timestamps, signed values, decimals, and values with separators to avoid confusion with other numeric identifiers or date-time formats.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:04.752968"
  },
  {
    "resultType": "generated",
    "semanticType": "project",
    "description": "Free-form narrative or descriptive text associated with a project, such as overviews, summaries, notes, or detailed descriptions. Intended for long-form text fields rather than short labels or identifiers.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9][A-Za-z0-9'\"(),;:!?%&/\\-\\.]*([ ]+[A-Za-z0-9][A-Za-z0-9'\"(),;:!?%&/\\-\\.]*){5,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4560,
    "headerPatterns": [
      {
        "regExp": "(?i).*project.*(description|narrative|text|summary|details|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_description"
        ],
        "negativeExamples": [
          "project_code"
        ]
      },
      {
        "regExp": "(?i).*(program|initiative|proposal).*(description|summary|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "initiative_summary_text"
        ],
        "negativeExamples": [
          "initiative_id"
        ]
      },
      {
        "regExp": "(?i).*(proj|prj).*(desc|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "proj_txt"
        ],
        "negativeExamples": [
          "project_id"
        ]
      },
      {
        "regExp": "(?i).*project.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "project_overview"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(text|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "item_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "This project aims to improve community access.",
      "The pilot phase gathered feedback from local partners and stakeholders.",
      "Funding will support training, outreach, and data platform enhancements.",
      "Our team will deliver a scalable prototype within the next quarter.",
      "Key risks include supply delays, staffing gaps, and vendor integration issues.",
      "Objectives focus on accessibility, reliability, and measurable service improvements.",
      "This narrative outlines scope, milestones, dependencies, and evaluation methods.",
      "The solution description provides context, assumptions, and planned deliverables."
    ],
    "negativeContentExamples": [
      "Project overview draft",
      "Initial setup completed",
      "Q3 report - draft",
      "project-123",
      "http://example.com/details",
      "2024-05-03",
      "Alpha project phase",
      "Fix bug 123 ASAP"
    ],
    "positiveHeaderExamples": [
      "project_description",
      "project_text",
      "project_summary",
      "project_details",
      "project_notes",
      "initiative_summary_text",
      "proposal_desc",
      "proj_txt"
    ],
    "negativeHeaderExamples": [
      "project_code",
      "initiative_id",
      "project_id",
      "customer_id",
      "item_code",
      "contact_name",
      "start_date",
      "total_number"
    ],
    "explanation": "This type identifies free-form, multi-word narrative fields typically used to describe a project, such as descriptions, summaries, or notes. The value pattern favors at least six space-separated tokens to capture longer text while excluding short labels, identifiers, URLs, and date-like values. Header patterns progress from specific project description terms to general text/description indicators, ensuring accurate detection without anchors.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:08.843050"
  },
  {
    "resultType": "generated",
    "semanticType": "score",
    "description": "text_content: unrestricted narrative or descriptive text. Identifies free-form narrative or descriptive text fields, typically containing multi-word sentences or paragraphs rather than codes, numbers, or structured identifiers.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]{1,}\\b([ ,.;:!?-]+\\b[A-Za-z][A-Za-z'-]{1,}\\b){4,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4790,
    "headerPatterns": [
      {
        "regExp": "(?i).*text.*content.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "content_summary"
        ]
      },
      {
        "regExp": "(?i).*(narrative|description|descriptive).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description_text"
        ],
        "negativeExamples": [
          "description_flag"
        ]
      },
      {
        "regExp": "(?i).*(free|unstructured).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_slots"
        ]
      },
      {
        "regExp": "(?i).*(notes|comments|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "rating"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "comments"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog near the river.",
      "Customer reported intermittent failures after the last update.",
      "Please provide a detailed summary of the findings and next steps.",
      "This product feels sturdy, with excellent build quality overall.",
      "After several attempts, the system finally completed the task successfully.",
      "He described the scenery vividly, noting the colors and textures.",
      "Notes indicate the meeting was postponed due to scheduling conflicts.",
      "The investigation concluded that no further action was necessary."
    ],
    "negativeContentExamples": [
      "Excellent quality",
      "Needs work",
      "TBD",
      "Good overall",
      "Pending review - TBD",
      "Lorem ipsum dolor sit",
      "Update required soon",
      "OK"
    ],
    "positiveHeaderExamples": [
      "text_content",
      "narrative_text",
      "description_text",
      "free_text",
      "unstructured_text",
      "comments",
      "notes",
      "remarks_text"
    ],
    "negativeHeaderExamples": [
      "score",
      "rating",
      "grade",
      "status",
      "category",
      "subject",
      "title",
      "label"
    ],
    "explanation": "This semantic type targets free-form narrative or descriptive text content with multiple words, typically used for comments, notes, descriptions, or unstructured text fields. The regex requires at least five word tokens separated by spaces or common punctuation, reducing false positives from short phrases, codes, or identifiers. Header patterns progress from specific phrases like text_content and narrative_text to the primitive text term.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:09.146464"
  },
  {
    "resultType": "generated",
    "semanticType": "reference",
    "description": "record_key: unique alphanumeric code for entity identification. Typically an uppercase alphanumeric token, optionally segmented with single hyphens or underscores (no spaces or other punctuation).",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b[A-Z0-9]{3,12}([-_][A-Z0-9]{2,12}){0,3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4650,
    "headerPatterns": [
      {
        "regExp": "(?i).*record[_\\s-]*reference[_\\s-]*(code|id|key).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_reference_code"
        ],
        "negativeExamples": [
          "record_name"
        ]
      },
      {
        "regExp": "(?i).*(entity|record)[_\\s-]*(reference|ref).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "entity_reference"
        ],
        "negativeExamples": [
          "recording_key"
        ]
      },
      {
        "regExp": "(?i).*(rec|ref)[_\\s-]*(id|key|code).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "rec_id"
        ],
        "negativeExamples": [
          "ref_count"
        ]
      },
      {
        "regExp": "(?i).*(reference|ref).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "reference"
        ],
        "negativeExamples": [
          "record_code"
        ]
      },
      {
        "regExp": "(?i).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ref_code"
        ],
        "negativeExamples": [
          "record_id"
        ]
      }
    ],
    "positiveContentExamples": [
      "A12B34C5",
      "REF-9Z2M-7K",
      "9F7D-12AB",
      "RKEY-7X9P-2Q",
      "X1Y2Z3A4B5",
      "ENT-0001-ABCD",
      "REC12345",
      "REF_2024_7G"
    ],
    "negativeContentExamples": [
      "REF 1234 AB",
      "R-123",
      "ABCDEF-",
      "1234567890123456789012345",
      "ABCD.1234",
      "ab",
      "A1_B2_C3_D4_E5",
      "REF-"
    ],
    "positiveHeaderExamples": [
      "record_reference_code",
      "record_ref_key",
      "entity_reference",
      "rec_id",
      "ref_code",
      "reference",
      "record_key",
      "entity_ref_id"
    ],
    "negativeHeaderExamples": [
      "reference_date",
      "recording_key",
      "record_name",
      "product_code",
      "ref_count",
      "id_number",
      "customer_reference_notes",
      "rec_status"
    ],
    "explanation": "This semantic type identifies generic alphanumeric reference identifiers used as record keys. Values are uppercase alphanumeric tokens optionally segmented by single hyphens or underscores, without spaces or other punctuation. Use this type to detect and validate general-purpose reference codes where the exact code list is not finite.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:12.629211"
  },
  {
    "resultType": "generated",
    "semanticType": "creator",
    "description": "Full name of a person acting as a creator/author, represented as first name and family name separated by a single space. Tokens are alphabetic with optional internal hyphen or apostrophe and do not include extra words or punctuation.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Za-z]{2,}|[A-Za-z]{1,}['-][A-Za-z]{2,}) ([A-Za-z]{2,}|[A-Za-z]{1,}['-][A-Za-z]{2,})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4760,
    "headerPatterns": [
      {
        "regExp": "(?i).*(creator|author).*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "creator_full_name"
        ],
        "negativeExamples": [
          "customer_full_name"
        ]
      },
      {
        "regExp": "(?i).*(content_)?(creator|author).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "content_creator_name"
        ],
        "negativeExamples": [
          "account_name"
        ]
      },
      {
        "regExp": "(?i).*(crtr|auth).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "crtr_name"
        ],
        "negativeExamples": [
          "user_name"
        ]
      },
      {
        "regExp": "(?i).*(primary_)?(creator|author).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "primary_creator"
        ],
        "negativeExamples": [
          "owner"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Emma Thompson",
      "Anne-Marie Clark",
      "De'Angelo Russo",
      "LUCAS BROWN",
      "Olivia O'Brien",
      "Marco DeLuca",
      "Sarah Johnson"
    ],
    "negativeContentExamples": [
      "John",
      "John A Smith",
      "Smith, John",
      "John  Smith",
      "J. Smith",
      "JOHN-SMITH",
      "John Smith2",
      "Mary O'B"
    ],
    "positiveHeaderExamples": [
      "creator_full_name",
      "author_full_name",
      "creator_name",
      "content_creator_name",
      "authorname",
      "primary_creator_name",
      "video_author_name"
    ],
    "negativeHeaderExamples": [
      "customer_full_name",
      "account_name",
      "owner_name",
      "created_by",
      "creator_id",
      "author_email",
      "filename_creator"
    ],
    "explanation": "This semantic type identifies person full names specifically used for creator/author fields, consisting of exactly two name tokens separated by a single space. It targets datasets where the role (creator/author) is implied by the column header while the cell values are person full names with alphabetic characters and optional internal hyphens or apostrophes. The pattern intentionally rejects single names, multi-token names (with middle names/initials), punctuation like commas, numeric suffixes, and multiple spaces to reduce false positives.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:15.116858"
  },
  {
    "resultType": "generated",
    "semanticType": "publisher",
    "description": "Business Name: registered corporate entity designation. Identifies publisher/business names that include a legal entity designator (e.g., Inc., LLC, Ltd, Corp, PLC, GmbH) as part of the name, indicating a registered corporate entity.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b[A-Z0-9][A-Z0-9&.\\- ]{1,80}\\b[ ,\\-]+(inc\\.?|incorporated|corp\\.?|corporation|company|co\\.|llc|l\\.l\\.c\\.?|ltd\\.?|limited|plc\\.?|llp\\.?|gmbh|ag|bv|nv|kk|sarl|sas|ooo|ab|as|oy|oyj|aps)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4750,
    "headerPatterns": [
      {
        "regExp": "(?i).*(publisher).*(legal|corporate|company|business).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publisher_legal_name"
        ],
        "negativeExamples": [
          "publication_name"
        ]
      },
      {
        "regExp": "(?i).*(publisher[_ ](company|corporate|business|legal)[_ ]name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publisher_company_name"
        ],
        "negativeExamples": [
          "publisher_city"
        ]
      },
      {
        "regExp": "(?i).*(publisher[_ ]?name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publisher_name"
        ],
        "negativeExamples": [
          "company_name"
        ]
      },
      {
        "regExp": "(?i).*(book[_ ]publisher[_ ]name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "book_publisher_name"
        ],
        "negativeExamples": [
          "book_publisher"
        ]
      },
      {
        "regExp": "(?i).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "publisher_entity_name"
        ],
        "negativeExamples": [
          "publisher_city"
        ]
      }
    ],
    "positiveContentExamples": [
      "Harbor Light Media, Inc.",
      "Northwind Books LLC",
      "Blue River Publishing Ltd.",
      "Orchard House Press GmbH",
      "Summit Editions Corporation",
      "Silver Maples Co.",
      "Aurora Arts PLC",
      "Cedar Grove Publishing L.L.C."
    ],
    "negativeContentExamples": [
      "Harbor Light Media Co",
      "Northwind Books L L C",
      "Blue River Publishing Limited Editions",
      "Orchard House Press Gmb",
      "Silver Maples Company Store",
      "Cedar Grove Publishing",
      "Aurora Arts Public",
      "Harbor-Light Media, Incubator"
    ],
    "positiveHeaderExamples": [
      "publisher_company_name",
      "publisher_legal_name",
      "publisher_corporate_name",
      "publisher_business_name",
      "publisher_entity_name",
      "book_publisher_name",
      "publisher_name"
    ],
    "negativeHeaderExamples": [
      "author_name",
      "customer_company_name",
      "imprint_name",
      "publication_name",
      "book_publisher",
      "company_name",
      "publisher_city"
    ],
    "explanation": "This semantic type targets publisher/business names that include a legal entity designator, indicating a registered corporate entity. The regex looks for a plausible multi-token business name followed by a space/comma/hyphen and a recognized corporate suffix such as Inc., LLC, Ltd, Corp, PLC, or GmbH. This helps distinguish formal legal publisher names from informal imprints or brand names lacking a corporate designator.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:17.442566"
  },
  {
    "resultType": "generated",
    "semanticType": "period",
    "description": "Three-month business quarter within a fiscal or calendar year, commonly represented as Q1\u2013Q4 with optional fiscal year indicators (FY) and/or year values. Recognizes concise tokens like Q1 as well as more descriptive forms like Quarter 3.",
    "pluginType": "regex",
    "regexPattern": "\\b(FY\\s*(\\d{2}|\\d{4})\\s*[ -/]\\s*Q[1-4]|Q[1-4]\\s*[ -/]\\s*FY\\s*(\\d{2}|\\d{4})|Q[1-4]\\s*[ -/]\\s*(\\d{2}|\\d{4})|(\\d{2}|\\d{4})\\s*[ -/]\\s*Q[1-4]|Q[1-4]|Quarter\\s*[1-4]|[1-4](st|nd|rd|th)\\s*Quarter|QTR\\s*[1-4])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4820,
    "headerPatterns": [
      {
        "regExp": "(?i).*business.*quarter.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "business_quarter"
        ],
        "negativeExamples": [
          "business_unit"
        ]
      },
      {
        "regExp": "(?i).*fiscal.*quarter.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "fiscal_quarter"
        ],
        "negativeExamples": [
          "fiscal_year"
        ]
      },
      {
        "regExp": "(?i).*reporting.*quarter.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "reporting_quarter"
        ],
        "negativeExamples": [
          "reporting_period"
        ]
      },
      {
        "regExp": "(?i).*fy.*qtr.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fy_qtr"
        ],
        "negativeExamples": [
          "fy_year"
        ]
      },
      {
        "regExp": "(?i).*qtr.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "qtr"
        ],
        "negativeExamples": [
          "qty"
        ]
      },
      {
        "regExp": "(?i).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "quarter"
        ],
        "negativeExamples": [
          "year"
        ]
      }
    ],
    "positiveContentExamples": [
      "Q1",
      "Q3 2022",
      "2024 Q4",
      "Q2-FY23",
      "FY2021 Q3",
      "Quarter 1",
      "1st Quarter 2020",
      "QTR 4"
    ],
    "negativeContentExamples": [
      "FY 2021",
      "Q5 2022",
      "2023-12",
      "1Q 2020",
      "H1 2023",
      "Q2C",
      "Quarter 0",
      "Q1.2023"
    ],
    "positiveHeaderExamples": [
      "business_quarter",
      "fiscal_quarter",
      "reporting_quarter",
      "quarter_period",
      "fy_qtr",
      "qtr",
      "quarter"
    ],
    "negativeHeaderExamples": [
      "fiscal_year",
      "month",
      "period_start",
      "week_number",
      "semester",
      "date",
      "code"
    ],
    "explanation": "This semantic type identifies quarter values commonly used in business and finance, including compact tokens such as Q1\u2013Q4, optional fiscal year markers (FY), and year-qualified variants (e.g., Q2 2023, FY2024 Q1). It also recognizes descriptive forms like Quarter 2 and QTR 3. Typical use cases include grouping transactions, aggregations, and reporting aligned to fiscal or calendar quarters.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:19.565909"
  },
  {
    "resultType": "generated",
    "semanticType": "month",
    "description": "calendar_month: number from 1-12 representing month of year",
    "pluginType": "regex",
    "regexPattern": "\\b(0?[1-9]|1[0-2])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4720,
    "headerPatterns": [
      {
        "regExp": "(?i).*(calendar.*month|month.*of.*year).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "calendar_month"
        ],
        "negativeExamples": [
          "calendar_year"
        ]
      },
      {
        "regExp": "(?i).*month.*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "month_number"
        ],
        "negativeExamples": [
          "month_name"
        ]
      },
      {
        "regExp": "(?i).*(mth|mo|mon).*num.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "mth_num"
        ],
        "negativeExamples": [
          "mon_name"
        ]
      },
      {
        "regExp": "(?i).*moy.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "moy"
        ],
        "negativeExamples": [
          "mon"
        ]
      },
      {
        "regExp": "(?i).*month.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "month"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "1",
      "2",
      "3",
      "09",
      "10",
      "11",
      "12",
      "07"
    ],
    "negativeContentExamples": [
      "0",
      "13",
      "00",
      "1.0",
      "012",
      "20",
      "3/12",
      "12a"
    ],
    "positiveHeaderExamples": [
      "calendar_month",
      "month_of_year",
      "month_number",
      "billing_month_number",
      "mth_num",
      "mo_num",
      "moy",
      "month"
    ],
    "negativeHeaderExamples": [
      "month_name",
      "year",
      "quarter",
      "date",
      "day_of_month",
      "month_start_date",
      "mon_abbr",
      "calendar_year"
    ],
    "explanation": "This semantic type identifies a month of year represented as a numeric value from 1 to 12, optionally zero-padded (01\u201312). It is useful for datasets where the month is stored as an integer token rather than a date string or code.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:19.788433"
  },
  {
    "resultType": "generated",
    "semanticType": "company",
    "description": "Business Name: registered corporate entity designation. Values are formal legal names of business entities and include a legal entity designator such as Inc, LLC, Ltd, Corp, or similar at the end.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b([A-Z0-9][A-Z0-9'&.-]{0,})(\\s+[A-Z0-9][A-Z0-9'&.-]{0,}){0,6}\\s*,?\\s+(Company|Co|Co\\.|Corporation|Corp|Corp\\.|Incorporated|Inc|Inc\\.|Limited|Ltd|Ltd\\.|LLC|L\\.L\\.C\\.|PLC|P\\.L\\.C\\.|LLP|L\\.L\\.P\\.|LP|L\\.P\\.|GmbH|AG|BV|NV|Oy|AB|SAS|S\\.A\\.|SpA|S\\.p\\.A\\.|SRL|S\\.R\\.L\\.|SARL)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4740,
    "headerPatterns": [
      {
        "regExp": "(?i).*(registered|legal).*(company|business|corporate).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "legal_company_name"
        ],
        "negativeExamples": [
          "company_code"
        ]
      },
      {
        "regExp": "(?i).*(corporate|corporation|entity).*(name).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "corporate_entity_name"
        ],
        "negativeExamples": [
          "corporate_status"
        ]
      },
      {
        "regExp": "(?i).*(company|business).*(name).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "company_legal_name"
        ],
        "negativeExamples": [
          "business_id"
        ]
      },
      {
        "regExp": "(?i).*(co|corp|inc|ltd|llc).*(name).*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "corp_name"
        ],
        "negativeExamples": [
          "corp_code"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 88,
        "mandatory": true,
        "positiveExamples": [
          "entity_name"
        ],
        "negativeExamples": [
          "entity_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Acme Inc.",
      "Global Dynamics LLC",
      "Northstar Holdings, Ltd.",
      "Blue and Green Co.",
      "Contoso Corporation",
      "Widget Labs GmbH",
      "Aurora Ventures PLC",
      "Delta Partners LLP"
    ],
    "negativeContentExamples": [
      "Acme Incorporateded",
      "Global Dynamics LCC",
      "Northstar Holdings Ltdd",
      "Blue and Green Companys",
      "Widget Labs",
      "Delta Partners PLLC",
      "Futura S A",
      "Aurora Ventures, L.P"
    ],
    "positiveHeaderExamples": [
      "legal_company_name",
      "registered_business_name",
      "corporate_entity_name",
      "company_legal_name",
      "business_name",
      "corp_name",
      "co_name",
      "entity_name"
    ],
    "negativeHeaderExamples": [
      "company_code",
      "business_id",
      "corporate_number",
      "organization",
      "trade_style",
      "brand",
      "product",
      "supplier_code"
    ],
    "explanation": "This semantic type identifies formal legal company names where the text ends with a recognized legal entity designator (e.g., Inc, LLC, Ltd, Corp, GmbH). It is intended for columns containing registered corporate entity names rather than informal brands or product names.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:19.862355"
  },
  {
    "resultType": "generated",
    "semanticType": "format",
    "description": "Unrestricted narrative or descriptive text intended for free-form content such as sentences, paragraphs, comments, notes, or qualitative summaries. Values typically contain multiple words and may include punctuation, mixed case letters, and natural language structure.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\s+[A-Za-z]{2,}\\s+[A-Za-z]{2,}[A-Za-z0-9 ,;:'.()\\-!?]*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4850,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*(narrative|freeform|observation|observations|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "filename"
        ]
      },
      {
        "regExp": "(?i).*(detail|detailed|summary|context).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_summary"
        ],
        "negativeExamples": [
          "postal_code"
        ]
      },
      {
        "regExp": "(?i).*(desc|note|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "observation_notes"
        ],
        "negativeExamples": [
          "user_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "freeform_text"
        ],
        "negativeExamples": [
          "quantity"
        ]
      }
    ],
    "positiveContentExamples": [
      "The product arrived earlier than expected and was carefully packaged.",
      "Please provide a detailed overview of the customer's recent interactions.",
      "This section contains free-form notes recorded during the site visit.",
      "The narrative describes challenges faced and proposed mitigation steps.",
      "Enter any additional comments, context, or observations here.",
      "User-reported issue: intermittent disconnects when switching networks.",
      "Summary of findings includes qualitative feedback and open-ended remarks.",
      "Background: project goals, constraints, and assumptions are outlined below."
    ],
    "negativeContentExamples": [
      "Short summary",
      "Notes: pending",
      "OK",
      "N/A",
      "Version 2.0",
      "Ready-Yes",
      "12345",
      "Completed"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "narrative_text",
      "detailed_notes",
      "comments",
      "freeform_text",
      "issue_summary",
      "additional_context",
      "observation_notes"
    ],
    "negativeHeaderExamples": [
      "file_format",
      "status_code",
      "quantity",
      "postal_code",
      "transaction_date",
      "user_id",
      "email_address",
      "filename"
    ],
    "explanation": "This semantic type identifies free-form narrative text suitable for descriptive fields such as descriptions, comments, notes, summaries, and qualitative context. The value pattern requires at least three words with alphabetic characters and allows typical punctuation, which helps distinguish narrative content from short labels, codes, or identifiers. Header patterns prioritize specific description/narrative terms, then broader synonyms and abbreviations, and finally the primitive term 'text'. The high threshold and priority reduce conflicts with more specific structured types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:19.999553"
  },
  {
    "resultType": "generated",
    "semanticType": "rating",
    "description": "Unrestricted narrative or descriptive text intended to capture free-form human-written content such as reviews, comments, or descriptions. This type targets multi-word prose rather than structured identifiers, codes, or numeric ratings.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{3,}\\b([ \\t,.;:!?\"'()\\-]+\\b[A-Za-z]{2,}\\b){5,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4480,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|product|user).*review.*(text|body|content|message).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_review_text"
        ],
        "negativeExamples": [
          "customer_review_date"
        ]
      },
      {
        "regExp": "(?i).*review.*(text|content|body|message).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "review_body"
        ],
        "negativeExamples": [
          "review_score"
        ]
      },
      {
        "regExp": "(?i).*comment.*(text|body|content|message).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comment_text"
        ],
        "negativeExamples": [
          "comment_id"
        ]
      },
      {
        "regExp": "(?i).*(description|narrative|notes|free.*text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_notes"
        ],
        "negativeExamples": [
          "note_count"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "The service exceeded expectations and the staff were wonderful",
      "Overall an extremely smooth experience with clear instructions and support",
      "Appreciated the timely responses and the user friendly interface",
      "Packaging was secure, delivery prompt, and setup instructions were clear",
      "Excellent build quality with reliable performance over several weeks",
      "Customer support resolved my issue quickly and professionally",
      "The app is intuitive, responsive, and easy to navigate daily"
    ],
    "negativeContentExamples": [
      "5",
      "5/5",
      "A+",
      "****",
      "Great product",
      "The product is good",
      "Works as expected",
      "5 stars"
    ],
    "positiveHeaderExamples": [
      "review_text",
      "customer_review_text",
      "comment_text",
      "feedback_message",
      "description",
      "narrative_notes",
      "text_content",
      "free_text"
    ],
    "negativeHeaderExamples": [
      "review_score",
      "rating",
      "comment_id",
      "feedback_score",
      "title",
      "subject",
      "summary_code",
      "note_count"
    ],
    "explanation": "This semantic type identifies free-form narrative text commonly found in review bodies, comments, descriptions, and other unstructured content fields. It is useful for text mining, NLP processing, and downstream sentiment or topic analysis, while avoiding confusion with numeric ratings, identifiers, or structured codes.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:21.844515"
  },
  {
    "resultType": "generated",
    "semanticType": "department",
    "description": "Full United States state names (50 states only), written in their complete form (e.g., \"California\", \"New York\", \"North Dakota\"). Excludes abbreviations, territories, and any additional qualifiers or suffixes.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4660,
    "headerPatterns": [
      {
        "regExp": "(?i).*(us[_ ]state[_ ]name|us[_ ]state[_ ]full[_ ]name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "us_state_name"
        ],
        "negativeExamples": [
          "us_state_code"
        ]
      },
      {
        "regExp": "(?i).*(billing|shipping|mailing|residence|home|office).*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "billing_state_name"
        ],
        "negativeExamples": [
          "billing_state_code"
        ]
      },
      {
        "regExp": "(?i).*\\b(us|usa)\\b.*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "usa_state_name"
        ],
        "negativeExamples": [
          "us_state_abbr"
        ]
      },
      {
        "regExp": "(?i).*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "state_full_name"
        ],
        "negativeExamples": [
          "state_code"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "California",
      "New York",
      "North Dakota",
      "Rhode Island",
      "Hawaii",
      "Texas",
      "Washington",
      "New Mexico"
    ],
    "negativeContentExamples": [
      "CA",
      "New-York",
      "District of Columbia",
      "Puerto Rico",
      "NewYork",
      "North-Dakota",
      "RhodeIsland",
      "N. Carolina"
    ],
    "positiveHeaderExamples": [
      "us_state_name",
      "state_full_name",
      "billing_state_name",
      "residence_state_name",
      "ship_state_name",
      "usa_state_name",
      "customer_state_name",
      "state_name"
    ],
    "negativeHeaderExamples": [
      "state_code",
      "us_state_code",
      "us_state_abbr",
      "province_name",
      "country_name",
      "region_code",
      "st_cd",
      "state_id"
    ],
    "explanation": "This semantic type identifies cells containing full US state names, not abbreviations or appended qualifiers. It is useful for normalizing address components, validating location fields, and distinguishing full state names from codes or territories in datasets.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:22.356539"
  },
  {
    "resultType": "generated",
    "semanticType": "prefix",
    "description": "title_prefix: formal address designation preceding names. Common honorifics used before a person's name (e.g., MR, DR., MRS.).",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "MR",
      "MR.",
      "MRS",
      "MRS.",
      "MS",
      "MS.",
      "MISS",
      "MX",
      "DR",
      "DR.",
      "PROF",
      "PROF.",
      "REV",
      "REV.",
      "SIR",
      "DAME",
      "HON",
      "HON.",
      "FR",
      "FR.",
      "SR.",
      "SRA.",
      "SRTA.",
      "MME",
      "DO\u00d1A"
    ],
    "backout": "^[A-Z\u00d1]{2,5}\\.?$",
    "confidenceThreshold": 94,
    "priority": 4530,
    "headerPatterns": [
      {
        "regExp": "(?i).*(honorific|title).*prefix.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "honorific_prefix"
        ],
        "negativeExamples": [
          "title_suffix"
        ]
      },
      {
        "regExp": "(?i).*(name|person).*prefix.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name_prefix"
        ],
        "negativeExamples": [
          "person_name"
        ]
      },
      {
        "regExp": "(?i).*salutation.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "salutation"
        ],
        "negativeExamples": [
          "title_description"
        ]
      },
      {
        "regExp": "(?i).*(name|person).*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "person_title"
        ],
        "negativeExamples": [
          "job_title"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "address"
        ]
      }
    ],
    "positiveContentExamples": [
      "MR",
      "MR.",
      "MRS",
      "MS.",
      "DR",
      "DR.",
      "PROF.",
      "DO\u00d1A"
    ],
    "negativeContentExamples": [
      "MISTER",
      "MRS..",
      "MS-",
      "DR,",
      "PR0F.",
      "REV'D",
      "JR.",
      "MD"
    ],
    "positiveHeaderExamples": [
      "title_prefix",
      "honorific_prefix",
      "name_prefix",
      "person_title",
      "salutation",
      "honorific",
      "customer_title_prefix",
      "contact_name_prefix"
    ],
    "negativeHeaderExamples": [
      "title_suffix",
      "suffix",
      "job_title",
      "name_suffix",
      "full_name",
      "middle_name",
      "prefix_length",
      "address"
    ],
    "explanation": "This semantic type identifies honorific prefixes used before personal names, such as MR, MRS., DR., and similar formal address designations. It is useful for parsing or normalizing name components, differentiating prefixes from given, middle, and family names, and from suffixes like JR. or III.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:23.590114"
  },
  {
    "resultType": "generated",
    "semanticType": "role",
    "description": "Professional role or occupation designation, typically a job title or position label such as Software Engineer, Director of Operations, or Registered Nurse. Captures the role a person holds within an organization or profession.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(chief|ceo|cfo|coo|cto|cio|officer|director|manager|supervisor|engineer|developer|designer|analyst|consultant|specialist|administrator|coordinator|technician|architect|scientist|nurse|teacher|professor|accountant|attorney|lawyer|executive|assistant|associate|advisor|editor|planner|inspector|operator|agent|auditor|recruiter|chef|pharmacist|physician|surgeon|dentist|cashier|barista|driver|pilot|mechanic|electrician|plumber|carpenter|bartender|waiter|waitress|intern)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4610,
    "headerPatterns": [
      {
        "regExp": "(?i).*position[_\\s-]*title.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "position_title"
        ],
        "negativeExamples": [
          "position_start_date"
        ]
      },
      {
        "regExp": "(?i).*(job|employee|staff)[_\\s-]*(title|role).*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "job_title"
        ],
        "negativeExamples": [
          "job_location"
        ]
      },
      {
        "regExp": "(?i).*(professional|occupation|career)[_\\s-]*(title|role).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "occupation_role"
        ],
        "negativeExamples": [
          "occupation_code"
        ]
      },
      {
        "regExp": "(?i).*\\b(pos|jt)\\b.*\\b(ttl|title|role)\\b.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "jt_ttl"
        ],
        "negativeExamples": [
          "jt_code"
        ]
      },
      {
        "regExp": "(?i).*\\brole\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "role"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Software Engineer",
      "Senior Product Manager",
      "Chief Financial Officer",
      "Registered Nurse",
      "Director of Operations",
      "UX Designer",
      "Data Scientist",
      "Marketing Coordinator"
    ],
    "negativeContentExamples": [
      "Employment Status",
      "Work Location",
      "Contract Type",
      "Department: Engineering",
      "Grade Level II",
      "Management",
      "Chiefs",
      "Engineering Team"
    ],
    "positiveHeaderExamples": [
      "position_title",
      "job_title",
      "employee_role",
      "professional_role",
      "occupation_title",
      "career_role",
      "role_title",
      "jt_ttl"
    ],
    "negativeHeaderExamples": [
      "position_start_date",
      "job_location",
      "employee_id",
      "occupation_code",
      "career_level",
      "role_count",
      "title_code",
      "staff_number"
    ],
    "explanation": "This semantic type identifies textual values that denote a person's professional role or occupation (job titles). It is useful for HR datasets, organizational charts, resumes, and applicant tracking systems where position titles need to be recognized and standardized. The pattern relies on common role keywords and avoids anchoring to remain flexible while using word boundaries to reduce false positives.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:24.032350"
  },
  {
    "resultType": "generated",
    "semanticType": "season",
    "description": "Business quarter identifier representing a three-month period within a fiscal or calendar year (e.g., Q1, Q3 FY24, 2021 Q4). Supports common tokens such as Q, QTR, QUARTER, FQ, and optional fiscal/calendar year modifiers (FY, FISCAL, CY) with 2\u20134 digit years.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b((FY|FISCAL|CY)\\s*\\d{2,4}\\s*(Q|QTR|QUARTER)\\s*(1|2|3|4)|(Q|QTR|QUARTER)\\s*(1|2|3|4)\\s*(FY|FISCAL|CY)\\s*\\d{2,4}|(Q|QTR)\\s*(1|2|3|4)|FQ\\s*(1|2|3|4)|(1st|2nd|3rd|4th)\\s*(quarter|qtr)|(quarter|qtr)\\s*(1|2|3|4)|\\d{4}\\s*(Q|QTR)\\s*(1|2|3|4))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4700,
    "headerPatterns": [
      {
        "regExp": "(?i).*(fiscal|fy|reporting).*(quarter|qtr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fiscal_quarter"
        ],
        "negativeExamples": [
          "calendar_month"
        ]
      },
      {
        "regExp": "(?i).*(business|financial|accounting).*(quarter|qtr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "business_quarter_num"
        ],
        "negativeExamples": [
          "reporting_qtr"
        ]
      },
      {
        "regExp": "(?i).*quarter_?(number|num|id).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "quarter_num"
        ],
        "negativeExamples": [
          "quarter_name"
        ]
      },
      {
        "regExp": "(?i).*(qtr|fq).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "qtr"
        ],
        "negativeExamples": [
          "fqdn"
        ]
      },
      {
        "regExp": "(?i).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "quarter"
        ],
        "negativeExamples": [
          "quartile"
        ]
      }
    ],
    "positiveContentExamples": [
      "Q1",
      "Q2 2024",
      "FY2023 Q3",
      "Q4 FY24",
      "2021 Q1",
      "Quarter 2",
      "3rd quarter",
      "QTR4"
    ],
    "negativeContentExamples": [
      "Q5",
      "FY2024",
      "Q 2023",
      "2nd half",
      "Quarter-13",
      "QTR 0",
      "Q4.1",
      "2024Q"
    ],
    "positiveHeaderExamples": [
      "fiscal_quarter",
      "reporting_qtr",
      "business_quarter_num",
      "accounting_quarter",
      "fy_quarter",
      "qtr",
      "fq",
      "quarter"
    ],
    "negativeHeaderExamples": [
      "quarter_start_date",
      "calendar_month",
      "semester",
      "half_year",
      "season_name",
      "qid",
      "quantity",
      "quartile"
    ],
    "explanation": "Identifies values representing business quarters, including compact forms (Q1\u2013Q4, QTR4), ordinal expressions (3rd quarter), and combinations with fiscal/calendar year markers such as FY24, FY2023, or CY2022 appearing before or after the quarter token. Useful for classifying reporting and time-period fields in financial and operational datasets where data is aggregated by quarter.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:26.366673"
  },
  {
    "resultType": "generated",
    "semanticType": "age",
    "description": "Numerical age in completed years since birth. Values are whole numbers expressed in years with no units or suffixes.",
    "pluginType": "regex",
    "regexPattern": "\\b(120|1[01][0-9]|[1-9]?[0-9])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4500,
    "headerPatterns": [
      {
        "regExp": "(?i).*age[_ ]years?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "age_years"
        ],
        "negativeExamples": [
          "age_months"
        ]
      },
      {
        "regExp": "(?i).*years?[_ ]old.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "years_old"
        ],
        "negativeExamples": [
          "year_of_birth"
        ]
      },
      {
        "regExp": "(?i).*years?[_ ]of[_ ]age.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "years_of_age"
        ],
        "negativeExamples": [
          "year_of_age"
        ]
      },
      {
        "regExp": "(?i).*(customer|patient|employee)[_ ]age.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_age"
        ],
        "negativeExamples": [
          "customer_total"
        ]
      },
      {
        "regExp": "(?i).*age[_ ]yrs.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "age_yrs"
        ],
        "negativeExamples": [
          "yrs_old"
        ]
      },
      {
        "regExp": "(?i).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "number"
        ],
        "negativeExamples": [
          "amount"
        ]
      }
    ],
    "positiveContentExamples": [
      "0",
      "7",
      "18",
      "21",
      "35",
      "64",
      "100",
      "120"
    ],
    "negativeContentExamples": [
      "age30",
      "30years",
      "17yrs",
      "20y",
      "05y",
      "x100y",
      "121y",
      "8months"
    ],
    "positiveHeaderExamples": [
      "age_years",
      "years_old",
      "years_of_age",
      "customer_age",
      "age_yrs",
      "patient_age",
      "number"
    ],
    "negativeHeaderExamples": [
      "age_months",
      "year_of_birth",
      "customer_total",
      "avg_age",
      "yrs_old",
      "age",
      "amount"
    ],
    "explanation": "This semantic type identifies human age as a whole number of completed years, suitable for demographics, patient records, and customer analytics. It matches integers only, without units or suffixes, and is tuned to realistic human ages to reduce false positives.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:36.181089"
  },
  {
    "resultType": "generated",
    "semanticType": "alias",
    "description": "An alternate personal or entity name (nickname, AKA, or preferred/alternative name) used in place of a legal or formal name. Typical values are short name-like strings containing 1\u20134 tokens of letters with optional spaces, hyphens, apostrophes, or periods, not full sentences.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Za-z][A-Za-z'.-]{0,28}[A-Za-z])([ -][A-Za-z][A-Za-z'.-]{0,28}[A-Za-z]){0,3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4580,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|person|user|party).*(alias|aka|also[ _-]known[ _-]as|alt[ _-]?name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_alias"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*(preferred[ _-]?name|nickname|screen[ _-]?name|display[ _-]?name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "preferred_name"
        ],
        "negativeExamples": [
          "legal_name"
        ]
      },
      {
        "regExp": "(?i).*(aka|also[ _-]known[ _-]as).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "aka"
        ],
        "negativeExamples": [
          "remarks"
        ]
      },
      {
        "regExp": "(?i).*(alias|alt[ _-]?name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "alias"
        ],
        "negativeExamples": [
          "alt_code"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Ace",
      "Johnny Blaze",
      "D'Angelo",
      "Mary-Jo",
      "The Hammer",
      "Shadow",
      "La Reina",
      "Night Wolf"
    ],
    "negativeContentExamples": [
      "Ace!",
      "John_Doe",
      "M4ry",
      "'Shadow",
      "Mary-Jo-",
      "J",
      "Jean\u2013Luc",
      "A."
    ],
    "positiveHeaderExamples": [
      "alias",
      "aka",
      "customer_alias",
      "person_alt_name",
      "preferred_name",
      "nickname",
      "also_known_as",
      "screen_name"
    ],
    "negativeHeaderExamples": [
      "customer_name",
      "legal_name",
      "full_name",
      "username",
      "description",
      "notes",
      "comment",
      "code"
    ],
    "explanation": "This semantic type identifies fields that store alternate names such as nicknames, AKAs, or preferred/alternative names for a person or entity. It focuses on short, name-like strings (1\u20134 tokens) comprised of letters with optional internal apostrophes, hyphens, or periods, avoiding digits and symbols, and is intended to distinguish alias-style names from generic free-text or full legal names.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:45.539955"
  },
  {
    "resultType": "generated",
    "semanticType": "tag",
    "description": "text_content: unrestricted narrative or descriptive text",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\\-]+(\\s+|[ ,;:!?()\\[\\]\"]+)[A-Za-z0-9][A-Za-z0-9'\\-]+(\\s+|[ ,;:!?()\\[\\]\"]+)[A-Za-z0-9][A-Za-z0-9'\\-]+",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4830,
    "headerPatterns": [
      {
        "regExp": "(?i).*text[_\\s]*content.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "content_type"
        ]
      },
      {
        "regExp": "(?i).*(long[_\\s]*description|full[_\\s]*description|detailed[_\\s]*description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "description_code"
        ]
      },
      {
        "regExp": "(?i).*(narrative|body[_\\s]*text|free[_\\s]*text).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "body_text"
        ],
        "negativeExamples": [
          "body_weight"
        ]
      },
      {
        "regExp": "(?i).*(desc|details|comment|comments).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "detail_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog near the old barn.",
      "Customer reported an intermittent issue with the power button after charging.",
      "This dataset includes quarterly revenue figures and explanatory notes for context.",
      "Please provide a detailed summary of the incident, including location and time.",
      "An elegant solution would simplify deployment, reduce risk, and improve maintainability.",
      "Employees must complete safety training before operating heavy equipment.",
      "During the meeting, stakeholders agreed to postpone the launch until October.",
      "Results indicate a significant improvement compared to last year's baseline."
    ],
    "negativeContentExamples": [
      "High priority",
      "Lorem-ipsum",
      "Pending review",
      "SKU-12345",
      "John Smith",
      "OK",
      "2024-07-15",
      "N/A"
    ],
    "positiveHeaderExamples": [
      "text_content",
      "long_description",
      "description",
      "body_text",
      "narrative",
      "free_text",
      "comments",
      "detailed_description"
    ],
    "negativeHeaderExamples": [
      "title",
      "summary_short",
      "category",
      "tag",
      "code",
      "name",
      "status",
      "url"
    ],
    "explanation": "Identifies columns containing free-form narrative or descriptive text, such as paragraphs, detailed descriptions, or comments. The regex favors entries with at least three word tokens and common punctuation or spacing, reducing matches to short labels or codes. Use this for fields like descriptions, narratives, or body text where the content is not constrained to a small vocabulary.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:45.563544"
  },
  {
    "resultType": "generated",
    "semanticType": "party",
    "description": "Unrestricted narrative or descriptive text content, typically multi-word free-form notes or descriptions. Intended to capture lengthy, human-authored narrative fields rather than short labels or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]*([.,;:!?])?(\\s+[A-Za-z0-9][A-Za-z0-9'-]*([.,;:!?])?){5,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4890,
    "headerPatterns": [
      {
        "regExp": "(?i).*party.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "party_description"
        ],
        "negativeExamples": [
          "customer_description"
        ]
      },
      {
        "regExp": "(?i).*party.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "party_notes"
        ],
        "negativeExamples": [
          "account_notes"
        ]
      },
      {
        "regExp": "(?i).*party.*(text|narrative|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "party_narrative"
        ],
        "negativeExamples": [
          "invoice_details"
        ]
      },
      {
        "regExp": "(?i).*(prty|pty|party).*(desc|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "pty_desc"
        ],
        "negativeExamples": [
          "cust_txt"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "The party contacted support to dispute specific charges on the last invoice.",
      "Notes indicate the party moved offices and requested updates to all mailing records.",
      "During onboarding, the party provided additional documents and clarified account ownership.",
      "The party reported intermittent service issues, asking for escalation by next week.",
      "Follow-up summary describes concerns about contract scope and renewal timelines.",
      "After verification, the party agreed to proceed and requested confirmation via email.",
      "The party confirmed delivery, mentioned minor damage to packaging, and asked for a replacement.",
      "Our records show the party changed primary contact details and authorized access for a delegate."
    ],
    "negativeContentExamples": [
      "Primary party",
      "Party: Acme Corp",
      "See attachment",
      "Updated 2024-07-01",
      "Pending approval",
      "Spoke with party today",
      "Left voicemail for party",
      "Invoice 123456"
    ],
    "positiveHeaderExamples": [
      "party_description",
      "party_notes",
      "party_text",
      "party_narrative",
      "party_details",
      "pty_desc",
      "prty_txt",
      "primary_party_description"
    ],
    "negativeHeaderExamples": [
      "customer_description",
      "account_notes",
      "invoice_details",
      "notes",
      "narrative",
      "party_id",
      "order_comment",
      "status_notes"
    ],
    "explanation": "This semantic type targets columns containing free-form narrative or descriptive text, such as notes or descriptions that are multi-word and sentence-like. It is intentionally broad but constrained to natural language sequences with multiple tokens to avoid matching short labels or identifiers.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:48.077263"
  },
  {
    "resultType": "generated",
    "semanticType": "route",
    "description": "Complete street name: a full English street designation that includes the street name and a terminal street type (e.g., Street, St, Avenue, Ave, Road, Rd). Supports optional leading house number and directional prefixes/suffixes using standard abbreviations.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(\\d{1,6}[A-Za-z]?\\s+)?((N|S|E|W|NE|NW|SE|SW)\\s+)?([A-Za-z0-9][A-Za-z0-9'-]{0,19})(\\s+([A-Za-z0-9][A-Za-z0-9'-]{0,19})){0,4}\\s+(Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Lane|Ln|Court|Ct|Place|Pl|Terrace|Ter|Drive|Dr|Way|Parkway|Pkwy|Circle|Cir|Square|Sq|Trail|Trl|Highway|Hwy)\\b(\\s+(N|S|E|W|NE|NW|SE|SW))?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 4680,
    "headerPatterns": [
      {
        "regExp": "(?i).*(complete|full).*street.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "complete_street_name"
        ],
        "negativeExamples": [
          "street_name"
        ]
      },
      {
        "regExp": "(?i).*(primary|official).*street.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "primary_street_name"
        ],
        "negativeExamples": [
          "full_street_name"
        ]
      },
      {
        "regExp": "(?i).*(street|road|avenue|blvd|rd|st|ave|hwy).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "road_name"
        ],
        "negativeExamples": [
          "street_number"
        ]
      },
      {
        "regExp": "(?i).*(street|road|avenue|blvd|rd|st|ave|hwy).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "street"
        ],
        "negativeExamples": [
          "address_line1"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "123 Main St",
      "221B Baker Street",
      "E 45th Street",
      "Old Mill Lane",
      "N Maple Ave",
      "O'Connell Court",
      "Pine Ridge Blvd",
      "King's Highway"
    ],
    "negativeContentExamples": [
      "123 Main",
      "Route 66",
      "Main St West",
      "45th",
      "Elm",
      "Main Street Apt 2B",
      "N Main",
      "Smith Rd, Bldg B"
    ],
    "positiveHeaderExamples": [
      "complete_street_name",
      "full_street_name",
      "street_name",
      "primary_street_name",
      "official_street_name",
      "road_name",
      "avenue_name",
      "full_road_name"
    ],
    "negativeHeaderExamples": [
      "address_line1",
      "street_number",
      "route_id",
      "city_name",
      "postal_code",
      "address",
      "street_type",
      "name_code"
    ],
    "explanation": "This semantic type identifies full English street names that include a terminal street type (e.g., Street, St, Avenue, Ave). It supports optional leading house numbers and directional prefixes/suffixes using common abbreviations, and allows multi-word, hyphenated, or apostrophized street names. Use it to recognize columns storing the full street designation rather than partial address components or identifiers.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:50.382810"
  },
  {
    "resultType": "generated",
    "semanticType": "abstract",
    "description": "text_content: unrestricted narrative or descriptive text. Represents free-form prose typically used as an abstract or narrative summary for a document, article, study, or project.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]{2,}\\b(\\s+[A-Za-z][A-Za-z'-]{2,}\\b){9,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4840,
    "headerPatterns": [
      {
        "regExp": "(?i).*(paper|article|manuscript|publication|grant|proposal|project|study)[ _-]+abstract.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "paper_abstract"
        ],
        "negativeExamples": [
          "paper_title"
        ]
      },
      {
        "regExp": "(?i).*(abstract|summary)[ _-]*(text|body|content).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abstract_text"
        ],
        "negativeExamples": [
          "summary_score"
        ]
      },
      {
        "regExp": "(?i).*(abs|abstr|summ)[ _-]*(txt|text|body|content).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abs_text"
        ],
        "negativeExamples": [
          "abbreviation"
        ]
      },
      {
        "regExp": "(?i).*abstract.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "abstract"
        ],
        "negativeExamples": [
          "overview"
        ]
      }
    ],
    "positiveContentExamples": [
      "This study investigates the relationship between urban heat islands and neighborhood tree canopy, presenting a comparative analysis across climates using satellite imagery, field measurements, and regression models to identify practical interventions for city planners.",
      "We present a scalable method for detecting anomalies in streaming sensor data, combining robust statistical features with lightweight deep learning to improve accuracy, reduce latency, and enable real time monitoring in resource constrained environments.",
      "The objective of this paper is to evaluate the effectiveness of peer mentoring programs in increasing retention among first year students, using a randomized design, mixed methods, and longitudinal outcomes to inform institutional policy.",
      "In this article, we explore how remote work reshapes collaboration, communication, and equity within distributed teams, drawing on surveys, interviews, and behavioral telemetry to propose practical guidelines for inclusive digital workplaces.",
      "Background: Marine heatwaves are increasing in frequency and intensity; here we quantify ecological impacts across regions and taxa, synthesize adaptation strategies, and outline priorities for monitoring, forecasting, and resilience planning.",
      "Using a mixed methods design, the project synthesizes qualitative interviews and administrative records to characterize barriers to service access, estimate program effects, and provide actionable recommendations for public agencies.",
      "We evaluate the impact of redesigned onboarding on developer productivity by tracking cycle time, code review throughput, and defect rates, and we report improvements alongside limitations, threats to validity, and implications for practice."
    ],
    "negativeContentExamples": [
      "Brief summary to be provided after review.",
      "See attached document for abstract.",
      "Short overview of methods and results forthcoming.",
      "Summary pending approval by editors.",
      "Draft text under preparation.",
      "Outline only, full abstract later.",
      "Placeholder description for testing."
    ],
    "positiveHeaderExamples": [
      "paper_abstract",
      "article_abstract",
      "publication_abstract",
      "abstract_text",
      "abstract_body",
      "abs_text",
      "manuscript_abstract",
      "project_abstract"
    ],
    "negativeHeaderExamples": [
      "paper_title",
      "article_body",
      "description_short",
      "introduction_text",
      "keywords",
      "notes",
      "manuscript_status",
      "content_type"
    ],
    "explanation": "This semantic type identifies long-form, free-text narrative content commonly used as an abstract or descriptive summary. The content regex requires at least ten word tokens of three or more letters, favoring prose while avoiding short or placeholder strings. Header patterns prioritize explicit abstract fields, then common text-body variants and abbreviations, ending with the primitive abstract term. High threshold and priority settings reduce conflicts with more specific types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:54.041320"
  },
  {
    "resultType": "generated",
    "semanticType": "max",
    "description": "Free-form narrative or descriptive text intended to capture unrestricted sentences or paragraphs, often multi-word and multi-sentence content such as comments, notes, descriptions, or story-like fields.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'\\-]*\\b([ \\t]+\\b[A-Za-z][A-Za-z'\\-]*\\b){5,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 4730,
    "headerPatterns": [
      {
        "regExp": "(?i).*text[_ ]*content.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "content_type"
        ]
      },
      {
        "regExp": "(?i).*(narrative|free)[_ ]*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*(desc|notes|cmts|memo).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "long_desc"
        ],
        "negativeExamples": [
          "short_name"
        ]
      },
      {
        "regExp": "(?i).*(description|details|commentary).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "detail_code"
        ]
      },
      {
        "regExp": "(?i).*(body|message|paragraph).*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "message_body"
        ],
        "negativeExamples": [
          "subject_line"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 88,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog again today.",
      "Please provide a detailed overview of the project scope and anticipated risks.",
      "Customer reported intermittent outages during peak hours and requested assistance.",
      "This policy describes coverage limitations, exclusions, and claim procedures.",
      "The article summarizes key findings, methodology, and suggestions for future research.",
      "Notes indicate that installation requires administrator privileges on Windows systems.",
      "In her memo, she thanked the team for their efforts and outlined next steps."
    ],
    "negativeContentExamples": [
      "Short summary pending review.",
      "Draft will follow.",
      "Address: 123 Main St.",
      "Approved yes.",
      "Error: invalid input parameter.",
      "John A Smith",
      "v2 release notes",
      "2024-07-10 system update"
    ],
    "positiveHeaderExamples": [
      "text_content",
      "narrative_text",
      "product_description",
      "long_desc",
      "customer_notes",
      "message_body",
      "article_paragraphs",
      "free_text"
    ],
    "negativeHeaderExamples": [
      "content_type",
      "field_length",
      "detail_code",
      "email_subject",
      "status_code",
      "first_name",
      "order_number",
      "record_id"
    ],
    "explanation": "This type identifies long-form, free-text narrative content by requiring at least six letter-starting word tokens, which favors sentences and paragraphs over short labels or codes. Header patterns progress from specific variants (text_content, narrative_text) through common abbreviations and synonyms to a primitive 'text' term, helping match diverse schema naming while avoiding over-broad value matching. The high threshold and lower precedence reduce collision with more specific semantic types.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:58.117462"
  },
  {
    "resultType": "generated",
    "semanticType": "event",
    "description": "Free-form event description text intended for narrative or descriptive content, typically multiple sentences or a long phrase. Designed to capture detailed explanations, agendas, and context about an event rather than short labels or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9 ,.'\";:()&/\\-%]{45,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4880,
    "headerPatterns": [
      {
        "regExp": "(?i).*event.*description.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "event_description"
        ],
        "negativeExamples": [
          "event_name"
        ]
      },
      {
        "regExp": "(?i).*(event|evt).*(details|summary|narrative).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "evt_narrative"
        ],
        "negativeExamples": [
          "event_date"
        ]
      },
      {
        "regExp": "(?i).*(event|evt).*(text|notes).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "event_text"
        ],
        "negativeExamples": [
          "meeting_notes"
        ]
      },
      {
        "regExp": "(?i).*(event|evt).*info.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "event_info"
        ],
        "negativeExamples": [
          "account_info"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "notes"
        ]
      }
    ],
    "positiveContentExamples": [
      "Join us for an evening of hands-on workshops, networking, and live demos from local makers.",
      "This community cleanup brings neighbors together; gloves and bags will be provided to all volunteers.",
      "A panel of researchers will discuss recent findings on urban mobility, followed by an open Q&A.",
      "Families are invited to enjoy crafts, storytelling, and snacks while touring the renovated museum galleries.",
      "Our guest speaker will share practical strategies for remote collaboration and time management.",
      "Attendees will rotate through lightning talks, then participate in small-group breakout discussions.",
      "Doors open at 6:30 pm; registration includes refreshments, printed materials, and post-event resources.",
      "The festival features local food vendors, live performances, children\u2019s activities, and guided walking tours."
    ],
    "negativeContentExamples": [
      "Annual general meeting of members",
      "Board meeting, room 204",
      "Workshop: Data Visualization Basics",
      "Community potluck and games",
      "Open house with tours",
      "Live jazz at the plaza tonight",
      "Webinar; details to follow",
      "Networking session after work"
    ],
    "positiveHeaderExamples": [
      "event_description",
      "event_details",
      "evt_summary",
      "event_narrative",
      "event_text",
      "event_notes",
      "event_info",
      "description"
    ],
    "negativeHeaderExamples": [
      "event_name",
      "event_title",
      "event_date",
      "evt_code",
      "meeting_notes",
      "account_info",
      "name",
      "text"
    ],
    "explanation": "This semantic type targets long-form narrative fields that describe an event\u2019s purpose, agenda, logistics, or context. It is suitable for columns containing multi-sentence descriptions or extended prose and helps distinguish descriptive content from short titles, codes, or single-word fields.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:59.386901"
  },
  {
    "resultType": "generated",
    "semanticType": "genus",
    "description": "Free-form narrative or descriptive text content intended for human reading, such as paragraphs, comments, notes, or detailed descriptions. This type captures longer, multi-word sentences rather than short labels or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-]*[,.;:!\\?]?(\\s+[A-Za-z][A-Za-z0-9'\u2019\\-]*[,.;:!\\?]?){9,}[A-Za-z0-9\\s'\u2019\\-.,\\(\\)/]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4670,
    "headerPatterns": [
      {
        "regExp": "(?i).*(text[_\\s]?content|content[_\\s]?text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "content_summary"
        ]
      },
      {
        "regExp": "(?i).*(long|full|detailed)[_\\s]?description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "short_description"
        ]
      },
      {
        "regExp": "(?i).*(narrative|free[_\\s]?text|body[_\\s]?text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "subject"
        ]
      },
      {
        "regExp": "(?i).*(notes|remarks|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "title"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "name"
        ]
      }
    ],
    "positiveContentExamples": [
      "The device features a compact design, offering improved battery life for everyday use.",
      "Customer reported intermittent connectivity issues; after reboot, performance returned to normal.",
      "This policy outlines the procedures for requesting access to data, including timelines and approvals.",
      "The painting depicts a serene landscape with rolling hills, a quiet river, and soft evening light.",
      "Please review the attached plan and provide feedback by Friday, focusing on scope, risks, and budget.",
      "During the trial period, users experienced faster load times and fewer errors compared to the baseline.",
      "Our mission is to deliver reliable services that scale globally while maintaining strong security practices.",
      "The committee concluded that additional research is needed to validate these results, especially for edge cases."
    ],
    "negativeContentExamples": [
      "Customer satisfaction improved Q4",
      "Payment processed successfully",
      "Title: Quarterly Results",
      "Error - invalid token",
      "12345 Main Street, Apt 2B",
      "See attachment for details",
      "Meeting notes - draft",
      "Lorem ipsum dolor sit amet"
    ],
    "positiveHeaderExamples": [
      "text_content",
      "long_description",
      "narrative_text",
      "detailed_notes",
      "comments",
      "free_text",
      "body_text",
      "text"
    ],
    "negativeHeaderExamples": [
      "content_summary",
      "short_description",
      "title",
      "subject",
      "code",
      "name",
      "id",
      "keywords"
    ],
    "explanation": "This semantic type identifies cells containing longer free-form narrative or descriptive text, such as comments, notes, or multi-sentence descriptions. It prefers entries with many words and allows typical prose punctuation. Use it to detect rich text fields where users write explanations or narratives rather than short labels, identifiers, or codes.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:56:59.875403"
  },
  {
    "resultType": "generated",
    "semanticType": "elevation",
    "description": "Elevation measurement values expressed as a numeric magnitude with an explicit unit (meters or feet), optionally signed to indicate below sea level. Typical formats include integers or decimals with optional thousands separators immediately followed by a unit token.\nThis type focuses on explicit elevation measurements with units and does not include generic text descriptions or unit-less values.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b[+-]?(\\d{1,3}(,\\d{3})+|\\d{1,6})(\\.\\d+)?\\s?(m|meter|metre|meters|metres|ft|feet)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4800,
    "headerPatterns": [
      {
        "regExp": "(?i).*(elevation|altitude).*(m|meter|metre|meters|metres|ft|feet).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "elevation_m"
        ],
        "negativeExamples": [
          "elevation_gain"
        ]
      },
      {
        "regExp": "(?i).*(ground|surface|terrain|peak|summit).*(elevation|altitude).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "ground_elevation"
        ],
        "negativeExamples": [
          "elevation_index"
        ]
      },
      {
        "regExp": "(?i).*\\b(elev|alt)\\b.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "elev_m"
        ],
        "negativeExamples": [
          "altimeter_reading"
        ]
      },
      {
        "regExp": "(?i).*(elevation|altitude).*(value|measure|level).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "elevation_level"
        ],
        "negativeExamples": [
          "sea_level_pressure"
        ]
      },
      {
        "regExp": "(?i).*elevation.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "elevation"
        ],
        "negativeExamples": [
          "height"
        ]
      }
    ],
    "positiveContentExamples": [
      "120 m",
      "1,200 m",
      "-50 m",
      "15.5 m",
      "3,280 ft",
      "100ft",
      "+12 meters",
      "45 metres"
    ],
    "negativeContentExamples": [
      "120",
      "elev 1000",
      "meters 500",
      "100 km",
      "100mm",
      "12-feet",
      "12 foot",
      "height 15"
    ],
    "positiveHeaderExamples": [
      "elevation_m",
      "elevation_ft",
      "ground_elevation",
      "peak_altitude_m",
      "terrain_elevation",
      "building_elevation_meters",
      "elev_m",
      "altitude_ft"
    ],
    "negativeHeaderExamples": [
      "height_m",
      "depth_m",
      "latitude",
      "longitude",
      "slope_grade",
      "z_coordinate",
      "sea_level_pressure",
      "altimeter_reading"
    ],
    "explanation": "This semantic type detects geospatial elevation values that are numeric and explicitly unit-qualified (meters or feet), including optional sign and decimal precision. It is suitable for columns that store height above or below sea level measurements, digital elevation models (DEM) outputs, or survey results. It intentionally excludes unit-less magnitudes, alternative distance units (e.g., km, cm, yd), and strings where the unit appears before the number.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:57:01.453336"
  },
  {
    "resultType": "generated",
    "semanticType": "series",
    "description": "Unrestricted narrative or descriptive text associated with a series, such as synopses, overviews, summaries, or notes. Intended for multi-sentence or multi-phrase freeform text rather than short labels or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9]{2,}\\b([ \\t,.;:!?-]+\\b[A-Za-z0-9]{2,}\\b){5,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4770,
    "headerPatterns": [
      {
        "regExp": "(?i).*series.*description.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "series_description"
        ],
        "negativeExamples": [
          "series_id"
        ]
      },
      {
        "regExp": "(?i).*series.*synopsis.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "series_synopsis"
        ],
        "negativeExamples": [
          "episode_synopsis"
        ]
      },
      {
        "regExp": "(?i).*series.*overview.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "series_overview"
        ],
        "negativeExamples": [
          "overview_date"
        ]
      },
      {
        "regExp": "(?i).*series.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "series"
        ],
        "negativeExamples": [
          "season"
        ]
      },
      {
        "regExp": "(?i).*ser.*text.*",
        "confidence": 91,
        "mandatory": true,
        "positiveExamples": [
          "ser_text"
        ],
        "negativeExamples": [
          "srv_total"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "The series explores themes of family and trust.",
      "This overview provides a detailed narrative with context.",
      "Detailed description of the series premise and characters.",
      "A long form synopsis outlining plot, setting, and tone.",
      "Narrative text capturing background, development, and reception.",
      "Comprehensive summary including key arcs, conflicts, and outcomes.",
      "Descriptive content used for catalog listings and discovery.",
      "Freeform notes describing production history and influences."
    ],
    "negativeContentExamples": [
      "Series overview pending.",
      "To be determined later.",
      "Great show!",
      "Season one.",
      "Action, drama, thriller.",
      "N/A",
      "See notes",
      "Brief summary for catalog only."
    ],
    "positiveHeaderExamples": [
      "series_description",
      "series_synopsis",
      "series_overview",
      "series_notes",
      "series_text",
      "series_content",
      "series_summary",
      "text"
    ],
    "negativeHeaderExamples": [
      "series_id",
      "series_number",
      "series_code",
      "series_title",
      "episode_description",
      "content_type",
      "description",
      "series_date"
    ],
    "explanation": "This semantic type targets freeform narrative text fields that describe a series, such as descriptions, synopses, and overviews. The value pattern requires at least six word tokens, promoting detection of substantive text while excluding short labels, codes, or terse phrases. Header patterns prioritize series-specific descriptive labels, fall back to category-level and abbreviation variants, and end with a primitive text signal to support flexible matching across schemas.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:57:02.909369"
  },
  {
    "resultType": "generated",
    "semanticType": "currency",
    "description": "English-language currency designation spelled out as a unit name, optionally preceded by a country or region modifier (e.g., \"United States dollar\", \"Euro\", \"Pound sterling\"). Values are textual currency names, not symbols or ISO codes.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Za-z]{2,}( [A-Za-z]{2,}){0,3} )?(dollar(s)?|euro(s)?|yen|pound(s)?( sterling)?|rupee(s)?|riyal|rial|franc(s)?|rand|peso(s)?|yuan|renminbi|won|lira|krona|krone|kronor|kroner|forint|zloty|real|ruble|rouble|dirham|ringgit|baht|dinar|kuna|shekel(s)?|shilling(s)?|colon|col\u00f3n|leu|lei|koruna|taka|dong|kyat|kip|quetzal|naira|tugrik|togrug|som|somoni|dram|ariary|ouguiya|kwanza|gourde|dalasi|lempira|balboa|birr|pula|cedi)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4780,
    "headerPatterns": [
      {
        "regExp": "(?i).*(billing|invoice|order|transaction).*currency.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "billing_currency_name"
        ],
        "negativeExamples": [
          "order_currency"
        ]
      },
      {
        "regExp": "(?i).*(billing|invoice|order|transaction).*currency.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_currency"
        ],
        "negativeExamples": [
          "currency_name"
        ]
      },
      {
        "regExp": "(?i).*(payment|settlement|fx|forex).*currency.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fx_currency"
        ],
        "negativeExamples": [
          "payment_method"
        ]
      },
      {
        "regExp": "(?i).*(ccy|curr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "settlement_ccy"
        ],
        "negativeExamples": [
          "exchange_rate"
        ]
      },
      {
        "regExp": "(?i).*currency.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "currency"
        ],
        "negativeExamples": [
          "unit_price"
        ]
      }
    ],
    "positiveContentExamples": [
      "United States dollar",
      "US dollar",
      "Euro",
      "British pound",
      "Pound sterling",
      "Japanese yen",
      "Canadian dollars",
      "Swiss franc"
    ],
    "negativeContentExamples": [
      "USD",
      "US$",
      "$",
      "Eurozone",
      "Canadian currency",
      "Hong Kong",
      "dollarization",
      "British"
    ],
    "positiveHeaderExamples": [
      "currency_name",
      "billing_currency_name",
      "order_currency",
      "transaction_currency",
      "settlement_ccy",
      "payment_curr",
      "fx_currency",
      "currency"
    ],
    "negativeHeaderExamples": [
      "currency_code",
      "iso_currency_code",
      "exchange_rate",
      "amount",
      "price_currency_code",
      "country",
      "locale",
      "unit_price"
    ],
    "explanation": "This semantic type detects spelled-out currency names in English, with optional country or region modifiers, such as \"United States dollar\", \"Euro\", or \"Pound sterling\". It is intended for columns that store the descriptive currency designation rather than symbols or standardized codes.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:57:04.938007"
  },
  {
    "resultType": "generated",
    "semanticType": "depth",
    "description": "Unrestricted narrative or descriptive free-text content typically composed of multiple words and sentences. Intended to capture bodies of text such as descriptions, summaries, narratives, and free-form comments.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}( [A-Za-z]{2,}){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4810,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|record|case)[_ ]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "description_product"
        ]
      },
      {
        "regExp": "(?i).*text[_ ]*content.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text_content"
        ],
        "negativeExamples": [
          "content_text_length"
        ]
      },
      {
        "regExp": "(?i).*narrative[_ ]*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "narrative_text"
        ],
        "negativeExamples": [
          "narrator_text"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "descriptor_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "body_text"
        ],
        "negativeExamples": [
          "notes"
        ]
      }
    ],
    "positiveContentExamples": [
      "The quick brown fox jumps over the lazy dog near the old barn.",
      "This policy outlines the steps required to submit a formal request for approval.",
      "Customer reported intermittent connectivity issues after the software update.",
      "Please provide a detailed summary of the findings and recommended next steps.",
      "Located on the northern ridge, the trail offers panoramic views of the valley.",
      "Our mission is to deliver reliable service while continuously improving our processes.",
      "The proposed design aims to reduce complexity while maintaining compatibility with existing systems."
    ],
    "negativeContentExamples": [
      "Pending review",
      "Update required",
      "See details",
      "Under review",
      "Draft only",
      "Confirmed",
      "Not applicable",
      "Approved"
    ],
    "positiveHeaderExamples": [
      "product_description",
      "text_content",
      "narrative_text",
      "long_description",
      "body_text",
      "summary_text",
      "item_description"
    ],
    "negativeHeaderExamples": [
      "content_type",
      "descriptor_id",
      "product_code",
      "record_status",
      "data_notes",
      "item_count",
      "case_number"
    ],
    "explanation": "This type identifies fields containing free-form narrative or descriptive text rather than structured codes or identifiers. The value regex requires at least three alphabetic words to distinguish substantive text from short labels or statuses, while header patterns prioritize typical names for descriptive text fields and back off to the primitive term 'text' to maximize recall with high threshold and low priority to reduce conflicts.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:57:10.523275"
  },
  {
    "resultType": "generated",
    "semanticType": "percentage",
    "description": "Values expressing a proportion as a percentage, represented by a number optionally with a decimal, followed by a percent sign or the words 'percent' or 'pct'. Typical examples include 45%, 12.5%, 0.5%, 23 percent, and 4 pct.",
    "pluginType": "regex",
    "regexPattern": "(\\b-?\\d+(\\.\\d+)?\\s*%(\\s|[^A-Za-z0-9])?)|(\\b-?\\d+(\\.\\d+)?\\s*(percent|pct)\\b)",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4860,
    "headerPatterns": [
      {
        "regExp": "(?i).*(discount|conversion|growth|change|tax|failure).*\\b(percent|percentage|pct)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "discount_percentage"
        ],
        "negativeExamples": [
          "discount_amount"
        ]
      },
      {
        "regExp": "(?i).*(\\bpercent\\b|\\bpercentage\\b|\\bpct\\b).*\\bof\\b.*(total|amount|revenue).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "percent_of_total"
        ],
        "negativeExamples": [
          "total_amount"
        ]
      },
      {
        "regExp": "(?i).*\\bpct\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "win_pct"
        ],
        "negativeExamples": [
          "pc_type"
        ]
      },
      {
        "regExp": "(?i).*\\b(percentage|percent)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "failure_percentage"
        ],
        "negativeExamples": [
          "ratio"
        ]
      },
      {
        "regExp": "(?i).*\\bpercent\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "percent"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "45%",
      "12.5%",
      "0.5%",
      "-3.2%",
      "23 percent",
      "4 pct",
      "7 %",
      "100%"
    ],
    "negativeContentExamples": [
      "45",
      "0.5",
      ".5%",
      "12 per cent",
      "100\u2030",
      "20pp",
      "%-5",
      "20 percentiles"
    ],
    "positiveHeaderExamples": [
      "discount_percentage",
      "conversion_percent",
      "growth_pct",
      "percent_of_total",
      "tax_rate_percent",
      "failure_percentage",
      "pct_complete",
      "percent_change"
    ],
    "negativeHeaderExamples": [
      "discount_amount",
      "average_ratio",
      "interest_rate",
      "total_count",
      "amount",
      "temperature_celsius",
      "category",
      "code"
    ],
    "explanation": "This semantic type identifies fields whose values are numeric percentages, denoted by a '%' symbol or the words 'percent' or 'pct'. It is useful for classifying columns such as discount rates, conversion rates, growth percentages, completion percentages, and similar proportional metrics.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:57:15.397128"
  },
  {
    "resultType": "generated",
    "semanticType": "author",
    "description": "Full name consisting of two parts (first and family name) separated by a single space, each starting with an uppercase letter followed by lowercase letters. Each part may include a single internal hyphen or apostrophe followed by another capitalized segment.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{1,30}([-'][A-Z][a-z]{1,30})? [A-Z][a-z]{1,30}([-'][A-Z][a-z]{1,30})?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4520,
    "headerPatterns": [
      {
        "regExp": "(?i).*(\\bauthor\\b).*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "author_full_name"
        ],
        "negativeExamples": [
          "customer_full_name"
        ]
      },
      {
        "regExp": "(?i).*(\\bauthor\\b).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "author_name"
        ],
        "negativeExamples": [
          "customer_name"
        ]
      },
      {
        "regExp": "(?i).*(\\bwriter\\b|\\bcreator\\b).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "writer_name"
        ],
        "negativeExamples": [
          "file_writer"
        ]
      },
      {
        "regExp": "(?i).*(\\bauthor\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "author"
        ],
        "negativeExamples": [
          "authorization_code"
        ]
      },
      {
        "regExp": "(?i).*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "title"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Anna-Marie O'Neil",
      "Jean-Luc Picard",
      "Mary O'Brien",
      "Peter-James Watson",
      "Alice Carter",
      "Liam O'Connor",
      "Chloe Smith-Jones"
    ],
    "negativeContentExamples": [
      "John",
      "JOHN DOE",
      "john Doe",
      "John  Doe",
      "John A. Doe",
      "Mary de Souza",
      "O'connor Liam",
      "Mary-Jane O"
    ],
    "positiveHeaderExamples": [
      "author_full_name",
      "author_name",
      "primary_author_name",
      "book_author_name",
      "lead_author_name",
      "writer_name",
      "author"
    ],
    "negativeHeaderExamples": [
      "customer_full_name",
      "customer_name",
      "authorization_name",
      "author_id",
      "author_code",
      "file_author",
      "reviewer_name",
      "title"
    ],
    "explanation": "This semantic type targets two-part personal names commonly used for authorship fields, requiring exactly one space between first and family names. It prefers well-formed, capitalized names and allows a single hyphen or apostrophe within each part while excluding middle initials, multi-word surnames with spaces, or all-uppercase entries.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:58:02.609979"
  },
  {
    "resultType": "generated",
    "semanticType": "width",
    "description": "Single-value width measurements expressed as a positive number followed by a unit token (e.g., px, pt, mm, cm, m, in, ft, yd). Supports optional space between the number and unit and optional decimal fractions or thousands separators; excludes ranges, composites, negatives, or unitless numbers.",
    "pluginType": "regex",
    "regexPattern": "\\b(([0-9]{1,3}(,[0-9]{3})+)|([0-9]+))(\\.[0-9]+)?\\s?(mm|millimeter|millimetre|cm|centimeter|centimetre|m|meter|metre|in|inch|inches|ft|foot|feet|yd|yard|yards|px|pt)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 92,
    "priority": 4870,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|image|photo|page|screen)[._ -]?width[._ -]?(px|pt|mm|cm|in|ft).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "image_width_px"
        ],
        "negativeExamples": [
          "product_height_cm"
        ]
      },
      {
        "regExp": "(?i).*((img|image|photo|pic)[._ -]?|product[._ -]?|page[._ -]?|screen[._ -]?)w(idth)?[._ -]?(px|pt|mm|cm|in|ft).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "img_w_px"
        ],
        "negativeExamples": [
          "screen_h_px"
        ]
      },
      {
        "regExp": "(?i).*(product|item|image|photo|page|screen).*width.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "product_width"
        ],
        "negativeExamples": [
          "image_height"
        ]
      },
      {
        "regExp": "(?i).*(pixel|px|pt|mm|cm|in|ft).*width.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "px_width"
        ],
        "negativeExamples": [
          "cm_height"
        ]
      },
      {
        "regExp": "(?i).*(img|image|photo|pic|pg|scr)[._ -]?(w|wd)\\b.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "img_w"
        ],
        "negativeExamples": [
          "img_h"
        ]
      },
      {
        "regExp": "(?i).*width.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "width"
        ],
        "negativeExamples": [
          "height"
        ]
      }
    ],
    "positiveContentExamples": [
      "1024 px",
      "800px",
      "12 in",
      "5.5 in",
      "30cm",
      "2.54 cm",
      "18 mm",
      "3 ft"
    ],
    "negativeContentExamples": [
      "1024",
      "12-15 in",
      "12 x 8 in",
      "-5 cm",
      "five cm",
      "3 m 20 cm",
      "1.2 inchs",
      "50 %"
    ],
    "positiveHeaderExamples": [
      "image_width_px",
      "product_width",
      "page_width_mm",
      "img_w_px",
      "screen_width",
      "photo_width_cm",
      "layout_width_pt",
      "chart_width_in"
    ],
    "negativeHeaderExamples": [
      "image_height_px",
      "product_length",
      "page_depth_mm",
      "img_h_px",
      "screen_size",
      "photo_resolution",
      "layout_margin_left",
      "chart_height_in"
    ],
    "explanation": "This semantic type targets columns that hold a single width measurement including an explicit unit. It is useful for classifying dimensions of images, pages, screens, products, and other objects where width is recorded with units. It intentionally excludes ranges, composite expressions (multiple units), negative values, and unitless numbers to avoid ambiguity.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:58:24.594654"
  },
  {
    "resultType": "generated",
    "semanticType": "definition",
    "description": "Free-form narrative text that explains, clarifies, or defines a concept, field, or term. Typically consists of multiple words or sentences providing context, scope, assumptions, and meaning.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]*\\b([ \\t,;:]+[A-Za-z0-9][A-Za-z0-9'-]*\\b){7,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 4590,
    "headerPatterns": [
      {
        "regExp": "(?i).*(term|product|field|policy|glossary).*definition.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "term_definition"
        ],
        "negativeExamples": [
          "product_title"
        ]
      },
      {
        "regExp": "(?i).*definition_(text|desc|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "field_definition_desc"
        ],
        "negativeExamples": [
          "definition_status"
        ]
      },
      {
        "regExp": "(?i).*(defn|def|meaning|expln|descr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "defn_text"
        ],
        "negativeExamples": [
          "attribute_name"
        ]
      },
      {
        "regExp": "(?i).*(description|details|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "field_description"
        ],
        "negativeExamples": [
          "glossary_term"
        ]
      },
      {
        "regExp": "(?i).*definition.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_definition"
        ],
        "negativeExamples": [
          "term_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "A software requirement describing the expected behavior of the system.",
      "The definition outlines key terms, constraints, and intended use cases.",
      "This field describes what the value represents within the dataset.",
      "A concise explanation clarifying scope, assumptions, and limitations.",
      "Detailed narrative providing context, rationale, and operational meaning.",
      "Use this description to interpret metrics and understand reporting logic.",
      "Defines the concept, lists exclusions, and states applicable conditions.",
      "Explains the term in plain language for non-technical readers."
    ],
    "negativeContentExamples": [
      "Expected behavior of system",
      "Brief description",
      "Definition: scope and purpose",
      "2024 update to the policy definition overview guide",
      "Term details and description",
      "Explained briefly",
      "Concept overview draft",
      "Meaning TBD"
    ],
    "positiveHeaderExamples": [
      "product_definition",
      "term_definition",
      "field_definition_desc",
      "policy_definition_text",
      "glossary_definition",
      "item_definition_details",
      "variable_definition",
      "concept_definition_text"
    ],
    "negativeHeaderExamples": [
      "product_title",
      "term_code",
      "data_type",
      "policy_id",
      "field_label",
      "attribute_name",
      "item_summary",
      "glossary_term"
    ],
    "explanation": "This semantic type identifies long-form, multi-word narrative text intended to define or explain concepts, fields, or terms. It is useful for locating descriptive fields that provide context, scope, constraints, and meaning rather than short labels or codes.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T18:58:52.475821"
  },
  {
    "resultType": "generated",
    "semanticType": "duration",
    "description": "Duration values representing an amount of time, expressed with units (e.g., seconds, minutes, hours, days), compact time formats (HH:MM or HH:MM:SS), or ISO 8601 duration notation (e.g., PnDTnH). This type targets elapsed or expected time intervals rather than specific timestamps or dates.",
    "pluginType": "regex",
    "regexPattern": "\\b(\\d{1,2}:\\d{2}(:\\d{2})?|\\d+\\s?(years?|yrs?|yr|y|months?|mos?|mo|mths?|weeks?|wks?|wk|w|days?|day|d|hours?|hrs?|hr|h|minutes?|mins?|min|m|seconds?|secs?|sec|s)(\\s+\\d+\\s?(years?|yrs?|yr|y|months?|mos?|mo|mths?|weeks?|wks?|wk|w|days?|day|d|hours?|hrs?|hr|h|minutes?|mins?|min|m|seconds?|secs?|sec|s))*|P(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 4550,
    "headerPatterns": [
      {
        "regExp": "(?i).*(trip|call|session|task|video|stay)[ _-]*duration.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "trip_duration_minutes"
        ],
        "negativeExamples": [
          "trip_date"
        ]
      },
      {
        "regExp": "(?i).*(elapsed|time[ _-]?spent|time[ _-]?taken|time[ _-]?to[ _-]?complete|processing[ _-]?time).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "elapsed_time"
        ],
        "negativeExamples": [
          "elapsed_date"
        ]
      },
      {
        "regExp": "(?i).*(playback[ _-]?duration|playback[ _-]?time|run[ _-]?time|runtime|length|video[ _-]?length).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "playback_duration_ms"
        ],
        "negativeExamples": [
          "video_title"
        ]
      },
      {
        "regExp": "(?i).*(avg[ _-]?dur|dur|len).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "avg_dur"
        ],
        "negativeExamples": [
          "avg_num"
        ]
      },
      {
        "regExp": "(?i).*duration.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "duration"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "1h 30m",
      "2 hours",
      "45 min",
      "00:05:30",
      "7:15",
      "P2DT3H",
      "PT45M",
      "3 days"
    ],
    "negativeContentExamples": [
      "1 hour 30",
      "7/15",
      "01-05-30",
      "two hours",
      "PTM",
      "P",
      "90",
      "H:30"
    ],
    "positiveHeaderExamples": [
      "trip_duration_minutes",
      "call_duration_sec",
      "session_duration",
      "elapsed_time",
      "time_spent_seconds",
      "length_minutes",
      "avg_task_duration",
      "playback_duration_ms"
    ],
    "negativeHeaderExamples": [
      "trip_date",
      "call_start_time",
      "session_id",
      "description",
      "country_code",
      "amount",
      "timezone",
      "file_name"
    ],
    "explanation": "PERIOD.DURATION identifies fields whose values express a span of time using unit-qualified numbers (e.g., 30s, 45 min, 2 hours, 3 days), clock-style durations (HH:MM or HH:MM:SS), or ISO 8601 duration strings (e.g., PT45M, P2DT3H). Use this type for elapsed time, processing time, playback length, or similar intervals, not for absolute timestamps or calendar dates.",
    "description_pattern": "P5",
    "generated_at": "2025-08-10T19:00:55.487254"
  }
]