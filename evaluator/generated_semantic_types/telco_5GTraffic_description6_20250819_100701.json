{
  "dataset": "telco_5GTraffic",
  "description_number": 6,
  "timestamp": "20250819_100701",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "Source",
      "description": "Network traffic source IP address identifier",
      "baseType": "String",
      "pluginType": "regex",
      "regexPattern": "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.0.0.2",
        "144.195.34.97",
        "10.215.173.1",
        "172.16.254.1",
        "203.0.113.45",
        "192.168.1.100",
        "10.0.0.1",
        "255.255.255.255"
      ],
      "negativeContentExamples": [
        "1.1.1",
        "None",
        "12.-1.0.2",
        "256.1.1.1",
        "192.168.1",
        "192.168.1.1.1",
        "localhost"
      ],
      "positiveHeaderExamples": [
        "Source_IP",
        "Src_IP_Address",
        "Source_Address",
        "Origin_IP",
        "Src_Addr",
        "Source_IP_Addr",
        "Source",
        "SRC_IP"
      ],
      "negativeHeaderExamples": [
        "Source_Port",
        "Origin_Hostname",
        "Destination_IP",
        "Target_Address",
        "Source_MAC",
        "Source_Domain",
        "Source_URL",
        "Source_Name"
      ],
      "confidenceThreshold": 92.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*source.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source_IP_Address"
          ],
          "negativeExamples": [
            "Destination_IP_Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*src.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Src_IP"
          ],
          "negativeExamples": [
            "Dst_IP"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*source.*addr.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source_Addr"
          ],
          "negativeExamples": [
            "Source_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*origin.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Origin_IP"
          ],
          "negativeExamples": [
            "Origin_Hostname"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*source.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source"
          ],
          "negativeExamples": [
            "Target"
          ],
          "rationale": null
        }
      ],
      "priority": 2540,
      "explanation": "This semantic type identifies IPv4 addresses that serve as source identifiers in network traffic data. It specifically targets columns containing the originating IP addresses in network logs, firewall records, or traffic analysis datasets. The type uses a standard IPv4 validation pattern and includes header patterns that recognize common naming conventions for source IP address fields in network monitoring and security systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "correlationId": "c7e93dcd-baff-4932-9ab4-009517dce79f"
    },
    {
      "resultType": "generated",
      "semanticType": "Destination",
      "description": "Network traffic destination IP address identifier",
      "baseType": "String",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.0.0.2",
        "144.195.34.97",
        "10.215.173.1",
        "172.16.254.1",
        "203.0.113.45",
        "8.8.8.8",
        "255.255.255.255",
        "0.0.0.0"
      ],
      "negativeContentExamples": [
        "1.1.1",
        "None",
        "12.-1.0.2",
        "256.1.1.1",
        "192.168.1",
        "10.0.0.256",
        "192.168.1.1.1",
        "localhost"
      ],
      "positiveHeaderExamples": [
        "Destination_IP",
        "Dst_IP_Address",
        "Target_IP",
        "Dest_Address",
        "Destination_Addr",
        "Remote_IP",
        "To_IP",
        "End_IP"
      ],
      "negativeHeaderExamples": [
        "Destination_Port",
        "Destination_Hostname",
        "Source_IP",
        "Origin_IP",
        "Local_IP",
        "From_IP",
        "Src_Address",
        "Start_IP"
      ],
      "confidenceThreshold": 92.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*destination.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Destination_IP_Address"
          ],
          "negativeExamples": [
            "Source_IP_Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dest.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Dest_IP"
          ],
          "negativeExamples": [
            "Dest_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dst.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Dst_IP_Addr"
          ],
          "negativeExamples": [
            "Src_IP_Addr"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*target.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Target_IP"
          ],
          "negativeExamples": [
            "Target_Host"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*destination.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Destination"
          ],
          "negativeExamples": [
            "Source"
          ],
          "rationale": null
        }
      ],
      "priority": 2550,
      "explanation": "This semantic type identifies IPv4 addresses that serve as network traffic destinations. It is specifically designed to recognize destination IP addresses in network logs, firewall rules, and traffic analysis data. The type validates proper IPv4 format (four octets with values 0-255) while being contextually aware through header pattern matching that focuses on destination-related terminology. This helps distinguish destination IPs from source IPs or other network identifiers in datasets containing multiple IP address columns.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "correlationId": "f88ad37c-a49d-4bd3-beb0-840a7e9f53a6"
    },
    {
      "resultType": "generated",
      "semanticType": "Protocol",
      "description": "Network communication protocol identifiers used for data transmission",
      "baseType": "String",
      "pluginType": "list",
      "regexPattern": null,
      "listValues": [
        "TCP",
        "UDP",
        "HTTP",
        "HTTPS",
        "FTP",
        "SFTP",
        "SSH",
        "DNS",
        "DHCP",
        "SMTP",
        "POP3",
        "IMAP",
        "SNMP",
        "ICMP",
        "ARP",
        "OSPF",
        "BGP",
        "RIP",
        "WIREGUARD",
        "OPENVPN",
        "IPSEC",
        "TLS",
        "SSL",
        "NTP",
        "LDAP"
      ],
      "backout": "^[A-Z][A-Z0-9]{1,9}$",
      "positiveContentExamples": [
        "TCP",
        "UDP",
        "HTTP",
        "HTTPS",
        "DNS",
        "SMTP",
        "SSH",
        "WIREGUARD"
      ],
      "negativeContentExamples": [
        "All",
        "None",
        "Unknown",
        "1",
        "80",
        "localhost",
        "192.168.1.1",
        "Mixed"
      ],
      "positiveHeaderExamples": [
        "Protocol_Type",
        "Network_Protocol",
        "Communication_Protocol",
        "Protocol",
        "Proto",
        "Transmission_Protocol",
        "Connection_Protocol",
        "Protocol_Name"
      ],
      "negativeHeaderExamples": [
        "Service_Name",
        "Port_Number",
        "Protocol_Version",
        "Server_Name",
        "Connection_Status",
        "Network_Interface",
        "IP_Address",
        "Host_Name"
      ],
      "confidenceThreshold": 92.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*network.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Network_Protocol"
          ],
          "negativeExamples": [
            "Network_Interface"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*communication.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Communication_Protocol"
          ],
          "negativeExamples": [
            "Communication_Method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transmission.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transmission_Protocol"
          ],
          "negativeExamples": [
            "Transmission_Rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*protocol.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Protocol_Type"
          ],
          "negativeExamples": [
            "Protocol_Version"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*proto.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Proto"
          ],
          "negativeExamples": [
            "Prototype"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Protocol"
          ],
          "negativeExamples": [
            "Procedure"
          ],
          "rationale": null
        }
      ],
      "priority": 2560,
      "explanation": "This semantic type identifies network communication protocol names used in data transmission. It covers standard protocols like TCP, UDP, HTTP, DNS, and specialized protocols like WireGuard. The type uses a finite list approach since network protocols are well-defined standards with known names. It excludes generic terms like \"All\" or \"None\" and numeric values that might represent port numbers or protocol IDs rather than protocol names.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "correlationId": "b49b2aa7-7403-4099-8d05-d6552952214b"
    },
    {
      "resultType": "generated",
      "semanticType": "Length",
      "description": "Network packet size measurement in bytes for data transmission length",
      "baseType": "Long",
      "pluginType": "regex",
      "regexPattern": "[1-9][0-9]{0,4}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "50",
        "1563",
        "64",
        "1500",
        "576",
        "9000",
        "65535"
      ],
      "negativeContentExamples": [
        "-1",
        "1.5",
        "0",
        "100000",
        "abc",
        "-50",
        "1.0",
        "2.5"
      ],
      "positiveHeaderExamples": [
        "Packet_Length",
        "Length_Bytes",
        "Frame_Size",
        "Data_Length",
        "Message_Size",
        "Payload_Length",
        "Transmission_Size",
        "Packet_Size_Bytes"
      ],
      "negativeHeaderExamples": [
        "Duration",
        "Payload_Size",
        "Timestamp",
        "Protocol",
        "Source_Port",
        "Destination_IP",
        "Packet_Count",
        "Bandwidth"
      ],
      "confidenceThreshold": 92.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*packet.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Packet_Length"
          ],
          "negativeExamples": [
            "Packet_Count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*frame.*size.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Frame_Size"
          ],
          "negativeExamples": [
            "Frame_Rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*data.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Data_Length"
          ],
          "negativeExamples": [
            "Data_Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*bytes.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Length_Bytes"
          ],
          "negativeExamples": [
            "Length_Seconds"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*size.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Size"
          ],
          "negativeExamples": [
            "Duration"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Length"
          ],
          "negativeExamples": [
            "Width"
          ],
          "rationale": null
        }
      ],
      "priority": 2570,
      "explanation": "This semantic type identifies network packet length measurements in bytes. It matches positive integers typically ranging from 1 to 65535 bytes, which represents the standard range for network packet sizes. The pattern excludes zero, negative numbers, and decimal values as these are not valid packet lengths. This type is commonly found in network monitoring data, packet capture files, and telecommunications datasets where data transmission measurements are recorded.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "correlationId": "a48b40d2-602a-4fa3-bd01-5430f325b86e"
    }
  ]
}