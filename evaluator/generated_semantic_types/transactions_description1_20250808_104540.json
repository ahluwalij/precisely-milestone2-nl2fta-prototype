{
  "dataset": "fintech_bank_transaction",
  "description_number": 1,
  "timestamp": "20250808_105504",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "TransactionID",
      "description": "A unique transaction identifier that enables tracking and referencing of individual financial transactions across banking systems",
      "pluginType": "regex",
      "regexPattern": "[A-Za-z0-9]{8,32}|[A-Za-z]{2,4}[0-9]{6,20}|[0-9]{10,20}|[A-Fa-f0-9]{16,64}|[A-Za-z0-9\\-]{12,40}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "TXN1234567890123456",
        "AB123456789012",
        "9876543210987654",
        "TX-2024-001234567",
        "ABCD1234567890EFGH",
        "1234567890123456789",
        "A1B2C3D4E5F6G7H8",
        "TRN20240315001234"
      ],
      "negativeContentExamples": [
        "TX123",
        "ABCDEFG",
        "12345",
        "TXN-",
        "A1B2C3",
        "ABC-DEF-GHI"
      ],
      "positiveHeaderExamples": [
        "transaction_id",
        "trans_id",
        "txn_id",
        "transaction_reference",
        "txn_ref",
        "transaction_number",
        "trans_ref_id",
        "banking_transaction_id"
      ],
      "negativeHeaderExamples": [
        "customer_id",
        "account_id",
        "user_id",
        "order_id",
        "payment_id",
        "invoice_id",
        "product_id",
        "session_id"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_id"
          ],
          "negativeExamples": [
            "customer_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*trans.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "trans_id"
          ],
          "negativeExamples": [
            "account_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_id"
          ],
          "negativeExamples": [
            "user_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transaction.*ref.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_ref"
          ],
          "negativeExamples": [
            "payment_ref"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*ref.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_ref"
          ],
          "negativeExamples": [
            "order_ref"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "id"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 4630,
      "explanation": "This semantic type identifies unique transaction identifiers used in financial and banking systems. Transaction IDs are typically alphanumeric strings of varying lengths (8-32 characters) that may include prefixes, suffixes, or specific formatting patterns. They serve as primary keys for tracking individual financial transactions across different systems and are essential for audit trails, reconciliation, and customer service. The pattern accommodates various formats including pure numeric IDs, alphanumeric combinations with prefixes, hexadecimal strings, and hyphenated formats commonly used by different financial institutions and payment processors.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:46:18.593183"
    },
    {
      "resultType": "generated",
      "semanticType": "AccountID",
      "description": "A bank account identifier that uniquely represents a customer's financial account within the banking institution",
      "pluginType": "regex",
      "regexPattern": "[A-Z0-9]{8,34}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "12345678901234567890",
        "ACC1234567890",
        "BA987654321098765432",
        "1234567890123456",
        "ACCT5678901234",
        "9876543210987654",
        "BA123456789012345678",
        "ACC9988776655443322"
      ],
      "negativeContentExamples": [
        "1234567",
        "ACC-123-456",
        "12345678901234567890123456789012345",
        "account123",
        "BA 123456789",
        "123.456.789",
        "ACC_123_456_789",
        "12345@bank.com"
      ],
      "positiveHeaderExamples": [
        "bank_account_number",
        "account_number",
        "acct_num",
        "bank_account_id",
        "customer_account_number",
        "account_identifier",
        "banking_account_num",
        "primary_account_number"
      ],
      "negativeHeaderExamples": [
        "routing_number",
        "credit_card_number",
        "customer_id",
        "transaction_id",
        "branch_code",
        "swift_code",
        "iban",
        "sort_code"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*bank.*account.*number.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "bank_account_number"
          ],
          "negativeExamples": [
            "bank_routing_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*account.*number.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "account_number"
          ],
          "negativeExamples": [
            "credit_card_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*bank.*account.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "bank_account"
          ],
          "negativeExamples": [
            "bank_branch"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*acct.*num.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "acct_num"
          ],
          "negativeExamples": [
            "cust_num"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*account.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "account"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*number.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "number"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 4640,
      "explanation": "This semantic type identifies bank account numbers, which are alphanumeric identifiers used by financial institutions to uniquely identify customer accounts. Bank account numbers typically range from 8 to 34 characters and consist of uppercase letters and digits. They are distinct from other financial identifiers like routing numbers, credit card numbers, or international banking codes. This type is commonly found in financial datasets, transaction records, and customer banking information systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:46:50.132722"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionAmount",
      "description": "The monetary value involved in a financial transaction, representing the amount being transferred, debited, or credited.",
      "pluginType": "regex",
      "regexPattern": "(?:\\$|USD|EUR|GBP|CAD|AUD|JPY|CHF|CNY|INR|BRL|MXN|ZAR|SEK|NOK|DKK|PLN|CZK|HUF|RUB|TRY|KRW|SGD|HKD|NZD|THB|MYR|PHP|IDR|VND|EGP|AED|SAR|QAR|KWD|BHD|OMR|JOD|LBP|ILS|RON|BGN|HRK|RSD|BAM|MKD|ALL|\u20ac|\u00a3|\u00a5|\u20b9|\u20bd|\u20a9|\u20aa|\u20a6|\u20a8|\u20a1|\u20b5|\u20b4|\u20b8|\u20ba|\u20bc|\u20be|\u00a2|\uff04)\\s*[\\d,]+(?:\\.\\d{1,4})?|[\\d,]+(?:\\.\\d{1,4})?\\s*(?:\\$|USD|EUR|GBP|CAD|AUD|JPY|CHF|CNY|INR|BRL|MXN|ZAR|SEK|NOK|DKK|PLN|CZK|HUF|RUB|TRY|KRW|SGD|HKD|NZD|THB|MYR|PHP|IDR|VND|EGP|AED|SAR|QAR|KWD|BHD|OMR|JOD|LBP|ILS|RON|BGN|HRK|RSD|BAM|MKD|ALL|\u20ac|\u00a3|\u00a5|\u20b9|\u20bd|\u20a9|\u20aa|\u20a6|\u20a8|\u20a1|\u20b5|\u20b4|\u20b8|\u20ba|\u20bc|\u20be|\u00a2|\uff04)|[\\d,]+\\.\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "$1,234.56",
        "\u20ac999.99",
        "\u00a350.00",
        "1500.75 USD",
        "\u00a510,000",
        "\u20b92,500.50",
        "$0.99",
        "25,000.00"
      ],
      "negativeContentExamples": [
        "ABC123",
        "2023-12-01",
        "john.doe@email.com",
        "555-1234",
        "New York",
        "Processing",
        "Credit Card",
        "Monthly"
      ],
      "positiveHeaderExamples": [
        "transaction_amount",
        "payment_value",
        "total_amount",
        "charge_amt",
        "financial_sum",
        "monetary_value",
        "bill_amount",
        "invoice_total"
      ],
      "negativeHeaderExamples": [
        "transaction_id",
        "payment_date",
        "customer_name",
        "account_number",
        "currency_code",
        "payment_method",
        "transaction_status",
        "merchant_name"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_amount"
          ],
          "negativeExamples": [
            "transaction_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_amount"
          ],
          "negativeExamples": [
            "payment_method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*financial.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "financial_value"
          ],
          "negativeExamples": [
            "financial_institution"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(amt|val|sum|total).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "amt"
          ],
          "negativeExamples": [
            "quantity"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "amount"
          ],
          "negativeExamples": [
            "discount"
          ],
          "rationale": null
        }
      ],
      "priority": 4650,
      "explanation": "This semantic type identifies monetary amounts in financial transactions. It recognizes various currency formats including symbols ($ \u20ac \u00a3 \u00a5), currency codes (USD EUR GBP), and numeric values with appropriate decimal precision. The pattern handles common formatting like thousands separators and supports both prefix and suffix currency notation. This is essential for financial data analysis, accounting systems, and transaction processing where accurate identification of monetary values is critical for calculations, reporting, and compliance.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:47:29.616700"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionDate",
      "description": "The date and time when a financial transaction occurred, used for chronological tracking and reporting purposes in financial systems",
      "pluginType": "regex",
      "regexPattern": "(?i)(?:\\d{4}[-/]\\d{1,2}[-/]\\d{1,2}[\\sT]\\d{1,2}:\\d{2}(?::\\d{2})?(?:\\.\\d{3})?(?:[+-]\\d{2}:?\\d{2}|Z)?|\\d{1,2}[-/]\\d{1,2}[-/]\\d{4}[\\sT]\\d{1,2}:\\d{2}(?::\\d{2})?(?:\\s?[AP]M)?|\\d{2}-[A-Z]{3}-\\d{4}\\s\\d{1,2}:\\d{2}(?::\\d{2})?|\\d{1,2}\\s[A-Z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}(?::\\d{2})?(?:\\s?[AP]M)?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2024-01-15 14:30:25",
        "2023-12-31T23:59:59.999Z",
        "01/15/2024 2:30:25 PM",
        "2024-01-15T14:30:25+05:30",
        "15-JAN-2024 14:30:25",
        "15 Jan 2024 2:30 PM",
        "2024/01/15 14:30:25.123",
        "12/31/2023 11:59:59 PM"
      ],
      "negativeContentExamples": [
        "2024-01-15",
        "14:30:25",
        "January 15, 2024",
        "1642248625",
        "15/01/24",
        "Q1 2024",
        "2024"
      ],
      "positiveHeaderExamples": [
        "transaction_datetime",
        "payment_timestamp",
        "txn_date_time",
        "financial_datetime",
        "trade_timestamp",
        "settlement_datetime",
        "processing_datetime",
        "execution_timestamp"
      ],
      "negativeHeaderExamples": [
        "transaction_date",
        "payment_time",
        "transaction_id",
        "payment_amount",
        "account_number",
        "customer_name",
        "transaction_type",
        "currency_code"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*date.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_date_time"
          ],
          "negativeExamples": [
            "transaction_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_datetime"
          ],
          "negativeExamples": [
            "txn_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_timestamp"
          ],
          "negativeExamples": [
            "payment_method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*financial.*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "financial_datetime"
          ],
          "negativeExamples": [
            "financial_status"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "timestamp"
          ],
          "negativeExamples": [
            "username"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "datetime"
          ],
          "negativeExamples": [
            "date"
          ],
          "rationale": null
        }
      ],
      "priority": 4660,
      "explanation": "This semantic type identifies datetime values specifically used in financial transaction contexts. It captures the precise moment when financial transactions occur, including payments, trades, settlements, and other monetary operations. The pattern recognizes various datetime formats commonly used in financial systems, including ISO 8601 formats, US formats with AM/PM indicators, and formats with timezone information. This is crucial for financial audit trails, transaction sequencing, regulatory reporting, and temporal analysis of financial data. The type distinguishes itself from general datetime fields by focusing on transaction-specific contexts and financial system requirements.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:48:04.165691"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionType",
      "description": "The classification of a transaction indicating whether funds are being added to or removed from an account",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "CREDIT",
        "DEBIT",
        "CREDIT",
        "DEBIT",
        "CR",
        "DR",
        "IN",
        "OUT",
        "INBOUND",
        "OUTBOUND",
        "DEPOSIT",
        "WITHDRAWAL",
        "ADD",
        "REMOVE",
        "PLUS",
        "MINUS",
        "INCOMING",
        "OUTGOING",
        "RECEIVE",
        "SEND"
      ],
      "backout": "(?i).*(credit|debit|cr|dr|in|out|deposit|withdrawal|incoming|outgoing|inbound|outbound|add|remove|plus|minus|receive|send).*",
      "positiveContentExamples": [
        "Credit",
        "Debit",
        "CR",
        "DR",
        "In",
        "Out",
        "Deposit",
        "Withdrawal"
      ],
      "negativeContentExamples": [
        "Pending",
        "Completed",
        "Failed",
        "Processing",
        "Approved",
        "Declined",
        "Transfer",
        "Payment"
      ],
      "positiveHeaderExamples": [
        "transaction_direction",
        "debit_credit_indicator",
        "txn_type",
        "dr_cr_flag",
        "flow_direction",
        "movement_type",
        "cash_flow_dir",
        "account_direction"
      ],
      "negativeHeaderExamples": [
        "transaction_amount",
        "transaction_date",
        "account_balance",
        "payment_method",
        "transaction_status",
        "reference_number",
        "merchant_name",
        "currency_code"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*(direction|type|flow).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_direction"
          ],
          "negativeExamples": [
            "transaction_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(debit|credit).*(type|indicator).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "debit_credit_indicator"
          ],
          "negativeExamples": [
            "credit_card_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(txn|trans).*(dir|direction|type).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_direction"
          ],
          "negativeExamples": [
            "txn_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(flow|movement).*(direction|type).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cash_flow_direction"
          ],
          "negativeExamples": [
            "workflow_status"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(dr|cr).*(ind|indicator|flag).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dr_cr_indicator"
          ],
          "negativeExamples": [
            "error_indicator"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(direction|type).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "direction"
          ],
          "negativeExamples": [
            "description"
          ],
          "rationale": null
        }
      ],
      "priority": 4670,
      "explanation": "This semantic type identifies transaction direction indicators that classify whether a financial transaction represents funds flowing into an account (credit, deposit, inbound) or out of an account (debit, withdrawal, outbound). It's commonly used in banking systems, accounting software, and financial reporting to categorize the nature of monetary movements. The type recognizes both formal accounting terminology (Credit/Debit, CR/DR) and more colloquial terms (In/Out, Add/Remove) that might be used in different financial systems or user interfaces.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:48:42.521134"
    },
    {
      "resultType": "generated",
      "semanticType": "Location",
      "description": "The geographic location where a financial transaction was initiated or processed, typically represented as a city name",
      "pluginType": "regex",
      "regexPattern": "[A-Za-z](?:[A-Za-z\\s\\-\\.']{1,48}[A-Za-z])?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "New York",
        "Los Angeles",
        "Chicago",
        "San Francisco",
        "Miami",
        "Boston",
        "Seattle",
        "Atlanta"
      ],
      "negativeContentExamples": [
        "NY",
        "CA",
        "10001",
        "123 Main St",
        "12345"
      ],
      "positiveHeaderExamples": [
        "transaction_city",
        "payment_city",
        "merchant_city",
        "billing_city",
        "txn_city",
        "purchase_city",
        "origin_city",
        "city"
      ],
      "negativeHeaderExamples": [
        "transaction_state",
        "payment_country",
        "merchant_zip",
        "billing_address",
        "txn_amount",
        "purchase_date",
        "origin_country",
        "postal_code"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*city.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_city"
          ],
          "negativeExamples": [
            "transaction_country"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*city.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_city"
          ],
          "negativeExamples": [
            "payment_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(txn|trans).*city.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_city"
          ],
          "negativeExamples": [
            "txn_state"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*city.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "merchant_city"
          ],
          "negativeExamples": [
            "merchant_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(purchase|billing).*city.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "billing_city"
          ],
          "negativeExamples": [
            "billing_zip"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*city.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "city"
          ],
          "negativeExamples": [
            "state"
          ],
          "rationale": null
        }
      ],
      "priority": 4680,
      "explanation": "This semantic type identifies city names specifically in the context of financial transactions. It captures the geographic location where transactions are initiated or processed, which is crucial for fraud detection, geographic analysis of spending patterns, and regulatory compliance. The pattern allows for standard city name formats including spaces, hyphens, apostrophes, and periods while excluding obvious non-city values like state codes, postal codes, or country names. This type is particularly useful in payment processing systems, banking applications, and financial analytics platforms where understanding the geographic distribution of transactions is important.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:49:28.435702"
    },
    {
      "resultType": "generated",
      "semanticType": "DeviceID",
      "description": "A unique identifier for the electronic device used to initiate or authorize a financial transaction",
      "pluginType": "regex",
      "regexPattern": "[A-Fa-f0-9]{8,64}|[A-Za-z0-9_-]{10,50}|[A-Za-z0-9]{16,32}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "A1B2C3D4E5F6G7H8",
        "DEV_12345_ABCDEF",
        "mobile-device-789abc123def",
        "1234567890ABCDEF1234567890ABCDEF",
        "POS_TERMINAL_98765",
        "hw_id_2F4A8B9C1E3D",
        "device123456789012",
        "TERM-ABC-123-XYZ-789"
      ],
      "negativeContentExamples": [
        "12345",
        "ABC",
        "user@email.com",
        "192.168.1.1",
        "+1-555-123-4567",
        "VISA",
        "John Smith"
      ],
      "positiveHeaderExamples": [
        "device_id",
        "terminal_identifier",
        "mobile_device_id",
        "pos_device_identifier",
        "hardware_id",
        "device_serial_number",
        "payment_terminal_id",
        "transaction_device_id"
      ],
      "negativeHeaderExamples": [
        "user_id",
        "transaction_id",
        "account_number",
        "customer_id",
        "merchant_id",
        "session_id",
        "order_id",
        "payment_id"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*device.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "device_id"
          ],
          "negativeExamples": [
            "user_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*terminal.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "terminal_id"
          ],
          "negativeExamples": [
            "transaction_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*mobile.*device.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "mobile_device_identifier"
          ],
          "negativeExamples": [
            "mobile_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*pos.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "pos_device_id"
          ],
          "negativeExamples": [
            "pos_transaction_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*hardware.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "hardware_id"
          ],
          "negativeExamples": [
            "software_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*identifier.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "identifier"
          ],
          "negativeExamples": [
            "description"
          ],
          "rationale": null
        }
      ],
      "priority": 4690,
      "explanation": "This semantic type identifies unique device identifiers used in financial transactions. These identifiers are typically alphanumeric strings of varying lengths that uniquely identify electronic devices such as POS terminals, mobile devices, ATMs, or other payment processing hardware. The pattern accommodates various formats including hexadecimal strings, alphanumeric codes with separators, and structured identifiers commonly used in payment processing systems. This type is crucial for transaction tracking, fraud detection, and device management in financial systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:50:01.563997"
    },
    {
      "resultType": "generated",
      "semanticType": "IP Address",
      "description": "The internet protocol address of the network connection used during a financial transaction, enabling digital forensics and security analysis.",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?::[0-9a-fA-F]{1,4}){1,6}|:(?::[0-9a-fA-F]{1,4}){1,7}|::(?:[0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.168.1.100",
        "10.0.0.1",
        "172.16.254.1",
        "203.0.113.45",
        "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
        "2001:db8::1",
        "::1"
      ],
      "negativeContentExamples": [
        "256.1.1.1",
        "192.168.1",
        "192.168.1.1.1",
        "192.168.1.300",
        "gggg::1",
        "2001:0db8:85a3::8a2e::7334",
        "192.168.1.1:8080",
        "localhost"
      ],
      "positiveHeaderExamples": [
        "transaction_ip_address",
        "payment_source_ip",
        "client_ip",
        "txn_origin_ip",
        "user_ip_addr",
        "source_ip",
        "remote_ip",
        "customer_ip"
      ],
      "negativeHeaderExamples": [
        "server_ip",
        "gateway_ip",
        "dns_ip",
        "proxy_ip",
        "load_balancer_ip",
        "internal_ip",
        "admin_ip",
        "monitoring_ip"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_ip_address"
          ],
          "negativeExamples": [
            "server_ip_address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_ip"
          ],
          "negativeExamples": [
            "payment_method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_ip"
          ],
          "negativeExamples": [
            "txn_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*client.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "client_ip"
          ],
          "negativeExamples": [
            "client_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*origin.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "origin_ip"
          ],
          "negativeExamples": [
            "origin_country"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "ip"
          ],
          "negativeExamples": [
            "zip"
          ],
          "rationale": null
        }
      ],
      "priority": 4700,
      "explanation": "This semantic type identifies IP addresses specifically associated with financial transactions, distinguishing them from general network infrastructure IP addresses. It captures both IPv4 and IPv6 addresses used by clients during payment processing, enabling fraud detection, geographic analysis, and security monitoring. The pattern matches standard IP address formats while the header patterns focus on transaction-related context to differentiate from server, infrastructure, or administrative IP addresses.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:50:38.330383"
    },
    {
      "resultType": "generated",
      "semanticType": "MerchantID",
      "description": "A unique code identifying the merchant or business entity involved in a financial transaction",
      "pluginType": "regex",
      "regexPattern": "[A-Z0-9]{4,20}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "AMZN123456",
        "WALMART001",
        "STARBUCKS789",
        "MCDONALDS456",
        "TARGET999",
        "BESTBUY2021",
        "HOMEDEPOT88",
        "COSTCO12345"
      ],
      "negativeContentExamples": [
        "Amazon Store",
        "walmart@email.com",
        "123-45-6789",
        "4532-1234-5678-9012",
        "www.starbucks.com",
        "MC",
        "A1",
        "merchant_code_field"
      ],
      "positiveHeaderExamples": [
        "merchant_code",
        "merchant_id",
        "business_code",
        "vendor_code",
        "merchant_identifier",
        "business_id",
        "store_code",
        "retailer_code"
      ],
      "negativeHeaderExamples": [
        "merchant_name",
        "customer_code",
        "transaction_code",
        "product_code",
        "merchant_address",
        "payment_code",
        "currency_code",
        "country_code"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*merchant.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "merchant_code"
          ],
          "negativeExamples": [
            "merchant_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "merchant_id"
          ],
          "negativeExamples": [
            "customer_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*business.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "business_code"
          ],
          "negativeExamples": [
            "business_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vendor.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vendor_code"
          ],
          "negativeExamples": [
            "vendor_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "merchant"
          ],
          "negativeExamples": [
            "customer"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "code"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 4710,
      "explanation": "This semantic type identifies merchant codes used in financial transactions and payment processing systems. Merchant codes are typically alphanumeric identifiers assigned to businesses by payment processors, banks, or financial institutions to uniquely identify them in transaction records. These codes are commonly found in credit card transactions, payment gateway logs, and financial reporting systems. The pattern allows for 4-20 character codes containing uppercase letters and numbers, which covers most standard merchant identification formats used by major payment processors like Visa, Mastercard, and various payment gateways.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:51:12.418897"
    },
    {
      "resultType": "generated",
      "semanticType": "Channel",
      "description": "The service delivery method or platform through which a financial transaction was conducted",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "ONLINE BANKING",
        "MOBILE APP",
        "ATM",
        "BRANCH",
        "PHONE BANKING",
        "WIRE TRANSFER",
        "ACH",
        "CREDIT CARD",
        "DEBIT CARD",
        "CHECK",
        "CASH",
        "DIRECT DEPOSIT",
        "POINT OF SALE",
        "ONLINE",
        "MOBILE",
        "IN-PERSON",
        "ELECTRONIC",
        "MANUAL",
        "AUTOMATED",
        "DIGITAL",
        "WEB",
        "KIOSK",
        "MAIL",
        "FAX"
      ],
      "backout": "(?i).*(online|mobile|atm|branch|phone|wire|ach|card|check|cash|deposit|electronic|digital|web|kiosk|banking|transfer|payment).*",
      "positiveContentExamples": [
        "Online Banking",
        "Mobile App",
        "ATM",
        "Branch",
        "Phone Banking",
        "Credit Card",
        "Direct Deposit",
        "Point of Sale"
      ],
      "negativeContentExamples": [
        "Checking Account",
        "Savings Account",
        "USD",
        "Approved",
        "John Smith",
        "123.45",
        "2024-01-15",
        "Transfer"
      ],
      "positiveHeaderExamples": [
        "delivery_channel",
        "transaction_method",
        "payment_channel",
        "service_delivery_method",
        "channel_type",
        "delivery_platform",
        "transaction_channel",
        "banking_channel"
      ],
      "negativeHeaderExamples": [
        "transaction_amount",
        "account_type",
        "customer_name",
        "transaction_date",
        "currency_code",
        "status",
        "reference_number",
        "description"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*delivery.*method.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_delivery_method"
          ],
          "negativeExamples": [
            "transaction_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*service.*delivery.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "service_delivery_channel"
          ],
          "negativeExamples": [
            "service_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_channel"
          ],
          "negativeExamples": [
            "payment_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*delivery.*method.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "delivery_method"
          ],
          "negativeExamples": [
            "delivery_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "channel"
          ],
          "negativeExamples": [
            "change"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*method.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "method"
          ],
          "negativeExamples": [
            "metric"
          ],
          "rationale": null
        }
      ],
      "priority": 4720,
      "explanation": "This semantic type identifies the delivery method or channel through which financial transactions are conducted. It captures various platforms and methods such as online banking, mobile applications, ATMs, physical branches, phone banking, and different payment instruments. This classification is crucial for financial institutions to analyze transaction patterns, optimize channel performance, and understand customer preferences across different service delivery platforms. The type uses a finite list approach since there are a limited number of standard delivery channels in the financial services industry, with a backout pattern to catch variations and abbreviations of these standard terms.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:51:46.204458"
    },
    {
      "resultType": "generated",
      "semanticType": "CustomerAge",
      "description": "The age of a customer in years at the time of a transaction or account creation, typically used for demographic analysis, risk assessment, and customer segmentation in business contexts",
      "pluginType": "regex",
      "regexPattern": "\\b(?:[1-9]|[1-9][0-9]|1[0-1][0-9]|120)\\b",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "25",
        "42",
        "18",
        "65",
        "33",
        "78",
        "21",
        "56"
      ],
      "negativeContentExamples": [
        "0",
        "150",
        "-5",
        "25.5",
        "thirty",
        "N/A",
        "unknown",
        "2023"
      ],
      "positiveHeaderExamples": [
        "customer_age",
        "client_age",
        "age_years",
        "cust_age",
        "customer_age_at_signup",
        "age_in_years",
        "current_age",
        "member_age"
      ],
      "negativeHeaderExamples": [
        "account_age",
        "product_age",
        "age_group",
        "vintage",
        "years_since_signup",
        "birth_year",
        "date_of_birth",
        "customer_id"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_age"
          ],
          "negativeExamples": [
            "customer_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*client.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "client_age_years"
          ],
          "negativeExamples": [
            "client_status"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cust.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cust_age"
          ],
          "negativeExamples": [
            "cust_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*age.*years.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "age_in_years"
          ],
          "negativeExamples": [
            "years_employed"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "age"
          ],
          "negativeExamples": [
            "stage"
          ],
          "rationale": null
        }
      ],
      "priority": 4730,
      "explanation": "This semantic type identifies customer age values specifically in the context of business transactions and customer data. It matches integer values between 1 and 120 years, which represents the realistic range for human ages. The pattern is designed to capture ages used for demographic analysis, risk assessment, and customer segmentation in business contexts. It differs from general PERSON.AGE by being more specific to customer/client relationships and excludes edge cases like 0 (newborns) that are unlikely in typical customer databases. The header patterns prioritize customer-specific age fields over general age references.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:52:18.161697"
    },
    {
      "resultType": "error",
      "semanticType": "CustomerOccupation",
      "description": null,
      "pluginType": "regex",
      "regexPattern": null,
      "listValues": null,
      "backout": null,
      "positiveContentExamples": null,
      "negativeContentExamples": null,
      "positiveHeaderExamples": null,
      "negativeHeaderExamples": null,
      "confidenceThreshold": 0.0,
      "headerPatterns": null,
      "priority": 4740,
      "explanation": "Failed to parse Claude response - no valid JSON or XML found",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:52:52.247054"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionDuration",
      "description": "The time elapsed in seconds from transaction initiation to completion, used for performance monitoring and fraud detection",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d+)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2.5",
        "0.125",
        "15.7",
        "120",
        "0.05",
        "45.123",
        "300",
        "1.0"
      ],
      "negativeContentExamples": [
        "-2.5",
        "2.5s",
        "15 seconds",
        "N/A",
        "timeout",
        "2.5.3",
        "abc",
        "2,500"
      ],
      "positiveHeaderExamples": [
        "transaction_duration",
        "processing_time_seconds",
        "elapsed_time",
        "txn_duration_sec",
        "response_time",
        "execution_duration",
        "completion_time",
        "duration_seconds"
      ],
      "negativeHeaderExamples": [
        "transaction_id",
        "processing_fee",
        "start_time",
        "end_time",
        "transaction_date",
        "timeout_limit",
        "duration_type",
        "time_zone"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "transaction_duration_seconds"
          ],
          "negativeExamples": [
            "transaction_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*processing.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "processing_time_sec"
          ],
          "negativeExamples": [
            "processing_fee"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*elapsed.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "elapsed_time"
          ],
          "negativeExamples": [
            "elapsed_days"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(txn|trans).*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "txn_duration"
          ],
          "negativeExamples": [
            "txn_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*response.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "response_time"
          ],
          "negativeExamples": [
            "response_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "duration"
          ],
          "negativeExamples": [
            "duration_type"
          ],
          "rationale": null
        }
      ],
      "priority": 4750,
      "explanation": "This semantic type identifies transaction duration measurements in seconds, typically used for performance monitoring, SLA tracking, and fraud detection systems. The values represent the time elapsed from when a transaction begins processing until it completes, expressed as decimal numbers in seconds. This metric is crucial for identifying performance bottlenecks, detecting anomalous transaction patterns, and ensuring system responsiveness meets business requirements.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:53:23.470600"
    },
    {
      "resultType": "generated",
      "semanticType": "LoginAttempts",
      "description": "The number of authentication attempts made by a customer before successfully accessing their account for the transaction",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "2",
        "3",
        "5",
        "12",
        "25",
        "100",
        "999"
      ],
      "negativeContentExamples": [
        "0",
        "-1",
        "1.5",
        "2.0",
        "abc",
        "N/A",
        "01"
      ],
      "positiveHeaderExamples": [
        "authentication_attempts",
        "auth_attempt_count",
        "login_attempts",
        "customer_auth_attempts",
        "signin_attempts",
        "access_attempts",
        "auth_tries",
        "login_retry_count"
      ],
      "negativeHeaderExamples": [
        "failed_attempts",
        "successful_logins",
        "password_resets",
        "session_count",
        "transaction_attempts",
        "payment_tries",
        "verification_count",
        "logout_count"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*auth.*attempt.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "authentication_attempt_count"
          ],
          "negativeExamples": [
            "failed_login_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*customer.*auth.*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_auth_attempts"
          ],
          "negativeExamples": [
            "system_auth_attempts"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*login.*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "login_attempts"
          ],
          "negativeExamples": [
            "logout_attempts"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*auth.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "auth_count"
          ],
          "negativeExamples": [
            "error_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "attempts"
          ],
          "negativeExamples": [
            "success"
          ],
          "rationale": null
        }
      ],
      "priority": 4760,
      "explanation": "This semantic type identifies numeric values representing the count of authentication attempts made by customers before successfully accessing their accounts. It captures positive integers (1 or greater) that indicate how many times a user tried to authenticate before gaining access. This is commonly used in security analytics, user experience monitoring, and fraud detection systems to track authentication patterns and identify potential security issues or usability problems. The pattern excludes zero (since at least one attempt is needed for success) and negative numbers, focusing on realistic attempt counts that would occur in authentication workflows.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:53:53.984779"
    },
    {
      "resultType": "generated",
      "semanticType": "AccountBalance",
      "description": "The current monetary balance in the customer's account at the time of the transaction, expressed in the account's base currency",
      "pluginType": "regex",
      "regexPattern": "-?\\d{1,3}(?:,\\d{3})*(?:\\.\\d{2})?|-?\\d+(?:\\.\\d{2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1,234.56",
        "-567.89",
        "0.00",
        "15000.00",
        "-1,000,000.00",
        "999.99",
        "-50.25",
        "2500"
      ],
      "negativeContentExamples": [
        "$1,234.56",
        "1,234.567",
        "1.234,56",
        "USD 500.00",
        "1,23,456.78",
        "12.5%",
        "N/A",
        "1234.5.6"
      ],
      "positiveHeaderExamples": [
        "account_balance",
        "current_balance",
        "available_balance",
        "balance_amount",
        "acct_bal",
        "customer_balance",
        "running_balance",
        "balance"
      ],
      "negativeHeaderExamples": [
        "transaction_amount",
        "payment_due",
        "credit_limit",
        "interest_rate",
        "account_number",
        "balance_date",
        "minimum_balance",
        "balance_type"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*account.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "account_balance"
          ],
          "negativeExamples": [
            "account_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_balance"
          ],
          "negativeExamples": [
            "current_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*available.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "available_balance"
          ],
          "negativeExamples": [
            "available_credit"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*bal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "acct_bal"
          ],
          "negativeExamples": [
            "ball_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "balance"
          ],
          "negativeExamples": [
            "balanced"
          ],
          "rationale": null
        }
      ],
      "priority": 4770,
      "explanation": "This semantic type identifies monetary account balance values that represent the current amount of money in a customer's account. The pattern matches both positive and negative decimal numbers with optional comma separators for thousands, typically formatted with two decimal places for currency precision. It's designed to capture account balances without currency symbols or other formatting that would indicate different types of monetary values like transaction amounts or fees. This type is commonly found in banking and financial transaction data where tracking account states is crucial.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:54:27.601146"
    },
    {
      "resultType": "generated",
      "semanticType": "PreviousTransactionDate",
      "description": "The timestamp of the most recent transaction that occurred before the current transaction on the same account",
      "pluginType": "regex",
      "regexPattern": "\\d{10}|\\d{13}|\\d{4}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?([+-]\\d{2}:\\d{2}|Z)?|\\d{2}[/-]\\d{2}[/-]\\d{4} \\d{2}:\\d{2}:\\d{2}|\\d{4}[/-]\\d{2}[/-]\\d{2} \\d{2}:\\d{2}:\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1672531200",
        "1672531200000",
        "2023-01-01T10:30:45",
        "2023-01-01T10:30:45.123Z",
        "2023-01-01 10:30:45",
        "01/01/2023 10:30:45",
        "2023-01-01T10:30:45+05:00",
        "12/31/2022 23:59:59"
      ],
      "negativeContentExamples": [
        "167253120",
        "16725312000000",
        "2023/01/01",
        "10:30:45"
      ],
      "positiveHeaderExamples": [
        "previous_transaction_timestamp",
        "last_txn_time",
        "prior_transaction_dt",
        "prev_trans_timestamp",
        "before_transaction_time",
        "last_transaction_date",
        "previous_txn_ts",
        "prior_trans_datetime"
      ],
      "negativeHeaderExamples": [
        "current_transaction_timestamp",
        "next_transaction_time",
        "transaction_amount",
        "account_balance",
        "customer_id",
        "transaction_id",
        "future_transaction_date",
        "payment_due_date"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*previous.*transaction.*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "previous_transaction_timestamp"
          ],
          "negativeExamples": [
            "next_transaction_timestamp"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*last.*transaction.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "last_transaction_time"
          ],
          "negativeExamples": [
            "first_transaction_time"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*prior.*txn.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "prior_txn_date"
          ],
          "negativeExamples": [
            "current_txn_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*prev.*trans.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "prev_trans_ts"
          ],
          "negativeExamples": [
            "next_trans_ts"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*before.*transaction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "before_transaction_dt"
          ],
          "negativeExamples": [
            "after_transaction_dt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "timestamp"
          ],
          "negativeExamples": [
            "duration"
          ],
          "rationale": null
        }
      ],
      "priority": 4780,
      "explanation": "This semantic type identifies timestamps that represent the most recent transaction that occurred before the current transaction on the same account. This is commonly used in financial systems for fraud detection, transaction sequencing, and account activity analysis. The pattern matches various timestamp formats including Unix epoch seconds/milliseconds, ISO 8601 datetime formats, and common date-time string representations. This type is crucial for maintaining transaction chronology and enabling temporal analysis of account activity patterns.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P1",
      "generated_at": "2025-08-08T10:55:04.847805"
    }
  ]
}