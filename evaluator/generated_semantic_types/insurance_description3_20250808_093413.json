{
  "dataset": "insurance",
  "description_number": 3,
  "timestamp": "20250808_095158",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "ID",
      "description": "Sequential numeric identifier used to uniquely distinguish individual insurance contracts within a database, consisting entirely of positive whole numbers",
      "pluginType": "regex",
      "regexPattern": "[1-9][0-9]{0,9}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "42",
        "1001",
        "123456",
        "999999999",
        "5000000",
        "77",
        "3141592"
      ],
      "negativeContentExamples": [
        "0",
        "-123",
        "12.34",
        "ABC123",
        "123-456",
        "1,234",
        "+123",
        "123.0"
      ],
      "positiveHeaderExamples": [
        "contract_id",
        "policy_contract_number",
        "insurance_contract_id",
        "contract_number",
        "policy_id",
        "contract_identifier",
        "policy_contract_id",
        "contract_num"
      ],
      "negativeHeaderExamples": [
        "contract_date",
        "agent_id",
        "customer_id",
        "contract_type",
        "policy_amount",
        "contract_status",
        "premium_id",
        "claim_id"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*contract.*(id|number|num).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_contract_number"
          ],
          "negativeExamples": [
            "policy_contract_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*insurance.*contract.*(id|number|num).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_contract_id"
          ],
          "negativeExamples": [
            "insurance_contract_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*(id|identifier|number|num).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_id"
          ],
          "negativeExamples": [
            "contract_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(contract|policy).*(id|num).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_id"
          ],
          "negativeExamples": [
            "agent_id"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract"
          ],
          "negativeExamples": [
            "contractor"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(id|identifier).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "id"
          ],
          "negativeExamples": [
            "date"
          ],
          "rationale": null
        }
      ],
      "priority": 3430,
      "explanation": "This semantic type identifies sequential numeric identifiers specifically used for insurance contracts. These identifiers are positive integers that serve as unique keys in insurance databases to distinguish individual contracts or policies. The pattern excludes zero (as sequential IDs typically start from 1), negative numbers, decimals, and any alphanumeric combinations. This type is commonly found in insurance systems where contracts are assigned incrementing numeric identifiers for tracking and reference purposes.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:34:47.436848"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_start_contract",
      "description": "This type captures the effective start date of an insurance contract in various standard date formats. The date must represent a valid calendar date and can include both date and time components depending on system requirements.",
      "pluginType": "regex",
      "regexPattern": "(?i)(?:policy|contract|coverage|insurance).*(?:start|effective|begin|commence|inception).*(?:date|dt)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "2024-13-01",
        "2023-02-30",
        "invalid-date",
        "2024/15/01",
        "32-Jan-2024",
        "2024-00-15",
        "Feb 30, 2024",
        "2024-01-32"
      ],
      "positiveHeaderExamples": [
        "policy_start_date",
        "contract_effective_date",
        "insurance_start_dt",
        "coverage_begin_date",
        "policy_inception_date",
        "effective_start_date",
        "contract_start_date",
        "coverage_effective_dt"
      ],
      "negativeHeaderExamples": [
        "transaction_date",
        "birth_date",
        "policy_end_date",
        "claim_date",
        "payment_date",
        "expiration_date",
        "renewal_date",
        "cancellation_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*start.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_start_date"
          ],
          "negativeExamples": [
            "policy_end_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*contract.*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "contract_effective_date"
          ],
          "negativeExamples": [
            "contract_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*insurance.*(?:start|begin|effective).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_start_date"
          ],
          "negativeExamples": [
            "insurance_claim_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*coverage.*(?:start|begin|effective).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "coverage_start_dt"
          ],
          "negativeExamples": [
            "coverage_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:inception|commence).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "inception_date"
          ],
          "negativeExamples": [
            "inception_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "effective_date"
          ],
          "negativeExamples": [
            "expiration_date"
          ],
          "rationale": null
        }
      ],
      "priority": 3440,
      "explanation": "This semantic type identifies insurance contract start dates by analyzing both column headers and date content. It specifically targets dates that mark the beginning of insurance coverage, distinguishing them from other date types like transaction dates, birth dates, or policy end dates. The type uses header pattern matching to identify columns that contain terms related to insurance policies, contracts, or coverage combined with start-related terms like \"effective\", \"start\", \"begin\", \"commence\", or \"inception\". This is particularly useful in insurance data processing, policy management systems, and regulatory reporting where accurate identification of coverage start dates is critical for compliance and business operations.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:35:27.384498"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_last_renewal",
      "description": "Identifies timestamps marking the most recent policy renewal transaction completion within insurance systems. Represents complete dates when the last renewal process was successfully finalized.",
      "pluginType": "regex",
      "regexPattern": "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|\\d{4}/\\d{2}/\\d{2}|\\d{2}\\.\\d{2}\\.\\d{4}|\\d{4}\\.\\d{2}\\.\\d{2}|\\d{1,2}/\\d{1,2}/\\d{4}|\\d{1,2}-\\d{1,2}-\\d{4}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2023-12-15",
        "03/22/2024",
        "01-15-2023",
        "2024/06/30",
        "12.31.2023",
        "2023.09.15",
        "5/1/2024",
        "11-5-2023"
      ],
      "negativeContentExamples": [],
      "positiveHeaderExamples": [
        "last_renewal_date",
        "renewal_effective_date",
        "most_recent_renewal_dt",
        "policy_last_renewal",
        "renewal_completion_date",
        "latest_renewal_timestamp",
        "current_renewal_date",
        "renewal_processed_date"
      ],
      "negativeHeaderExamples": [
        "next_renewal_date",
        "claim_date",
        "policy_start_date",
        "expiration_date",
        "first_renewal_date",
        "renewal_due_date",
        "cancellation_date",
        "application_date"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*last.*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "last_renewal_date"
          ],
          "negativeExamples": [
            "next_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*effective.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_effective_date"
          ],
          "negativeExamples": [
            "policy_effective_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*recent.*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "most_recent_renewal"
          ],
          "negativeExamples": [
            "recent_claim"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*dt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal_dt"
          ],
          "negativeExamples": [
            "expiry_dt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal"
          ],
          "negativeExamples": [
            "cancellation"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3450,
      "explanation": "This semantic type identifies date fields that specifically capture when the most recent policy renewal transaction was completed in insurance systems. It distinguishes between various renewal-related dates by focusing on the \"last\" or \"most recent\" renewal event, excluding future renewal dates, initial policy dates, or other transaction dates. The type uses flexible date format matching to accommodate various date representations commonly found in insurance databases while maintaining specificity through header pattern matching that emphasizes the \"last renewal\" context.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:36:00.955509"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_next_renewal",
      "description": "This type specifies the upcoming renewal deadline for an active insurance policy in standard date format. The date represents when the current coverage period ends and renewal action is required.",
      "pluginType": "regex",
      "regexPattern": "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{1,2}/\\d{1,2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|\\d{1,2}-\\d{1,2}-\\d{4}|\\d{2}\\.\\d{2}\\.\\d{4}|\\d{1,2}\\.\\d{1,2}\\.\\d{4}|[A-Za-z]{3}\\s+\\d{1,2},?\\s+\\d{4}|\\d{1,2}\\s+[A-Za-z]{3}\\s+\\d{4}|[A-Za-z]{3}-\\d{1,2}-\\d{4}|\\d{4}\\d{2}\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2024-03-15",
        "12/31/2024",
        "3/15/2025",
        "15-03-2024",
        "Mar 15, 2024",
        "15 Mar 2024",
        "20240315"
      ],
      "negativeContentExamples": [
        "2024/15/03",
        "March 2024",
        "2024"
      ],
      "positiveHeaderExamples": [
        "next_renewal_date",
        "scheduled_renewal_date",
        "policy_renewal_due",
        "upcoming_renewal",
        "renewal_deadline",
        "coverage_renewal_date",
        "insurance_renewal",
        "renewal_due_date"
      ],
      "negativeHeaderExamples": [
        "last_renewal_date",
        "policy_issue_date",
        "renewal_fee",
        "renewal_count",
        "previous_renewal",
        "renewal_status",
        "policy_start_date",
        "expiration_date"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*renewal.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "next_renewal_date"
          ],
          "negativeExamples": [
            "last_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_renewal_due"
          ],
          "negativeExamples": [
            "policy_issue_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*scheduled.*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "scheduled_renewal_date"
          ],
          "negativeExamples": [
            "scheduled_payment_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(next|upcoming).*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "upcoming_renewal"
          ],
          "negativeExamples": [
            "previous_renewal"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*renewal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "renewal"
          ],
          "negativeExamples": [
            "renewal_fee"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3460,
      "explanation": "This semantic type identifies insurance policy renewal dates - the specific dates when current insurance coverage periods end and require renewal action. It's designed to distinguish upcoming renewal dates from historical renewal dates, policy issue dates, or other insurance-related dates. The type uses flexible date format matching to accommodate various date representations commonly found in insurance systems, including ISO format (YYYY-MM-DD), US format (MM/DD/YYYY), European format (DD/MM/YYYY), and textual date formats. This is particularly useful for insurance companies, brokers, and policy management systems that need to identify and track upcoming renewal deadlines for automated notifications, reporting, and customer service purposes.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:36:38.010070"
    },
    {
      "resultType": "generated",
      "semanticType": "Distribution_channel",
      "description": "Numeric codes representing insurance product distribution methods including direct sales, brokers, agents, and other sales channels",
      "pluginType": "regex",
      "regexPattern": "\\d{1,3}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "2",
        "3",
        "10",
        "25",
        "99",
        "101",
        "250"
      ],
      "negativeContentExamples": [
        "Direct Sales",
        "Broker",
        "Agent",
        "Online",
        "1.5",
        "A1",
        "CH001",
        "1000"
      ],
      "positiveHeaderExamples": [
        "distribution_channel",
        "sales_channel_code",
        "dist_channel_cd",
        "channel_code",
        "sales_channel",
        "distribution_cd",
        "channel_id",
        "dist_channel"
      ],
      "negativeHeaderExamples": [
        "channel_name",
        "payment_channel",
        "distribution_method",
        "channel_description",
        "marketing_channel",
        "communication_channel",
        "channel_type",
        "delivery_channel"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*distribution.*channel.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "distribution_channel_code"
          ],
          "negativeExamples": [
            "distribution_channel_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*sales.*channel.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "sales_channel_code"
          ],
          "negativeExamples": [
            "sales_channel_desc"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*distribution.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "distribution_channel"
          ],
          "negativeExamples": [
            "payment_channel"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*sales.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "sales_channel"
          ],
          "negativeExamples": [
            "marketing_channel"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "channel_code"
          ],
          "negativeExamples": [
            "channel_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "channel"
          ],
          "negativeExamples": [
            "channel_description"
          ],
          "rationale": null
        }
      ],
      "priority": 3470,
      "explanation": "This semantic type identifies numeric codes used in the insurance industry to classify distribution channels through which policies are sold. These codes typically range from 1-3 digits and represent standardized categories such as direct sales (often code 1), independent agents (code 2), brokers (code 3), online channels (code 10), etc. The numeric format allows for efficient data processing and reporting while maintaining consistency across insurance systems. This type is distinguished from textual channel descriptions and focuses specifically on the coded representation of distribution methods.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:37:09.001278"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_birth",
      "description": "Records the date of birth for the person who holds the insurance policy in various accepted date formats. Essential for age verification and risk assessment calculations.",
      "pluginType": "regex",
      "regexPattern": "(?:19|20)\\d{2}[-/](0[1-9]|1[0-2])[-/](0[1-9]|[12]\\d|3[01])|(?:0[1-9]|1[0-2])[-/](0[1-9]|[12]\\d|3[01])[-/](?:19|20)\\d{2}|(?:0[1-9]|[12]\\d|3[01])[-/](?:0[1-9]|1[0-2])[-/](?:19|20)\\d{2}|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\\s+(?:0?[1-9]|[12]\\d|3[01]),?\\s+(?:19|20)\\d{2}|(?:0?[1-9]|[12]\\d|3[01])\\s+(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\\s+(?:19|20)\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1985-03-15",
        "03/15/1985",
        "15/03/1985",
        "March 15, 1985",
        "15 Mar 1985",
        "1992-12-08",
        "08/12/1992",
        "December 8, 1992"
      ],
      "negativeContentExamples": [
        "1899-12-31",
        "13/25/1985",
        "1985-15-03",
        "32/03/1985",
        "March 32, 1985",
        "1985/03/35"
      ],
      "positiveHeaderExamples": [
        "date_of_birth",
        "dob",
        "birth_date",
        "policyholder_dob",
        "insured_birth_date",
        "primary_insured_dob",
        "holder_date_of_birth",
        "customer_birth_date"
      ],
      "negativeHeaderExamples": [
        "policy_start_date",
        "license_issue_date",
        "expiration_date",
        "claim_date",
        "renewal_date",
        "effective_date",
        "termination_date",
        "payment_due_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*(?:policy.*holder|insured.*person|primary.*insured).*(?:birth.*date|date.*birth|dob).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_holder_date_of_birth"
          ],
          "negativeExamples": [
            "policy_start_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:insured|policyholder|holder).*(?:birth|dob).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insured_birth_date"
          ],
          "negativeExamples": [
            "beneficiary_birth_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:date.*of.*birth|birth.*date|dob).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date_of_birth"
          ],
          "negativeExamples": [
            "date_of_issue"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*birth.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "birth"
          ],
          "negativeExamples": [
            "rebirth"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dob.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dob"
          ],
          "negativeExamples": [
            "job"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "update"
          ],
          "rationale": null
        }
      ],
      "priority": 3480,
      "explanation": "This semantic type identifies date of birth information specifically for insurance policyholders. It recognizes various common date formats including ISO format (YYYY-MM-DD), US format (MM/DD/YYYY), European format (DD/MM/YYYY), and textual formats with month names. The pattern is designed to capture realistic birth dates for living adults, making it particularly useful for insurance applications where age verification and risk assessment are critical. The header patterns prioritize insurance-specific terminology while also capturing general date of birth indicators.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:37:48.534771"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_driving_licence",
      "description": "This type stores the original issuance date of the driver's license for the insured person in standard date format. The date is used to calculate driving experience and assess insurance risk factors.",
      "pluginType": "regex",
      "regexPattern": "(?i).*(license|licence|dl|driv).*(issue|issued|issu|grant|original|first).*(date|dt)|.*(issue|issued|issu|grant|original|first).*(license|licence|dl|driv).*(date|dt)|.*(driv|driver).*(license|licence).*(date|dt)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "2025-12-31",
        "1985-06-15",
        "DL123456789",
        "EXPIRED",
        "2030-01-01",
        "1990-04-12",
        "VALID",
        "CLASS-A"
      ],
      "positiveHeaderExamples": [
        "driver_license_issue_date",
        "license_issue_date",
        "dl_issue_date",
        "driver_license_date",
        "license_original_date",
        "dl_granted_date",
        "driving_license_issue_date",
        "license_first_issued"
      ],
      "negativeHeaderExamples": [
        "license_number",
        "birth_date",
        "license_expiry_date",
        "policy_start_date",
        "license_class",
        "renewal_date",
        "license_status",
        "driving_record_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*driver.*license.*issue.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_license_issue_date"
          ],
          "negativeExamples": [
            "driver_license_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*license.*issue.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "license_issue_date"
          ],
          "negativeExamples": [
            "license_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dl.*issue.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "dl_issue_date"
          ],
          "negativeExamples": [
            "dl_expiry_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*driver.*license.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_license_date"
          ],
          "negativeExamples": [
            "driver_birth_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*license.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "license_date"
          ],
          "negativeExamples": [
            "birth_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "number"
          ],
          "rationale": null
        }
      ],
      "priority": 3490,
      "explanation": "This semantic type identifies driver's license issuance dates, which are crucial for insurance risk assessment and driving experience calculations. It distinguishes between the original issue date and other license-related dates like expiry or renewal dates. The pattern focuses on combinations of license/driving terms with issue/grant terms and date indicators. This helps insurance systems properly categorize and utilize this specific temporal data for actuarial calculations and policy underwriting.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:38:25.499104"
    },
    {
      "resultType": "generated",
      "semanticType": "Seniority",
      "description": "Customer tenure duration measured in whole years from first policy activation, indicating loyalty and experience level with insurance provider for risk assessment",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "5",
        "12",
        "25",
        "3",
        "18",
        "7",
        "35"
      ],
      "negativeContentExamples": [
        "1.5",
        "2.75",
        "18 months",
        "5 years",
        "-2",
        "0.5",
        "100",
        "N/A"
      ],
      "positiveHeaderExamples": [
        "customer_tenure_years",
        "policyholder_seniority",
        "client_tenure_yrs",
        "customer_loyalty_years",
        "years_with_insurer",
        "tenure_duration",
        "customer_experience_years",
        "policy_holder_tenure"
      ],
      "negativeHeaderExamples": [
        "vehicle_age",
        "policy_length",
        "employee_tenure",
        "building_age_years",
        "contract_duration",
        "claim_frequency",
        "premium_amount",
        "coverage_years"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*tenure.*years?.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_tenure_years"
          ],
          "negativeExamples": [
            "vehicle_age_years"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policyholder.*seniority.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policyholder_seniority"
          ],
          "negativeExamples": [
            "employee_seniority"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*customer.*loyalty.*years?.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "customer_loyalty_years"
          ],
          "negativeExamples": [
            "brand_loyalty_score"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(tenure|seniority).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "tenure"
          ],
          "negativeExamples": [
            "temperature"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*years.*with.*company.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "years_with_company"
          ],
          "negativeExamples": [
            "years_in_business"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*years.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "years"
          ],
          "negativeExamples": [
            "months"
          ],
          "rationale": null
        }
      ],
      "priority": 3500,
      "explanation": "This semantic type identifies customer tenure duration measured in whole years, specifically representing how long a customer has been with an insurance provider since their first policy activation. It's used for risk assessment and loyalty analysis in insurance contexts. The pattern matches 1-2 digit whole numbers representing years of customer relationship, distinguishing it from other age-related fields like vehicle age or policy duration. This metric is crucial for insurance companies to assess customer loyalty, calculate risk profiles, and determine pricing strategies based on customer experience and retention patterns.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:38:57.255321"
    },
    {
      "resultType": "generated",
      "semanticType": "Policies_in_force",
      "description": "This type counts the total number of insurance policies that are currently active and in effect for a specific policyholder. The value represents only policies with valid coverage status and excludes any cancelled or expired policies.",
      "pluginType": "regex",
      "regexPattern": "[1-9]\\d{0,2}|0",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "3",
        "5",
        "12",
        "25",
        "0",
        "8",
        "150"
      ],
      "negativeContentExamples": [
        "-1",
        "3.5",
        "1000",
        "auto",
        "active",
        "$500",
        "2024-01-01",
        "N/A"
      ],
      "positiveHeaderExamples": [
        "policies_count",
        "total_policies_held",
        "active_insurance_policies",
        "current_policy_count",
        "number_of_policies",
        "policy_total",
        "insurance_policies_active",
        "policyholder_policy_count"
      ],
      "negativeHeaderExamples": [
        "max_policies",
        "active_customers",
        "policy_premium",
        "policy_start_date",
        "insurance_type",
        "policy_number",
        "claims_count",
        "coverage_amount"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*active.*insurance.*polic(y|ies).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "active_insurance_policies_count"
          ],
          "negativeExamples": [
            "expired_insurance_policies_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*polic(y|ies).*held.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_policies_held"
          ],
          "negativeExamples": [
            "total_policies_sold"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic(y|ies).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_count"
          ],
          "negativeExamples": [
            "policy_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*polic(y|ies).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_policies"
          ],
          "negativeExamples": [
            "current_claims"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*polic(y|ies).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies"
          ],
          "negativeExamples": [
            "claims"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3510,
      "explanation": "This semantic type identifies columns containing counts of active insurance policies held by policyholders. It's designed to match small integer values (typically 0-999) that represent the number of currently valid insurance policies. The type is useful for customer analytics, portfolio management, and risk assessment in insurance systems. It distinguishes between policy counts and other insurance-related metrics like premiums, claim counts, or policy identifiers by focusing on the counting aspect of active coverage.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:39:31.237351"
    },
    {
      "resultType": "generated",
      "semanticType": "Max_policies",
      "description": "Tracks the peak count of concurrent policies maintained by a customer at any single point during their entire tenure. This metric helps assess customer engagement and portfolio complexity over time.",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "5",
        "12",
        "25",
        "3",
        "8",
        "15",
        "42"
      ],
      "negativeContentExamples": [
        "-1",
        "1.5",
        "2.75",
        "N/A",
        "unknown",
        "pending"
      ],
      "positiveHeaderExamples": [
        "max_policies_inforce",
        "peak_policy_count",
        "maximum_concurrent_policies",
        "highest_policy_count",
        "peak_policies_held",
        "max_active_policies",
        "policy_count_maximum",
        "concurrent_policy_peak"
      ],
      "negativeHeaderExamples": [
        "min_policies",
        "average_policies",
        "current_policy_count",
        "total_policies_ever",
        "policy_premium_max",
        "policy_duration_peak",
        "median_policy_count",
        "policy_start_count"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*max.*polic.*inforce.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_policies_inforce"
          ],
          "negativeExamples": [
            "min_policies_inforce"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*polic.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_policy_count"
          ],
          "negativeExamples": [
            "average_policy_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*polic.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_policies"
          ],
          "negativeExamples": [
            "max_premium"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*polic.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_policies"
          ],
          "negativeExamples": [
            "peak_premium"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(max|peak).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "maximum_count"
          ],
          "negativeExamples": [
            "minimum_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3520,
      "explanation": "This semantic type identifies columns containing the maximum number of insurance policies that a customer held simultaneously at any point in their relationship history. It's a key metric in insurance analytics for understanding customer engagement depth, portfolio complexity, and potential cross-selling success. The values are always positive integers representing concurrent policy counts, distinguishing it from other policy metrics like totals, averages, or current counts. This metric helps insurers segment customers by engagement level and identify high-value relationships.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:40:02.934330"
    },
    {
      "resultType": "generated",
      "semanticType": "Max_products",
      "description": "Represents the maximum number of different insurance product types simultaneously held by a customer at any point in their history. This metric captures peak portfolio diversity across product categories like auto, home, life, health, and other insurance offerings.",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "3",
        "5",
        "7",
        "2",
        "4",
        "8",
        "6"
      ],
      "negativeContentExamples": [
        "AUTO",
        "3.5",
        "-2",
        "HOME_LIFE",
        "1.0"
      ],
      "positiveHeaderExamples": [
        "max_products_held",
        "peak_product_count",
        "highest_portfolio_diversity",
        "max_insurance_types",
        "peak_coverage_count",
        "maximum_product_diversity",
        "top_product_portfolio_size",
        "max_simultaneous_products"
      ],
      "negativeHeaderExamples": [
        "product_id",
        "total_products_sold",
        "current_products",
        "product_name",
        "lifetime_product_purchases",
        "product_revenue",
        "active_policies",
        "product_category"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*max.*products.*held.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_products_held"
          ],
          "negativeExamples": [
            "max_product_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*product.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_product_count"
          ],
          "negativeExamples": [
            "peak_product_sales"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*max.*insurance.*portfolio.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "max_insurance_portfolio_size"
          ],
          "negativeExamples": [
            "max_insurance_premium"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*peak.*coverage.*diversity.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "peak_coverage_diversity"
          ],
          "negativeExamples": [
            "peak_coverage_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(max|peak|highest).*product.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "highest_product_diversity"
          ],
          "negativeExamples": [
            "max_product_revenue"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "product_count"
          ],
          "negativeExamples": [
            "claim_count"
          ],
          "rationale": null
        }
      ],
      "priority": 3530,
      "explanation": "This semantic type identifies numeric values representing the peak diversity of insurance products simultaneously maintained by a customer. It's specifically designed for insurance analytics where understanding customer portfolio complexity is crucial for risk assessment, cross-selling opportunities, and customer segmentation. The values are typically small integers (1-10) representing realistic insurance product portfolios, as customers rarely hold more than 8-10 different insurance product types simultaneously due to practical and financial constraints.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:40:40.959150"
    },
    {
      "resultType": "generated",
      "semanticType": "Lapse",
      "description": "Records the cumulative number of policy lapses or cancellations associated with a customer account over time, including both voluntary cancellations and involuntary terminations due to non-payment or other reasons.",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1",
        "3",
        "7",
        "12",
        "25",
        "156",
        "2847"
      ],
      "negativeContentExamples": [
        "2023-01-15",
        "Non-payment",
        "Voluntary",
        "$1,250.00",
        "Active",
        "Pending",
        "-5",
        "3.5"
      ],
      "positiveHeaderExamples": [
        "lapse_count",
        "policies_lapsed",
        "policy_lapse_count",
        "total_lapses",
        "cancellation_count",
        "num_lapsed_policies",
        "customer_lapse_count",
        "cumulative_lapses"
      ],
      "negativeHeaderExamples": [
        "lapse_date",
        "cancellation_reason",
        "policy_premium",
        "lapse_amount",
        "last_lapse_date",
        "policy_status",
        "cancellation_fee",
        "lapse_percentage"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*lapse.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_lapse_count"
          ],
          "negativeExamples": [
            "policy_lapse_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policies.*lapsed.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policies_lapsed"
          ],
          "negativeExamples": [
            "policies_active"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*lapse.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lapse_count"
          ],
          "negativeExamples": [
            "lapse_reason"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cancellation.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cancellation_count"
          ],
          "negativeExamples": [
            "cancellation_reason"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*lapsed.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_lapsed"
          ],
          "negativeExamples": [
            "lapsed_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3540,
      "explanation": "This semantic type identifies columns containing cumulative counts of policy lapses or cancellations for insurance customers. It captures numeric values representing how many policies have been terminated (either voluntarily or involuntarily) over time. This metric is crucial for insurance analytics, customer risk assessment, and retention analysis. The type uses a simple numeric pattern since lapse counts are always non-negative integers, and relies heavily on header pattern matching to distinguish from other numeric fields like dates, amounts, or percentages that might appear in similar contexts.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:41:19.097607"
    },
    {
      "resultType": "generated",
      "semanticType": "Date_lapse",
      "description": "This type captures the exact termination date of a lapsed insurance policy in standard date format. The date marks when coverage officially ended and the policy became inactive in the system.",
      "pluginType": "regex",
      "regexPattern": "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{1,2}/\\d{1,2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|\\d{1,2}-\\d{1,2}-\\d{4}|\\d{4}/\\d{2}/\\d{2}|\\d{2}\\.\\d{2}\\.\\d{4}|\\d{1,2}\\.\\d{1,2}\\.\\d{4}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2023-12-15",
        "03/22/2024",
        "1/15/2023",
        "12-31-2023",
        "2024/01/30",
        "06.15.2023",
        "2023-08-07",
        "11/28/2024"
      ],
      "negativeContentExamples": [],
      "positiveHeaderExamples": [
        "lapse_date",
        "termination_date",
        "policy_lapse_date",
        "coverage_end_date",
        "insurance_termination_date",
        "policy_termination_dt",
        "lapse_dt",
        "coverage_lapse_date"
      ],
      "negativeHeaderExamples": [
        "renewal_date",
        "effective_date",
        "policy_start_date",
        "coverage_begin_date",
        "issue_date",
        "application_date",
        "premium_due_date",
        "next_payment_date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*policy.*lapse.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_lapse_date"
          ],
          "negativeExamples": [
            "policy_effective_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*insurance.*termination.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_termination_date"
          ],
          "negativeExamples": [
            "insurance_renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*coverage.*end.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "coverage_end_date"
          ],
          "negativeExamples": [
            "coverage_start_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(lapse|termination).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lapse_date"
          ],
          "negativeExamples": [
            "renewal_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(lapse|termination).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "termination_date"
          ],
          "negativeExamples": [
            "effective_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "date"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3550,
      "explanation": "The PERIOD.LAPSE_DATE semantic type is specifically designed to identify dates when insurance policies terminate or lapse. This is crucial for insurance data processing as it distinguishes between policy termination dates and other important dates like renewal dates, effective dates, or premium due dates. The type uses flexible date format matching to accommodate various date representations commonly found in insurance systems, while the header patterns focus on identifying columns that specifically contain policy lapse or termination information rather than other policy-related dates.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:41:53.663525"
    },
    {
      "resultType": "generated",
      "semanticType": "Payment",
      "description": "Numeric flag indicating insurance policy payment status - whether premium payments are current or outstanding",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "0",
        "1",
        "2",
        "3",
        "9"
      ],
      "backout": "[0-9]{1,2}",
      "positiveContentExamples": [
        "0",
        "1",
        "2",
        "3",
        "9"
      ],
      "negativeContentExamples": [
        "4",
        "10",
        "-1",
        "99",
        "5",
        "100",
        "A",
        "PAID"
      ],
      "positiveHeaderExamples": [
        "payment_status_flag",
        "policy_payment_status",
        "premium_status_code",
        "insurance_payment_flag",
        "payment_current_flag",
        "premium_payment_status",
        "policy_status_indicator",
        "payment_delinquency_flag"
      ],
      "negativeHeaderExamples": [
        "payment_frequency",
        "payment_method_code",
        "amount_paid",
        "payment_date",
        "premium_amount",
        "payment_due_date",
        "total_payments",
        "payment_history"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*insurance.*payment.*status.*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_payment_status_flag"
          ],
          "negativeExamples": [
            "insurance_payment_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*policy.*payment.*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "policy_payment_status"
          ],
          "negativeExamples": [
            "policy_payment_date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*status.*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_status_flag"
          ],
          "negativeExamples": [
            "premium_amount_due"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*payment.*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "payment_status"
          ],
          "negativeExamples": [
            "payment_method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*pay.*stat.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "pay_stat"
          ],
          "negativeExamples": [
            "pay_amt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*status.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "status"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3560,
      "explanation": "This semantic type identifies numeric flags used in insurance systems to track policy payment status. Common values include 0 (current/paid), 1 (overdue), 2 (grace period), 3 (lapsed), and 9 (unknown/error). These flags are critical for insurance operations, enabling automated processing of policy renewals, cancellations, and customer communications. The type uses a finite list of standard flag values with a numeric backout pattern to catch similar coding schemes that may use additional values within the same domain.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:42:27.165837"
    },
    {
      "resultType": "generated",
      "semanticType": "Premium",
      "description": "This type captures the premium cost associated with an insurance policy expressed as a decimal or whole number currency value. The amount represents the total price charged to the policyholder for their coverage benefits and services.",
      "pluginType": "regex",
      "regexPattern": "(?i).*(?:net|annual|yearly|monthly|quarterly|total|base|standard).*premium.*(?:amount|cost|price|fee|value)|.*premium.*(?:amount|cost|price|fee|value).*(?:net|annual|yearly|monthly|quarterly|total|base|standard)|.*(?:net|annual|yearly|monthly|quarterly|total|base|standard).*premium$|.*premium.*(?:amount|cost|price|fee|value)$",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "0.05",
        "15%",
        "$1,250.00",
        "-500.00",
        "N/A",
        "TBD",
        "0.125",
        "25.5%"
      ],
      "positiveHeaderExamples": [
        "net_premium_amount",
        "premium_yearly",
        "annual_premium_cost",
        "monthly_premium_fee",
        "base_premium_amount",
        "total_premium_value",
        "standard_premium_price",
        "quarterly_premium_amount"
      ],
      "negativeHeaderExamples": [
        "gross_premium",
        "premium_rate",
        "premium_percentage",
        "premium_discount",
        "commission_rate",
        "deductible_amount",
        "coverage_limit",
        "policy_fee"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*net.*premium.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "net_premium_amount"
          ],
          "negativeExamples": [
            "gross_premium_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*(?:yearly|annual|monthly|quarterly).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_yearly"
          ],
          "negativeExamples": [
            "premium_rate_yearly"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:total|base|standard).*premium.*(?:amount|cost|price).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_premium_cost"
          ],
          "negativeExamples": [
            "premium_discount_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*(?:amount|cost|price|fee|value).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium_amount"
          ],
          "negativeExamples": [
            "premium_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*insurance.*premium.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_premium"
          ],
          "negativeExamples": [
            "insurance_deductible"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*premium.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "premium"
          ],
          "negativeExamples": [
            "deductible"
          ],
          "rationale": null
        }
      ],
      "priority": 3570,
      "explanation": "This semantic type identifies insurance premium amounts in datasets. It focuses on net premiums and specific time-based premium amounts (yearly, monthly, etc.) while excluding gross premiums, rates, and percentages. The type is designed to capture the actual monetary cost that policyholders pay for their insurance coverage, distinguishing it from related but different concepts like premium rates, gross premiums, or other insurance-related fees. This is particularly useful for financial analysis, actuarial calculations, and insurance portfolio management where precise premium amounts need to be identified and processed.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:43:09.188473"
    },
    {
      "resultType": "generated",
      "semanticType": "Cost_claims_year",
      "description": "Records the cumulative claim expenses incurred by an insurance company for a particular policy within the current calendar or policy year, including all settled claims representing actual financial impact on insurer reserves",
      "pluginType": "regex",
      "regexPattern": "(?:\\$|USD|EUR|GBP|CAD)?\\s*\\d{1,3}(?:,\\d{3})*(?:\\.\\d{2})?(?:\\s*(?:USD|EUR|GBP|CAD))?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "$125,450.00",
        "$2,345,678.99",
        "$67,890.25",
        "$45,000.00"
      ],
      "negativeContentExamples": [
        "2023",
        "Q4",
        "AUTO",
        "PENDING",
        "12/31/2023",
        "POL-123456",
        "CLOSED"
      ],
      "positiveHeaderExamples": [
        "claims_cost_current_year",
        "total_claims_amount",
        "current_year_claims_expense",
        "claims_incurred_ytd",
        "claim_costs_2024",
        "settled_claims_amount",
        "policy_claims_expense",
        "annual_claims_cost"
      ],
      "negativeHeaderExamples": [
        "claims_count",
        "year_to_date",
        "policy_number",
        "claim_status",
        "premium_amount",
        "deductible",
        "coverage_type",
        "claim_date"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*claims.*cost.*current.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_cost_current_year"
          ],
          "negativeExamples": [
            "claims_cost_prior_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*claims.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_claims_amount"
          ],
          "negativeExamples": [
            "total_claims_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*year.*claims.*expense.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "current_year_claims_expense"
          ],
          "negativeExamples": [
            "current_year_premium_expense"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*incurred.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_incurred"
          ],
          "negativeExamples": [
            "premiums_incurred"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claim.*expense.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claim_expense"
          ],
          "negativeExamples": [
            "claim_frequency"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cost.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cost"
          ],
          "negativeExamples": [
            "count"
          ],
          "rationale": null
        }
      ],
      "priority": 3580,
      "explanation": "This semantic type identifies monetary amounts representing cumulative claim expenses for insurance policies within the current year. It captures the actual financial impact on insurance company reserves from settled claims, distinguishing it from claim counts, policy premiums, or other insurance-related metrics. The pattern recognizes various currency formats including dollar signs, commas for thousands separators, and decimal places for cents, which are typical in financial reporting systems used by insurance companies.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:43:42.081360"
    },
    {
      "resultType": "generated",
      "semanticType": "N_claims_year",
      "description": "This type tracks the number of individual claim incidents associated with a policy within the current calendar or policy year period. The count includes all claim types regardless of their settlement status or monetary value.",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "1",
        "2",
        "5",
        "12",
        "25",
        "100",
        "3"
      ],
      "negativeContentExamples": [
        "1500.00",
        "$2,500",
        "-1",
        "3.5",
        "N/A",
        "pending",
        "2023-12-01",
        "auto"
      ],
      "positiveHeaderExamples": [
        "claims_count_current_year",
        "n_claims_year",
        "current_year_claims_count",
        "yearly_claims_number",
        "claims_count_ytd",
        "policy_claims_count_current",
        "num_claims_this_year",
        "annual_claims_count"
      ],
      "negativeHeaderExamples": [
        "claims_amount",
        "total_claims",
        "claims_value_current_year",
        "claim_settlement_amount",
        "claims_paid_ytd",
        "outstanding_claims",
        "claims_reserve",
        "lifetime_claims_count"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*claims.*count.*current.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_count_current_year"
          ],
          "negativeExamples": [
            "claims_amount_current_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*year.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_year_count"
          ],
          "negativeExamples": [
            "claims_year_total"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*n.*claims.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "n_claims_year"
          ],
          "negativeExamples": [
            "n_claims_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_count"
          ],
          "negativeExamples": [
            "claims_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*num.*claims.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "num_claims"
          ],
          "negativeExamples": [
            "num_policies"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3590,
      "explanation": "This semantic type identifies numeric values representing the count of insurance claims within the current year period. It's specifically designed for insurance and risk management systems where tracking claim frequency is crucial for policy assessment, risk evaluation, and actuarial analysis. The type distinguishes between claim counts (which this matches) and claim amounts or values (which it excludes). This is particularly useful for identifying columns that track claim incident frequency rather than financial impact, helping analysts understand claim patterns and policy risk profiles.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:44:16.549072"
    },
    {
      "resultType": "generated",
      "semanticType": "N_claims_history",
      "description": "A cumulative count of all claim incidents associated with a customer throughout their complete tenure with the insurance provider, including claims from all policies and time periods for risk assessment and pricing purposes.",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0",
        "3",
        "7",
        "12",
        "25",
        "41",
        "156",
        "289"
      ],
      "negativeContentExamples": [
        "3.5",
        "-2",
        "2.75%",
        "$1,250",
        "N/A",
        "pending",
        "high",
        "monthly"
      ],
      "positiveHeaderExamples": [
        "total_claims_count",
        "claims_history_count",
        "lifetime_claims_total",
        "cumulative_claims_count",
        "customer_total_claims",
        "all_time_claims_count",
        "historical_claims_total",
        "aggregate_claims_count"
      ],
      "negativeHeaderExamples": [
        "claims_frequency",
        "claims_ratio",
        "annual_claims_count",
        "monthly_claims",
        "claims_amount_total",
        "average_claims",
        "claims_per_year",
        "recent_claims_count"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*total.*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_claims_count"
          ],
          "negativeExamples": [
            "total_claims_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*history.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_history_count"
          ],
          "negativeExamples": [
            "claims_history_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*lifetime.*claims.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "lifetime_claims_count"
          ],
          "negativeExamples": [
            "lifetime_premium_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cumulative.*claims.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cumulative_claims"
          ],
          "negativeExamples": [
            "cumulative_premium"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*total.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_total"
          ],
          "negativeExamples": [
            "premium_total"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "amount"
          ],
          "rationale": null
        }
      ],
      "priority": 3600,
      "explanation": "This semantic type identifies cumulative claim counts that represent the total number of insurance claims filed by a customer across their entire relationship with an insurance provider. Unlike periodic or frequency-based metrics, this represents a running total that only increases over time. It's commonly used in insurance analytics for risk assessment, customer segmentation, and pricing models. The pattern matches simple integer values since claim counts are always whole numbers, and the header patterns focus on identifying columns that contain words like \"total\", \"cumulative\", \"lifetime\", or \"history\" combined with \"claims\" and \"count\" to distinguish from other claim-related metrics like amounts, frequencies, or ratios.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:44:47.869258"
    },
    {
      "resultType": "generated",
      "semanticType": "R_Claims_history",
      "description": "A calculated metric representing the frequency of insurance claims per unit of time (typically per year) based on the customer's historical claims divided by their relationship duration. Values are typically decimal numbers representing claims per year.",
      "pluginType": "regex",
      "regexPattern": "\\d*\\.?\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "0.25",
        "1.5",
        "0.0",
        "2.33",
        "0.75",
        "3.2",
        "0.125",
        "1.0"
      ],
      "negativeContentExamples": [
        "-0.5",
        "N/A",
        "High",
        "2023-01-15",
        "$1,250.00",
        "AUTO"
      ],
      "positiveHeaderExamples": [
        "claims_frequency_rate",
        "claims_per_year_ratio",
        "annual_claims_frequency",
        "claim_rate_yearly",
        "frequency_ratio",
        "claims_freq_rate",
        "yearly_claim_frequency",
        "customer_claims_frequency"
      ],
      "negativeHeaderExamples": [
        "claims_count",
        "policy_duration",
        "claims_amount",
        "premium_frequency",
        "payment_rate",
        "claim_severity",
        "total_claims",
        "claim_date"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*claims.*frequency.*rate.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_frequency_rate"
          ],
          "negativeExamples": [
            "claims_severity_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*per.*year.*ratio.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_per_year_ratio"
          ],
          "negativeExamples": [
            "premiums_per_year_ratio"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claims.*frequency.*ratio.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claims_frequency_ratio"
          ],
          "negativeExamples": [
            "payment_frequency_ratio"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*claim.*rate.*annual.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "claim_rate_annual"
          ],
          "negativeExamples": [
            "premium_rate_annual"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*frequency.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "frequency"
          ],
          "negativeExamples": [
            "severity"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*rate.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "rate"
          ],
          "negativeExamples": [
            "count"
          ],
          "rationale": null
        }
      ],
      "priority": 3610,
      "explanation": "This semantic type identifies insurance claims frequency rates, which are calculated metrics showing how often a customer files claims relative to their policy duration. These rates are crucial for risk assessment, pricing models, and customer segmentation in insurance analytics. The values are typically small decimal numbers (0-5 range) representing claims per year, where 0 indicates no claims, 1.0 indicates one claim per year on average, and higher values indicate more frequent claims. This metric helps insurers identify high-risk customers and adjust premiums accordingly.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:45:27.817883"
    },
    {
      "resultType": "generated",
      "semanticType": "Type_risk",
      "description": "Numeric risk category codes used in insurance underwriting to classify potential exposure and likelihood of claims, representing different risk levels from low to high exposure categories",
      "pluginType": "regex",
      "regexPattern": "\\d{1,3}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "2",
        "3",
        "4",
        "5",
        "10",
        "25",
        "99"
      ],
      "negativeContentExamples": [
        "1.5",
        "A1",
        "LOW",
        "HIGH",
        "MEDIUM",
        "0.85",
        "N/A",
        "STANDARD"
      ],
      "positiveHeaderExamples": [
        "risk_type_code",
        "vehicle_risk_category",
        "underwriting_risk_cat",
        "policy_risk_category",
        "exposure_category_code",
        "risk_classification",
        "claim_risk_category",
        "driver_risk_code"
      ],
      "negativeHeaderExamples": [
        "risk_score",
        "insurance_type",
        "premium_amount",
        "policy_number",
        "coverage_limit",
        "deductible_amount",
        "claim_amount",
        "customer_rating"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*risk.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_risk_category"
          ],
          "negativeExamples": [
            "vehicle_insurance_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*risk.*type.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_type_code"
          ],
          "negativeExamples": [
            "risk_assessment_score"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*underwriting.*risk.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "underwriting_risk_category"
          ],
          "negativeExamples": [
            "underwriting_decision"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*risk.*cat.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_cat"
          ],
          "negativeExamples": [
            "risk_score"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*exposure.*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "exposure_category"
          ],
          "negativeExamples": [
            "exposure_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "category"
          ],
          "negativeExamples": [
            "score"
          ],
          "rationale": null
        }
      ],
      "priority": 3620,
      "explanation": "This semantic type identifies numeric risk category codes used in insurance underwriting processes. These codes are typically simple integers (1-3 digits) that represent predefined risk classifications ranging from low to high exposure categories. Insurance companies use these standardized codes to quickly categorize policies, vehicles, drivers, or other insurable entities based on their assessed risk level. The codes enable consistent risk assessment across different underwriters and facilitate automated premium calculations and policy decisions. Unlike risk scores which are continuous numerical values, risk category codes represent discrete, predefined classification buckets that correspond to specific underwriting guidelines and pricing tiers.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:46:04.597697"
    },
    {
      "resultType": "generated",
      "semanticType": "Area",
      "description": "Binary classification codes for geographic area types used in insurance risk assessment, distinguishing between urban/rural or high-risk/low-risk geographic zones",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "U",
        "R",
        "URBAN",
        "RURAL",
        "HIGH",
        "LOW",
        "H",
        "L",
        "1",
        "2",
        "A",
        "B",
        "METRO",
        "NONMETRO",
        "CITY",
        "COUNTRY"
      ],
      "backout": "(?i)(URBAN|RURAL|HIGH|LOW|METRO|CITY|COUNTRY|[URLHABM12])",
      "positiveContentExamples": [
        "U",
        "R",
        "URBAN",
        "RURAL",
        "HIGH",
        "LOW",
        "H",
        "L"
      ],
      "negativeContentExamples": [
        "90210",
        "New York",
        "NORTHEAST",
        "CA",
        "MEDIUM",
        "SUBURBAN",
        "123",
        "ZONE_A"
      ],
      "positiveHeaderExamples": [
        "area_type",
        "location_classification",
        "geographic_zone",
        "risk_category",
        "zone_class",
        "area_classification",
        "location_type",
        "property_area_type"
      ],
      "negativeHeaderExamples": [
        "area_code",
        "region_name",
        "zip_code",
        "state_code",
        "territory_name",
        "district_number",
        "location_id",
        "area_size"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*area.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "area_type"
          ],
          "negativeExamples": [
            "area_code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*location.*classification.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "location_classification"
          ],
          "negativeExamples": [
            "location_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*geographic.*zone.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "geographic_zone"
          ],
          "negativeExamples": [
            "geographic_coordinate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(risk|area).*category.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "risk_category"
          ],
          "negativeExamples": [
            "product_category"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(zone|area).*class.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "zone_class"
          ],
          "negativeExamples": [
            "vehicle_class"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(type|classification).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "type"
          ],
          "negativeExamples": [
            "name"
          ],
          "rationale": null
        }
      ],
      "priority": 3630,
      "explanation": "This semantic type identifies binary classification codes used in insurance and risk assessment to categorize geographic areas. It captures simple categorical distinctions like urban vs rural, high-risk vs low-risk zones, or metropolitan vs non-metropolitan areas. The type uses a finite list approach since these classifications typically follow standardized binary or simple categorical schemes. Common patterns include single letter codes (U/R, H/L), full descriptive terms (URBAN/RURAL), or numeric codes (1/2). This classification is essential for insurance underwriting, premium calculations, and geographic risk modeling where properties need to be quickly categorized into broad area types for assessment purposes.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:46:41.059250"
    },
    {
      "resultType": "generated",
      "semanticType": "Second_driver",
      "description": "Binary flag indicating whether an insurance policy covers multiple drivers, used for premium calculations and coverage scope determination",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "TRUE",
        "FALSE",
        "TRUE",
        "FALSE",
        "TRUE",
        "FALSE",
        "YES",
        "NO",
        "YES",
        "NO",
        "YES",
        "NO",
        "Y",
        "N",
        "1",
        "0"
      ],
      "backout": "(?i)(true|false|yes|no|y|n|1|0)",
      "positiveContentExamples": [
        "true",
        "false",
        "True",
        "False",
        "YES",
        "NO",
        "Y",
        "N",
        "1",
        "0"
      ],
      "negativeContentExamples": [
        "2",
        "3",
        "maybe",
        "unknown",
        "pending",
        "active",
        "inactive"
      ],
      "positiveHeaderExamples": [
        "multiple_driver_flag",
        "has_additional_driver",
        "multi_driver_policy",
        "secondary_driver_indicator",
        "additional_insured_flag",
        "multiple_drivers",
        "driver_multiplicity_flag",
        "has_secondary_driver"
      ],
      "negativeHeaderExamples": [
        "driver_count",
        "driver_age",
        "primary_driver_name",
        "driver_license_number",
        "number_of_drivers",
        "driver_experience",
        "driver_rating",
        "total_drivers"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*multiple.*driver.*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "multiple_driver_flag"
          ],
          "negativeExamples": [
            "driver_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*has.*additional.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "has_additional_driver"
          ],
          "negativeExamples": [
            "additional_driver_name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*multi.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "multi_driver_policy"
          ],
          "negativeExamples": [
            "driver_license"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*secondary.*driver.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "secondary_driver_indicator"
          ],
          "negativeExamples": [
            "primary_driver_age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*additional.*insured.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "additional_insured_flag"
          ],
          "negativeExamples": [
            "insured_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*flag.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "driver_flag"
          ],
          "negativeExamples": [
            "country_flag"
          ],
          "rationale": null
        }
      ],
      "priority": 3640,
      "explanation": "This semantic type identifies binary flags used in insurance systems to indicate whether a policy covers multiple drivers. It's crucial for insurance premium calculations, coverage scope determination, and policy administration. The flag helps distinguish between single-driver and multi-driver policies, which typically have different risk profiles and pricing structures. Common representations include boolean values (true/false), yes/no indicators, and binary digits (1/0). This type is specifically designed to capture the binary nature of multi-driver coverage decisions in insurance data systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:47:12.821711"
    },
    {
      "resultType": "generated",
      "semanticType": "Year_matriculation",
      "description": "Four-digit calendar year representing when a vehicle was originally registered, used for insurance underwriting, depreciation calculations, and coverage determinations",
      "pluginType": "regex",
      "regexPattern": "(19[5-9][0-9]|20[0-9][0-9]|2[1-9][0-9][0-9])",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2023",
        "2015",
        "2008",
        "1995",
        "2020",
        "2010",
        "1987",
        "2024"
      ],
      "negativeContentExamples": [
        "23",
        "15",
        "1885",
        "1949",
        "3025",
        "2025-01-01",
        "ABC123",
        "20.23"
      ],
      "positiveHeaderExamples": [
        "registration_year",
        "vehicle_year",
        "reg_year",
        "vehicle_registration_year",
        "car_registration_year",
        "auto_reg_year",
        "original_registration_year",
        "first_registration_year"
      ],
      "negativeHeaderExamples": [
        "model_year",
        "registration_number",
        "manufacture_year",
        "production_year",
        "registration_date",
        "year_of_birth",
        "policy_year",
        "claim_year"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*registration.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_registration_year"
          ],
          "negativeExamples": [
            "vehicle_model_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*registration.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "registration_year"
          ],
          "negativeExamples": [
            "registration_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_year"
          ],
          "negativeExamples": [
            "model_year"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(reg|regis).*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "reg_year"
          ],
          "negativeExamples": [
            "reg_number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*year.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "year"
          ],
          "negativeExamples": [
            "quarter"
          ],
          "rationale": null
        }
      ],
      "priority": 3650,
      "explanation": "This semantic type identifies four-digit calendar years that represent when a vehicle was originally registered for road use. It's distinct from model year (when the vehicle was manufactured) and is crucial for insurance applications where the registration year affects premium calculations, depreciation schedules, and coverage eligibility. The pattern matches years from 1950 onwards to accommodate vintage vehicles while extending into future years for forward compatibility. This type is commonly found in automotive insurance databases, vehicle registration systems, and fleet management applications.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:47:46.577297"
    },
    {
      "resultType": "generated",
      "semanticType": "Power",
      "description": "Captures the mechanical power rating of a vehicle's engine measured in horsepower as a numeric value for risk assessment and insurance rating purposes",
      "pluginType": "regex",
      "regexPattern": "\\d{1,4}(?:\\.\\d{1,2})?\\s*(?:hp|HP|horsepower|Horsepower)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "150",
        "275.5",
        "420 hp",
        "185 HP",
        "310 horsepower",
        "95.2",
        "500",
        "67 Horsepower"
      ],
      "negativeContentExamples": [
        "2.5L",
        "V8",
        "3500 RPM",
        "250 kW",
        "1800cc",
        "Turbo",
        "Diesel",
        "AWD"
      ],
      "positiveHeaderExamples": [
        "engine_power_hp",
        "power_output",
        "horsepower",
        "engine_hp",
        "motor_power",
        "hp_rating",
        "power_hp",
        "engine_power"
      ],
      "negativeHeaderExamples": [
        "engine_size",
        "kilowatts",
        "engine_displacement",
        "torque",
        "rpm",
        "cylinder_count",
        "fuel_type",
        "transmission"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*engine.*power.*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_power_hp"
          ],
          "negativeExamples": [
            "engine_size_cc"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*power.*output.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "power_output"
          ],
          "negativeExamples": [
            "power_consumption"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*engine.*hp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_hp"
          ],
          "negativeExamples": [
            "engine_rpm"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*horsepower.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "horsepower"
          ],
          "negativeExamples": [
            "kilowatts"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*power.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "power"
          ],
          "negativeExamples": [
            "torque"
          ],
          "rationale": null
        }
      ],
      "priority": 3660,
      "explanation": "This semantic type identifies vehicle engine power ratings measured in horsepower, which is a critical metric for automotive insurance risk assessment. The pattern recognizes numeric values (with optional decimal places) that may be followed by horsepower indicators like \"hp\", \"HP\", or \"horsepower\". This measurement helps insurance companies evaluate vehicle performance capability and associated risk exposure, as higher horsepower typically correlates with increased accident risk and claim costs. The type distinguishes horsepower from other engine specifications like displacement (cc/L), torque, or power measured in kilowatts.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:48:19.370040"
    },
    {
      "resultType": "generated",
      "semanticType": "Cylinder_capacity",
      "description": "Engine displacement capacity measured in cubic centimeters (cc) or liters, representing the total volume of all engine cylinders used for insurance classification and vehicle rating calculations.",
      "pluginType": "regex",
      "regexPattern": "\\d{1,4}(?:\\.\\d{1,2})?(?:\\s*(?:cc|CC|l|L|liters?|litres?))?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1600",
        "2000cc",
        "3.5L",
        "1800 cc",
        "2.4",
        "5000CC",
        "1.6 liters",
        "4200"
      ],
      "negativeContentExamples": [
        "150hp",
        "V6",
        "Turbo",
        "12000",
        "Diesel",
        "Manual",
        "AWD"
      ],
      "positiveHeaderExamples": [
        "engine_displacement",
        "cylinder_capacity_cc",
        "displacement_cc",
        "engine_size",
        "motor_capacity",
        "cc_rating",
        "engine_volume",
        "displacement_liters"
      ],
      "negativeHeaderExamples": [
        "power_output",
        "capacity",
        "engine_type",
        "horsepower",
        "fuel_capacity",
        "seating_capacity",
        "cargo_capacity",
        "battery_capacity"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*engine.*displacement.*(?:cc|capacity|volume).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_displacement_cc"
          ],
          "negativeExamples": [
            "engine_power_output"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*cylinder.*capacity.*(?:cc|volume).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cylinder_capacity_cc"
          ],
          "negativeExamples": [
            "cylinder_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:engine|motor).*(?:size|volume|cc).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "engine_size_cc"
          ],
          "negativeExamples": [
            "engine_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*displacement.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "displacement"
          ],
          "negativeExamples": [
            "replacement"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(?:cc|cubic.*centimeter).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "cc"
          ],
          "negativeExamples": [
            "bcc"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*capacity.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "capacity"
          ],
          "negativeExamples": [
            "capability"
          ],
          "rationale": null
        }
      ],
      "priority": 3670,
      "explanation": "This semantic type identifies engine displacement measurements, which represent the total volume swept by all pistons in an engine's cylinders. Values are typically expressed in cubic centimeters (cc) or liters and range from small motorcycle engines (50cc) to large automotive engines (8000cc+). This measurement is crucial for insurance companies to classify vehicles by engine size for premium calculations, as larger displacement engines are often associated with higher performance and risk profiles. The pattern accommodates various formats including numeric values with or without units, supporting both metric measurements common in automotive specifications.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:49:03.720228"
    },
    {
      "resultType": "generated",
      "semanticType": "Value_vehicle",
      "description": "Represents the monetary worth of a vehicle as determined by market valuation methods at a specific point in time, used for insurance coverage amounts, deductibles, and total loss thresholds",
      "pluginType": "regex",
      "regexPattern": "(?i).*\\b(market|vehicle|auto|car|truck|motorcycle|boat|rv|recreational)\\s*(value|worth|valuation|appraisal)\\b.*",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [
        "$250",
        "$85,000,000",
        "$0",
        "-5000",
        "$999,999,999",
        "$50",
        "$500,000,000",
        "$25"
      ],
      "positiveHeaderExamples": [
        "market_value_2019",
        "vehicle_value",
        "auto_market_worth",
        "car_appraisal_value",
        "truck_valuation_amount",
        "motorcycle_market_value",
        "boat_appraised_value",
        "rv_insurance_value"
      ],
      "negativeHeaderExamples": [
        "purchase_price",
        "current_market_value",
        "loan_amount",
        "monthly_payment",
        "down_payment",
        "trade_in_value",
        "msrp_price",
        "dealer_cost"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*market.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_market_value_2024"
          ],
          "negativeExamples": [
            "vehicle_purchase_price"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(auto|car|truck|motorcycle).*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "auto_appraised_value"
          ],
          "negativeExamples": [
            "auto_loan_amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*market.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "market_value_2019"
          ],
          "negativeExamples": [
            "current_market_value"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(appraisal|appraised|valuation).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insurance_appraisal_amount"
          ],
          "negativeExamples": [
            "property_appraisal"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_value"
          ],
          "negativeExamples": [
            "vehicle_registration_fee"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*value.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "insured_value"
          ],
          "negativeExamples": [
            "policy_value"
          ],
          "rationale": null
        }
      ],
      "priority": 3680,
      "explanation": "This semantic type identifies vehicle market values used in insurance and financial contexts. It distinguishes between market valuations (which determine coverage and claims) versus other vehicle-related monetary amounts like purchase prices, loan amounts, or current market values. The type is designed to capture historical market valuations at specific points in time, which are critical for insurance underwriting and claims processing. The regex pattern focuses on combinations of vehicle/auto terms with value/worth/valuation terms, while excluding more general current market values or transaction prices.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:49:39.687743"
    },
    {
      "resultType": "generated",
      "semanticType": "N_doors",
      "description": "Records the number of entry doors available for passengers in a vehicle as an integer count, used for vehicle classification, insurance categorization, and risk assessment",
      "pluginType": "regex",
      "regexPattern": "[1-9]|1[0-9]",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "2",
        "4",
        "5",
        "3",
        "6",
        "1",
        "8",
        "7"
      ],
      "negativeContentExamples": [
        "0",
        "-1",
        "2.5",
        "four",
        "20",
        "automatic",
        "sliding",
        "N/A"
      ],
      "positiveHeaderExamples": [
        "number_of_doors",
        "doors_count",
        "vehicle_doors",
        "door_count",
        "num_doors",
        "passenger_doors",
        "entry_doors",
        "doors"
      ],
      "negativeHeaderExamples": [
        "seat_count",
        "door_type",
        "window_count",
        "door_material",
        "door_color",
        "engine_doors",
        "trunk_doors",
        "door_handles"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*door.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_door_count"
          ],
          "negativeExamples": [
            "vehicle_seat_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*number.*door.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "number_of_doors"
          ],
          "negativeExamples": [
            "number_of_seats"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*door.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "doors_count"
          ],
          "negativeExamples": [
            "seat_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*door.*num.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "door_num"
          ],
          "negativeExamples": [
            "door_type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*doors.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "doors"
          ],
          "negativeExamples": [
            "windows"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "count"
          ],
          "negativeExamples": [
            "type"
          ],
          "rationale": null
        }
      ],
      "priority": 3690,
      "explanation": "This semantic type identifies vehicle door count data, which represents the number of passenger entry doors on a vehicle as a small integer value (typically 1-19). This information is crucial for vehicle classification systems, insurance risk assessment, and automotive databases. The pattern matches single-digit numbers 1-9 and two-digit numbers 10-19, which covers the realistic range for passenger vehicle doors. Values like 0 are excluded as vehicles must have at least one door, and very high numbers are excluded as they would be unrealistic for standard passenger vehicles. This type helps distinguish door counts from other vehicle metrics like seat counts, engine specifications, or door characteristics.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:50:12.504461"
    },
    {
      "resultType": "generated",
      "semanticType": "Type_fuel",
      "description": "Standardized letter codes used to classify vehicle fuel systems and energy sources for insurance risk assessment and environmental considerations",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "G",
        "D",
        "E",
        "H",
        "P",
        "N",
        "B",
        "F",
        "C",
        "L",
        "M",
        "A",
        "S",
        "O"
      ],
      "backout": "[A-Z]{1,2}",
      "positiveContentExamples": [
        "G",
        "D",
        "E",
        "H",
        "P",
        "N",
        "B",
        "F"
      ],
      "negativeContentExamples": [
        "GAS",
        "DIESEL",
        "ELECTRIC",
        "HYBRID",
        "1",
        "01",
        "X",
        "Z"
      ],
      "positiveHeaderExamples": [
        "fuel_type",
        "energy_type",
        "vehicle_fuel_type",
        "auto_energy_source",
        "fuel_system_code",
        "energy_source_type",
        "car_fuel_type",
        "propulsion_type"
      ],
      "negativeHeaderExamples": [
        "fuel_consumption",
        "fuel_efficiency",
        "fuel_cost",
        "fuel_capacity",
        "energy_usage",
        "fuel_level",
        "mpg",
        "fuel_price"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*fuel.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_fuel_type"
          ],
          "negativeExamples": [
            "vehicle_fuel_consumption"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*auto.*energy.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "auto_energy_type"
          ],
          "negativeExamples": [
            "auto_energy_efficiency"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*fuel.*system.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel_system_code"
          ],
          "negativeExamples": [
            "fuel_system_pressure"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*energy.*source.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "energy_source"
          ],
          "negativeExamples": [
            "energy_consumption"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*fuel.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "fuel_type"
          ],
          "negativeExamples": [
            "fuel_efficiency"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "type"
          ],
          "negativeExamples": [
            "consumption"
          ],
          "rationale": null
        }
      ],
      "priority": 3700,
      "explanation": "This semantic type identifies standardized single-letter codes used in the automotive and insurance industries to classify vehicle fuel systems and energy sources. Common codes include G (Gasoline), D (Diesel), E (Electric), H (Hybrid), P (Propane), N (Natural Gas), B (Biodiesel), F (Flex Fuel), C (Compressed Natural Gas), L (Liquefied Petroleum Gas), M (Methanol), A (Alternative), S (Solar), and O (Other). These codes are critical for insurance risk assessment, environmental impact evaluation, and regulatory compliance. The type uses a finite list approach with a backout pattern to catch any single or double letter codes that might represent emerging fuel technologies or regional variations.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:50:48.520014"
    },
    {
      "resultType": "generated",
      "semanticType": "Length",
      "description": "Captures vehicle longitudinal measurements as numeric values representing total length specifications in various units (meters, feet, inches, etc.). Used for vehicle classification, parking assessments, and operational risk evaluations.",
      "pluginType": "regex",
      "regexPattern": "\\d+(?:\\.\\d+)?\\s*(?:m|meter|meters|ft|feet|foot|in|inch|inches|cm|centimeter|centimeters|mm|millimeter|millimeters)?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "4.5",
        "15.2 m",
        "18 feet",
        "5.8 meters",
        "12.5",
        "220 inches",
        "4800 mm",
        "16.3 ft"
      ],
      "negativeContentExamples": [
        "ABC123",
        "2023-01-15",
        "john.doe@email.com",
        "Red",
        "Toyota Camry",
        "-5.2",
        "N/A",
        "Unknown"
      ],
      "positiveHeaderExamples": [
        "vehicle_length_m",
        "length_meters",
        "car_length_ft",
        "auto_length",
        "vehicle_len_cm",
        "truck_length_inches",
        "overall_length",
        "body_length_mm"
      ],
      "negativeHeaderExamples": [
        "width_meters",
        "height_meters",
        "vehicle_weight",
        "car_model",
        "engine_size",
        "fuel_capacity",
        "wheelbase",
        "ground_clearance"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_length_m"
          ],
          "negativeExamples": [
            "vehicle_width_m"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*car.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "car_length_meters"
          ],
          "negativeExamples": [
            "car_height_meters"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*auto.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "auto_length_ft"
          ],
          "negativeExamples": [
            "auto_width_ft"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*(m|meter|meters|ft|feet|cm).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "length_meters"
          ],
          "negativeExamples": [
            "width_meters"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*len.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "len_m"
          ],
          "negativeExamples": [
            "wid_m"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "length"
          ],
          "negativeExamples": [
            "width"
          ],
          "rationale": null
        }
      ],
      "priority": 3710,
      "explanation": "The VEHICLE.LENGTH semantic type identifies numeric measurements representing the longitudinal dimension of vehicles. This type is crucial for automotive databases, fleet management systems, and transportation logistics where vehicle dimensions impact parking space allocation, garage clearances, shipping requirements, and regulatory compliance. The pattern accommodates various measurement units commonly used in different regions and contexts, from metric (meters, centimeters, millimeters) to imperial (feet, inches) systems. The regex pattern captures both whole numbers and decimals, with optional unit specifications, making it flexible enough to handle diverse data formats while maintaining specificity for vehicle length measurements.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:51:22.081469"
    },
    {
      "resultType": "generated",
      "semanticType": "Weight",
      "description": "Vehicle weight specification as a numeric measurement representing the total mass for classification and rating purposes, typically measured in kilograms or pounds",
      "pluginType": "regex",
      "regexPattern": "\\d{3,5}(?:\\.\\d{1,2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1450",
        "2850",
        "1750.5",
        "3200",
        "1125",
        "2450.25",
        "4500",
        "1890"
      ],
      "negativeContentExamples": [
        "85",
        "12.5",
        "150000",
        "25",
        "50"
      ],
      "positiveHeaderExamples": [
        "vehicle_weight_kg",
        "weight_kg",
        "total_vehicle_weight",
        "car_weight",
        "vehicle_mass",
        "auto_weight",
        "vehicle_wt",
        "gross_vehicle_weight"
      ],
      "negativeHeaderExamples": [
        "payload_weight",
        "empty_weight",
        "cargo_weight",
        "trailer_weight",
        "engine_weight",
        "passenger_weight",
        "fuel_weight",
        "towing_weight"
      ],
      "confidenceThreshold": 88.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*vehicle.*weight.*kg.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_weight_kg"
          ],
          "negativeExamples": [
            "payload_weight_kg"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*total.*vehicle.*weight.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "total_vehicle_weight"
          ],
          "negativeExamples": [
            "total_cargo_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*mass.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_mass"
          ],
          "negativeExamples": [
            "engine_mass"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*car.*weight.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "car_weight"
          ],
          "negativeExamples": [
            "car_part_weight"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*vehicle.*wt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "vehicle_wt"
          ],
          "negativeExamples": [
            "trailer_wt"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*weight.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "weight_kg"
          ],
          "negativeExamples": [
            "payload_weight"
          ],
          "rationale": null
        }
      ],
      "priority": 3720,
      "explanation": "This semantic type identifies vehicle weight measurements used for classification, insurance rating, and regulatory purposes. It captures the total mass of vehicles typically ranging from 1000-5000 kg for passenger cars, with some allowance for decimal precision. The pattern excludes very light weights (like individual components) and extremely heavy weights (like commercial trucks) to focus on standard passenger vehicle classifications. This type is crucial for automotive databases, insurance systems, and vehicle registration records where accurate weight classification affects risk assessment and regulatory compliance.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P3",
      "generated_at": "2025-08-08T09:51:58.369579"
    }
  ]
}