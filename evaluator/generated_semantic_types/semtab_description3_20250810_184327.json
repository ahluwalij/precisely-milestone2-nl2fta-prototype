[
  {
    "resultType": "generated",
    "semanticType": "value",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-]+\\b( [A-Za-z][A-Za-z0-9'\u2019\\-]+\\b){1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9430,
    "headerPatterns": [
      {
        "regExp": "(?i).*(long|detailed).*description.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "Long Description"
        ],
        "negativeExamples": [
          "Short Title"
        ]
      },
      {
        "regExp": "(?i).*(free.?form|freeform).*text.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Freeform Text"
        ],
        "negativeExamples": [
          "Text Length"
        ]
      },
      {
        "regExp": "(?i).*(customer|user|reviewer).*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Reviewer Comments"
        ],
        "negativeExamples": [
          "Reviewer ID"
        ]
      },
      {
        "regExp": "(?i).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Invoice Date"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer requested expedited shipping.",
      "Please deliver to the side door.",
      "Package arrived with minor dents.",
      "Item was returned due to size.",
      "Works as expected after update.",
      "Color slightly faded over time.",
      "Include gift receipt if possible.",
      "Handle with care; fragile."
    ],
    "negativeContentExamples": [
      "OK",
      "A12345",
      "2024-03-15",
      "$19.99",
      "support@example.com",
      "Y",
      "Blue/Green",
      "Good\u2014works"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Freeform Text",
      "Reviewer Comments",
      "Additional Notes",
      "User Remarks"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Zip Code",
      "Phone Number",
      "Country",
      "Status",
      "Invoice Number"
    ],
    "explanation": "Use this semantic type to detect columns intended for free-form, human-readable text such as comments, descriptions, and notes. It favors fields containing multiple natural-language words, minimizing false positives on codes, dates, or numeric identifiers. The header patterns prioritize common labels for open-ended text, with a final primitive pattern for generic 'text' columns. Threshold and priority are set high to avoid overriding more specific semantic types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:02.514186"
  },
  {
    "resultType": "generated",
    "semanticType": "area",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9][A-Za-z0-9'-]+[.,;:?!]?( [A-Za-z0-9][A-Za-z0-9'-]+[.,;:?!]?){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9450,
    "headerPatterns": [
      {
        "regExp": "(?i).*(long[ _-]?description|detailed[ _-]?description|full[ _-]?description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "detailed_description"
        ],
        "negativeExamples": [
          "short_description"
        ]
      },
      {
        "regExp": "(?i).*(user[ _-]?comments|public[ _-]?comments|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "user_comments"
        ],
        "negativeExamples": [
          "comment_id"
        ]
      },
      {
        "regExp": "(?i).*(internal[ _-]?notes|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "internal_notes"
        ],
        "negativeExamples": [
          "notebook_ref"
        ]
      },
      {
        "regExp": "(?i).*(details|remarks|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "summaries_count"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "message"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver to the back entrance after 5 pm.",
      "Customer reported intermittent failures during startup.",
      "Handle with care; fragile glass items inside.",
      "The apartment faces the park and has lots of light.",
      "Payment will be processed within five business days.",
      "Project scope includes data ingestion, cleanup, and reporting.",
      "Note: packaging may vary between batches.",
      "The solution should be scalable and easy to maintain over time."
    ],
    "negativeContentExamples": [
      "High priority",
      "OK",
      "N/A",
      "12345",
      "A quick",
      "2024-03-15",
      "user@example.com",
      "ID 98765"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Detailed Description",
      "User Comments",
      "Internal Notes",
      "Remarks",
      "Free Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status",
      "Quantity",
      "Product Code",
      "Amount",
      "Phone Number"
    ],
    "explanation": "Area represents free-form natural language text fields used for descriptions, comments, notes, and similar narrative content. It is intentionally broad and is best applied when no strict structural format exists, and the field typically contains multiple words or sentences.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:03.727876"
  },
  {
    "resultType": "generated",
    "semanticType": "id",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier may include letters, numbers, and common separators such as hyphen, underscore, dot, or colon, and is typically non-whitespace and single-token.",
    "pluginType": "regex",
    "regexPattern": "\\b(?=[A-Za-z0-9._:-]*[A-Za-z])[A-Za-z0-9][A-Za-z0-9._:-]{3,62}[A-Za-z0-9]\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9050,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unique|record|entity|customer|object).*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Unique ID"
        ],
        "negativeExamples": [
          "Description"
        ]
      },
      {
        "regExp": "(?i).*(system|internal|global).*identifier.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Global Identifier"
        ],
        "negativeExamples": [
          "Name"
        ]
      },
      {
        "regExp": "(?i).*identifier.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Identifier"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*(uid|uuid|rid|eid|objid).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "UID"
        ],
        "negativeExamples": [
          "Code"
        ]
      },
      {
        "regExp": "(?i).*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ID"
        ],
        "negativeExamples": [
          "Status"
        ]
      }
    ],
    "positiveContentExamples": [
      "A12B-34",
      "usr_0001",
      "INV.2024-09",
      "device:AX9_77",
      "X9Y8Z7",
      "batch_2025-08",
      "REF-ABC123",
      "3F2504E0-4F89-11D3-9A0C-0305E82C3301"
    ],
    "negativeContentExamples": [
      "123456789",
      "INV 2024-09",
      "user@domain",
      "-ABC123",
      "ABC123-",
      "A__",
      "ABC_123#",
      "2024-08-11"
    ],
    "positiveHeaderExamples": [
      "ID",
      "Identifier",
      "Unique ID",
      "Record ID",
      "Customer ID",
      "Global Identifier",
      "UID",
      "Internal ID"
    ],
    "negativeHeaderExamples": [
      "Name",
      "Description",
      "Date",
      "Code",
      "Status",
      "Reference",
      "Email",
      "Amount"
    ],
    "explanation": "A generic identifier suitable for columns that hold non-whitespace, single-token IDs that mix letters and digits and may use common separators (hyphen, underscore, dot, colon). It avoids overly permissive matches by requiring at least one letter and a minimum length, helping distinguish IDs from plain numeric values or dates.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:08.184521"
  },
  {
    "resultType": "generated",
    "semanticType": "district",
    "description": "Identifies official Portuguese district names used in administrative contexts within Portugal. Values are proper-noun strings in Portuguese, with correct spelling and diacritics, and without abbreviations or extra punctuation. The set is finite and limited to the 18 mainland districts.",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "AVEIRO",
      "BEJA",
      "BRAGA",
      "BRAGAN\u00c7A",
      "CASTELO BRANCO",
      "COIMBRA",
      "\u00c9VORA",
      "FARO",
      "GUARDA",
      "LEIRIA",
      "LISBOA",
      "PORTALEGRE",
      "PORTO",
      "SANTAR\u00c9M",
      "SET\u00daBAL",
      "VIANA DO CASTELO",
      "VILA REAL",
      "VISEU"
    ],
    "backout": "^[A-Z\u00c1\u00c9\u00cd\u00d3\u00da\u00c2\u00ca\u00d4\u00c3\u00d5\u00c7 ]{4,20}$",
    "confidenceThreshold": 95,
    "priority": 9410,
    "headerPatterns": [
      {
        "regExp": "(?i).*portuguese.*district.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Portuguese District"
        ],
        "negativeExamples": [
          "Country"
        ]
      },
      {
        "regExp": "(?i).*distrito.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Distrito"
        ],
        "negativeExamples": [
          "City"
        ]
      },
      {
        "regExp": "(?i).*administrative.*district.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Administrative District"
        ],
        "negativeExamples": [
          "Administrative Region"
        ]
      },
      {
        "regExp": "(?i).*(dist|distr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "dist"
        ],
        "negativeExamples": [
          "dst"
        ]
      },
      {
        "regExp": "(?i).*district.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "District"
        ],
        "negativeExamples": [
          "Region"
        ]
      }
    ],
    "positiveContentExamples": [
      "Lisboa",
      "Porto",
      "Braga",
      "Viana do Castelo",
      "Castelo Branco",
      "Santar\u00e9m",
      "Set\u00fabal",
      "Viseu"
    ],
    "negativeContentExamples": [
      "Lisbon",
      "Setubal",
      "Braganca",
      "Viana do Castello",
      "Madeira",
      "Distrito de Aveiro",
      "Porto District",
      "Aveiro-PT"
    ],
    "positiveHeaderExamples": [
      "Distrito",
      "District",
      "Portuguese District",
      "Administrative District",
      "District Name",
      "Dist"
    ],
    "negativeHeaderExamples": [
      "Country",
      "Region",
      "City",
      "Province",
      "Municipality",
      "Parish"
    ],
    "explanation": "This type recognizes the 18 official mainland Portuguese district names in Portuguese. It is implemented as a finite list for high precision, with a backout pattern that accepts uppercase letters (including Portuguese diacritics) and spaces within reasonable length bounds. It should be used to classify columns containing district names like Lisboa or Castelo Branco, and avoid matching English translations, abbreviations, misspellings, or strings containing additional qualifiers such as 'District' or 'Distrito de'.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:10.502433"
  },
  {
    "resultType": "generated",
    "semanticType": "date",
    "description": "Unix timestamp values expressed as an integer count of seconds since the Unix epoch (1970-01-01T00:00:00Z). Values contain only digits with no formatting, separators, or textual date components, and typically appear as 9 or 10 digits.",
    "pluginType": "regex",
    "regexPattern": "\\b([1-9][0-9]{8,9}|0)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9060,
    "headerPatterns": [
      {
        "regExp": "(?i).*unix.*timestamp.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Unix Timestamp"
        ],
        "negativeExamples": [
          "Unix Sec"
        ]
      },
      {
        "regExp": "(?i).*epoch.*time.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Epoch Time"
        ],
        "negativeExamples": [
          "Time"
        ]
      },
      {
        "regExp": "(?i).*epoch.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Epoch Seconds"
        ],
        "negativeExamples": [
          "Milliseconds"
        ]
      },
      {
        "regExp": "(?i).*\\bts\\b.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "ts"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Timestamp"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "1700000000",
      "1625079600",
      "946684800",
      "1234567890",
      "2147483647",
      "915148800",
      "631152000",
      "0"
    ],
    "negativeContentExamples": [
      "1700000000000",
      "1700000000.0",
      "1,700,000,000",
      "0000000001",
      "-1700000000",
      "17000000",
      "99999999999",
      "1700000000Z"
    ],
    "positiveHeaderExamples": [
      "Timestamp",
      "Unix Timestamp",
      "Epoch Time",
      "UNIX_TS",
      "Epoch Seconds",
      "ts",
      "Unix Sec",
      "Epoch Second"
    ],
    "negativeHeaderExamples": [
      "Date",
      "Time",
      "Formatted Date",
      "Datetime",
      "Milliseconds",
      "Created Time",
      "ISO Date",
      "Clock Time"
    ],
    "explanation": "This semantic type detects Unix epoch timestamps represented in whole seconds, ensuring only plain integer values with 9\u201310 digits (or 0) are accepted. It intentionally excludes millisecond or microsecond epochs, formatted dates, decimals, negative values, and numbers with separators. Use this for logs, event streams, and telemetry where timestamps are stored as integer seconds.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:10.910618"
  },
  {
    "resultType": "generated",
    "semanticType": "field",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[\\t ]+[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9100,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|user|case|item).*(notes|comments|description|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(detailed|long|free|general).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "general_code"
        ]
      },
      {
        "regExp": "(?i).*(\\bdesc\\b|\\bcmts\\b|\\bcmt\\b|\\btxt\\b|\\bremarks?\\b|\\bmemo\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "desc"
        ],
        "negativeExamples": [
          "discount"
        ]
      },
      {
        "regExp": "(?i).*(remarks|commentary|memo).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "remark_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please provide detailed feedback on the new layout.",
      "Customer reported intermittent issues after the update.",
      "High-priority items include documentation and testing.",
      "Follow-up scheduled for next Wednesday afternoon.",
      "Initial draft looks promising; needs a security review.",
      "This field may contain multiple sentences and free-form notes.",
      "Overall experience was positive, but performance could improve.",
      "Provide any additional context or remarks here."
    ],
    "negativeContentExamples": [
      "OK",
      "123456",
      "2024-07-31",
      "$49.99",
      "ID-99821",
      "A1B2C3",
      "N/A",
      "Budget: $5000"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Customer Notes",
      "Free Text",
      "Remarks",
      "Memo"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status Code",
      "Zip Code",
      "Quantity",
      "Customer ID",
      "Start Date"
    ],
    "explanation": "Open-ended field values typically consist of free-form natural language, often containing multiple words and sentences, rather than structured codes or numeric formats. This type helps identify columns intended for descriptive context, annotations, and narrative content to guide downstream NLP or summarization workflows while avoiding collision with specific formatted types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:12.345591"
  },
  {
    "resultType": "generated",
    "semanticType": "result",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']+\\b[ ,;:!?\\-]+\\b[A-Za-z][A-Za-z']+\\b[ ,;:!?\\-]+\\b[A-Za-z][A-Za-z']+\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9360,
    "headerPatterns": [
      {
        "regExp": "(?i).*customer.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_description"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*order.*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_comments"
        ],
        "negativeExamples": [
          "order_date"
        ]
      },
      {
        "regExp": "(?i).*case.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_notes"
        ],
        "negativeExamples": [
          "case_number"
        ]
      },
      {
        "regExp": "(?i).*(description|desc|remarks|comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_remarks"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_text"
        ],
        "negativeExamples": [
          "reference_code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Package arrived earlier than expected.",
      "Customer reported intermittent connectivity issues.",
      "Please deliver to the back door after 5 pm.",
      "The results were inconclusive due to limited sample size.",
      "Requires manager approval before shipment.",
      "User notes indicate prior returns on this item.",
      "Thank you for your prompt assistance and follow-up.",
      "This item shows minor wear consistent with normal use."
    ],
    "negativeContentExamples": [
      "Great product!",
      "Pending review",
      "N/A",
      "OK",
      "12345",
      "Yes",
      "Approved",
      "See notes"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Customer Description",
      "Order Comments",
      "Case Notes",
      "Product Remarks",
      "Additional Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status Code",
      "Quantity",
      "Email",
      "Phone Number",
      "SKU"
    ],
    "explanation": "Result is a broad free-text semantic type intended for columns that store unstructured natural language content such as descriptions, notes, and comments. The value pattern favors multi-word natural language with common separators to reduce accidental matches to short labels or codes. High threshold and priority mitigate conflicts with more specific semantic types while still enabling recognition of descriptive fields across datasets.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:12.370014"
  },
  {
    "resultType": "generated",
    "semanticType": "domain",
    "description": "This type captures web addresses and resource locators used to identify and access content across networks including websites, files, and services. The values represent complete URL strings including protocol schemes, domain names, paths, and optional parameters following standardized URI formatting conventions.",
    "pluginType": "regex",
    "regexPattern": "\\b(https|http|ftp|sftp|ws|wss|file)://([A-Za-z0-9._%+-]+(:[A-Za-z0-9._%+-]+)?@)?((([A-Za-z0-9-]+\\.)+[A-Za-z]{2,})|((\\d{1,3}\\.){3}\\d{1,3})|localhost)(:\\d{2,5})?(/[A-Za-z0-9._~!$&'()*+,;=:@%/-]*)?(\\?[A-Za-z0-9._~!$&'()*+,;=:@%/?-]*)?(#[A-Za-z0-9._~!$&'()*+,;=:@%/?-]*)?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9340,
    "headerPatterns": [
      {
        "regExp": "(?i).*(website).*(url|link|address).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Website URL"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      },
      {
        "regExp": "(?i).*(web).*(address).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "Web Address"
        ],
        "negativeExamples": [
          "Domain Name"
        ]
      },
      {
        "regExp": "(?i).*(web).*site.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Website"
        ],
        "negativeExamples": [
          "File Path"
        ]
      },
      {
        "regExp": "(?i).*(uri|resource).*(locator).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Resource Locator"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      },
      {
        "regExp": "(?i).*url.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "URL"
        ],
        "negativeExamples": [
          "Domain Name"
        ]
      }
    ],
    "positiveContentExamples": [
      "https://www.example.com",
      "http://example.org/index.html",
      "https://sub.domain.co.uk/path/to/page?query=1#section",
      "ftp://ftp.example.net/files/archive.zip",
      "sftp://user:pass@host.example.com:22/home/user",
      "wss://api.example.com/socket",
      "http://localhost:8080/status",
      "https://127.0.0.1/api/v1"
    ],
    "negativeContentExamples": [
      "www.example.com",
      "https//example.com",
      "http:/example.com",
      "https://example",
      "ssh://example.com",
      "file:///etc/hosts",
      "https://example..com",
      "mailto:user@example.com"
    ],
    "positiveHeaderExamples": [
      "URL",
      "Website",
      "Web Address",
      "Website URL",
      "Resource Locator",
      "Web Link"
    ],
    "negativeHeaderExamples": [
      "Domain Name",
      "Email Address",
      "File Path",
      "IP Address",
      "Folder Path",
      "Host"
    ],
    "explanation": "Values matching this type are full URLs/URIs that include a scheme (such as http, https, ftp, sftp, ws, wss, file), a valid host (domain, IPv4, or localhost), optional userinfo, optional port, and optional path/query/fragment. It is useful for detecting fields that store links to web pages, APIs, file resources exposed over network protocols, or service endpoints.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:14.649392"
  },
  {
    "resultType": "generated",
    "semanticType": "cost",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}( [A-Za-z][A-Za-z0-9',\\-&/()]{1,}){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9420,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|order|customer|internal).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Product Description"
        ],
        "negativeExamples": [
          "Order Date"
        ]
      },
      {
        "regExp": "(?i).*(detailed|general|summary|additional).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Detailed Description"
        ],
        "negativeExamples": [
          "Summary Amount"
        ]
      },
      {
        "regExp": "(?i).*(free[ _-]?text|long[ _-]?text|text[ _-]?body|body[ _-]?text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Free Text"
        ],
        "negativeExamples": [
          "Text Code"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|rmks|remark|remarks|note|notes|cmt|cmts|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "Code"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Price"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please provide a detailed overview of the project scope.",
      "Customer reported intermittent errors during login.",
      "This section outlines key risks and mitigation steps.",
      "Item arrived damaged; packaging was torn on one side.",
      "Use this field to capture any special handling instructions.",
      "Delivery was delayed due to severe weather conditions.",
      "Include justification for budget changes and approvals.",
      "Add any additional context relevant to the assessment."
    ],
    "negativeContentExamples": [
      "Pending",
      "Needs review",
      "2024-05-10",
      "$45.00",
      "ID12345",
      "A12-9B",
      "OK",
      "N/A"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "Internal Notes",
      "General Comments",
      "Free Text",
      "Detailed Description"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status",
      "Quantity",
      "SKU",
      "Email",
      "Code"
    ],
    "explanation": "A broad, free-text semantic type used to identify columns capturing human-readable descriptions, notes, comments, or other narrative content. Detection relies primarily on descriptive header terminology and the presence of multi-word, natural language content rather than strict formats.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:15.208874"
  },
  {
    "resultType": "generated",
    "semanticType": "location",
    "description": "This coordinate pair consists of two decimal numbers separated by a comma and optional space, representing latitude first followed by longitude. The format follows standard GPS conventions with positive values for north/east and negative values for south/west hemispheres.",
    "pluginType": "regex",
    "regexPattern": "\\b-?((90(\\.0+)?)|([0-8]?\\d(\\.\\d+)?))\\s*,\\s*-?((180(\\.0+)?)|(1[0-7]\\d(\\.\\d+)?)|(\\d{1,2}(\\.\\d+)?))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9110,
    "headerPatterns": [
      {
        "regExp": "(?i).*latitude.*longitude.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Latitude Longitude"
        ],
        "negativeExamples": [
          "Latitude"
        ]
      },
      {
        "regExp": "(?i).*lat.*long.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Lat Long"
        ],
        "negativeExamples": [
          "Longitude"
        ]
      },
      {
        "regExp": "(?i).*coordinate.*pair.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Coordinate Pair"
        ],
        "negativeExamples": [
          "Coordinates"
        ]
      },
      {
        "regExp": "(?i).*gps.*coordinates.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "GPS Coordinates"
        ],
        "negativeExamples": [
          "GPS Time"
        ]
      },
      {
        "regExp": "(?i).*geo.*coordinates.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Geo Coordinates"
        ],
        "negativeExamples": [
          "Geography"
        ]
      },
      {
        "regExp": "(?i).*coordinates.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Coordinates"
        ],
        "negativeExamples": [
          "Address"
        ]
      }
    ],
    "positiveContentExamples": [
      "37.7749, -122.4194",
      "-33.8688, 151.2093",
      "0, 0",
      "48.8566, 2.3522",
      "-90, 0",
      "45, -73.5",
      "12.345678, -98.765432",
      "23.5, 180"
    ],
    "negativeContentExamples": [
      "91, -73.5",
      "-33.8688 151.2093",
      "45.0, -181",
      "N45.0, -73.5",
      "45.0,-73.5W",
      "45.0, -73.5, 10.0",
      "48.8566; 2.3522",
      "90.0001, 0"
    ],
    "positiveHeaderExamples": [
      "Coordinates",
      "Lat Long",
      "GPS Coordinates",
      "Coordinate Pair",
      "Geo Coordinates",
      "Location (lat,lon)",
      "Latitude Longitude"
    ],
    "negativeHeaderExamples": [
      "Latitude",
      "Longitude",
      "Address",
      "City",
      "Zip Code",
      "GPS Time",
      "Geography"
    ],
    "explanation": "Detects decimal latitude,longitude pairs separated by a comma, enforcing valid ranges for latitude (-90 to 90) and longitude (-180 to 180). Useful for identifying geospatial coordinate columns for mapping, geocoding, and spatial analysis workflows.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:16.133255"
  },
  {
    "resultType": "generated",
    "semanticType": "start",
    "description": "Unix timestamp values expressed as whole seconds since the Unix epoch (1970-01-01T00:00:00Z). Values are plain, unformatted integers with no separators or textual components, typically 9\u201310 digits representing second-level precision.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9]\\d{8,9}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 9380,
    "headerPatterns": [
      {
        "regExp": "(?i).*unix.*timestamp.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Unix Timestamp"
        ],
        "negativeExamples": [
          "Formatted Date"
        ]
      },
      {
        "regExp": "(?i).*epoch.*time.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Epoch Time"
        ],
        "negativeExamples": [
          "Time"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "timestamp_sec"
        ],
        "negativeExamples": [
          "timestamp_ms"
        ]
      },
      {
        "regExp": "(?i).*(unix|epoch).*(sec|secs|s|ts).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "unix_ts"
        ],
        "negativeExamples": [
          "epoch_millis"
        ]
      },
      {
        "regExp": "(?i).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "number"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "1609459200",
      "1700000000",
      "1234567890",
      "2147483647",
      "946684800",
      "978307200",
      "1104537600",
      "1451606400"
    ],
    "negativeContentExamples": [
      "1609459200000",
      "1700000000000",
      "1609459200.0",
      "1 609 459 200",
      "1609-459200",
      "16094592OO",
      "12345678",
      "12345678901"
    ],
    "positiveHeaderExamples": [
      "Timestamp",
      "Unix Timestamp",
      "Epoch Time",
      "epoch_seconds",
      "timestamp_sec",
      "unix_ts",
      "epoch_s",
      "unix_epoch_seconds"
    ],
    "negativeHeaderExamples": [
      "Date",
      "Time",
      "Formatted Date",
      "timestamp_ms",
      "datetime",
      "epoch_millis",
      "file_timestamp",
      "age"
    ],
    "explanation": "This semantic type identifies integer Unix timestamps in seconds precision. It expects 9\u201310 digit non-negative integers with no separators, units, or formatting. The pattern intentionally excludes millisecond (13-digit) values, decimals, ISO date strings, or numbers containing spaces or punctuation.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:16.133427"
  },
  {
    "resultType": "generated",
    "semanticType": "frequency",
    "description": "Captures open-ended free-text fields containing human-readable content such as sentences, phrases, or short paragraphs. Values are natural language strings with variable length and no predefined structure or constraints.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ ,.;:!?\\-]+\\b[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9250,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_id"
        ]
      },
      {
        "regExp": "(?i).*(customer|user).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(user|customer).*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "user_comments"
        ],
        "negativeExamples": [
          "customer_status"
        ]
      },
      {
        "regExp": "(?i).*(desc|remarks|cmt|cmts).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "price"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported intermittent lag during checkout.",
      "Please deliver to the side entrance after 5 pm.",
      "High priority order; contact warehouse before shipping.",
      "Item arrived with minor scratches on the back panel.",
      "No issues observed during initial setup.",
      "Follow-up required to verify billing address.",
      "Great service and very helpful support team.",
      "Partially refunded due to packaging damage."
    ],
    "negativeContentExamples": [
      "Unknown",
      "N/A",
      "12345",
      "03/21/2024",
      "A1B2C3",
      "john.doe@example.com",
      "http://example.com/page",
      "ID-00921"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Product Description",
      "Customer Notes",
      "User Comments",
      "Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "Order Number",
      "SKU",
      "Email",
      "URL"
    ],
    "explanation": "This semantic type identifies free-form textual fields commonly used for descriptions, notes, or comments where content is natural language without a fixed format. The detection pattern requires at least two alphabetic words, reducing false positives from codes, IDs, dates, and URLs. Use this to classify columns that hold narrative context or qualitative feedback rather than structured identifiers or numeric values.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:17.155985"
  },
  {
    "resultType": "generated",
    "semanticType": "description",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Za-z]{2,})([\\s,;:.!?\"'()/-]+[A-Za-z]{2,}){3,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9010,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|order)[ _-]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(customer|order|case|ticket)[ _-]*(notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ticket_notes"
        ],
        "negativeExamples": [
          "ticket_number"
        ]
      },
      {
        "regExp": "(?i).*(long|detailed|free[ _-]*form)[ _-]*(description|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "long_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|details|remark|comment|note)s?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "price_total"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer requested expedited shipping after initial delay.",
      "Payment received; order will ship within three business days.",
      "Item arrived damaged and was returned for a full refund.",
      "This plan includes unlimited data with no annual contract.",
      "Please contact support if the issue persists after restart.",
      "Color may vary slightly due to monitor calibration differences.",
      "Meeting rescheduled to next week pending manager approval.",
      "Includes charger, cable, and protective carrying case."
    ],
    "negativeContentExamples": [
      "Short note",
      "See attachment",
      "Invoice 12345",
      "Shipped 2024-06-01",
      "Pending approval",
      "Brief summary",
      "A-12345",
      "12345"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Product Description",
      "Customer Notes",
      "Order Comments",
      "Details"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "Status",
      "Code",
      "Number",
      "Email"
    ],
    "explanation": "This semantic type identifies free-form descriptive text intended for human reading, such as sentences and paragraphs. The value pattern requires multiple alphabetic word tokens to distinguish natural language text from short labels, codes, or identifiers. High threshold and broad header coverage minimize false positives while keeping this type distinct from structured fields like IDs, dates, or numeric amounts.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:17.157580"
  },
  {
    "resultType": "generated",
    "semanticType": "topic",
    "description": "Open-ended natural language text intended for human reading, including sentences, phrases, and paragraphs. Typical values contain multiple words with spaces, and may include punctuation such as commas, hyphens, and apostrophes.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-]* [A-Za-z][A-Za-z0-9'\u2019\\-]*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9460,
    "headerPatterns": [
      {
        "regExp": "(?i).*(issue|ticket|case|review|meeting|call).*(description|notes|comments|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_description"
        ],
        "negativeExamples": [
          "invoice_number"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Notes"
        ]
      },
      {
        "regExp": "(?i).*comment.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Comments"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "ID"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmts|cmt|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "unit_price"
        ]
      }
    ],
    "positiveContentExamples": [
      "Quarterly results overview",
      "Customer feedback and insights",
      "Steps to reproduce the issue",
      "Meeting agenda and objectives",
      "Notes from field inspection",
      "Marketing plan draft",
      "Project status update",
      "Terms and conditions summary"
    ],
    "negativeContentExamples": [
      "Marketing",
      "2023-04-05",
      "A12-45",
      "Hello,world",
      "10 items",
      "status:open",
      "product_code",
      "support@example.com"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "issue_description",
      "customer_notes",
      "review_comments",
      "free_text",
      "topic_text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "SKU",
      "Amount",
      "Postal Code",
      "Email",
      "Phone"
    ],
    "explanation": "This semantic type identifies free-form, human-readable text fields that typically contain multiple words and natural language. It is useful for columns like descriptions, notes, and comments where content is unstructured and variable in length.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:17.196992"
  },
  {
    "resultType": "generated",
    "semanticType": "owner",
    "description": "Full personal names in Western order: a given name followed by a family name, separated by a single space. No middle names, initials, titles, suffixes, or additional components are included. Names are expected to be alphabetic with leading uppercase followed by lowercase letters for each part.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{1,24} [A-Z][a-z]{1,24}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9260,
    "headerPatterns": [
      {
        "regExp": "(?i).*owner.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Owner Full Name"
        ],
        "negativeExamples": [
          "First Name"
        ]
      },
      {
        "regExp": "(?i).*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Full Name"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      },
      {
        "regExp": "(?i).*owner.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Owner Name"
        ],
        "negativeExamples": [
          "Account Name"
        ]
      },
      {
        "regExp": "(?i).*person.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Person Name"
        ],
        "negativeExamples": [
          "Company Name"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Account Number"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Maria Garcia",
      "Peter Nguyen",
      "Laura Johnson",
      "David Brown",
      "Emily Davis",
      "Robert Wilson",
      "Olivia Martin"
    ],
    "negativeContentExamples": [
      "John A Smith",
      "John  Smith",
      "john smith",
      "Smith John",
      "John",
      "John Smith Jr",
      "J Smith",
      "Smith, John"
    ],
    "positiveHeaderExamples": [
      "Full Name",
      "Name",
      "Person Name",
      "Owner Name",
      "Owner Full Name",
      "Contact Name",
      "Customer Full Name",
      "Account Holder Name"
    ],
    "negativeHeaderExamples": [
      "First Name",
      "Last Name",
      "Email Address",
      "Username",
      "Company Name",
      "Account Name",
      "Display Name",
      "Given Name"
    ],
    "explanation": "This semantic type identifies full personal names that consist of exactly two tokens: first (given) name followed by last (family) name, separated by a single space. It excludes records containing titles, suffixes, middle names, initials, or additional components. Use this type for fields storing a single concatenated first-and-last personal name, particularly for owner or contact fields where a concise two-part name is expected.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:18.794582"
  },
  {
    "resultType": "generated",
    "semanticType": "rank",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b[a-z]{3,}\\b(\\s+\\b[a-z]{3,}\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9000,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|client|user).*(comments|notes|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Comments"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(order|issue|ticket|case).*(description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Order Description"
        ],
        "negativeExamples": [
          "Order Date"
        ]
      },
      {
        "regExp": "(?i).*(comments|comment|notes|remarks|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Price"
        ]
      },
      {
        "regExp": "(?i).*(desc|narrative|free[ _]?text|text[ _]?body).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Free Text"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text Body"
        ],
        "negativeExamples": [
          "ID"
        ]
      }
    ],
    "positiveContentExamples": [
      "Issue resolved after reboot",
      "Customer reported intermittent failure",
      "Requires follow up by Friday",
      "Package arrived in good condition",
      "Spoke with client about billing",
      "The system returned an unexpected error",
      "Leave at the front desk",
      "Payment pending due to verification"
    ],
    "negativeContentExamples": [
      "OK",
      "N/A",
      "Approved",
      "High priority",
      "2023-10-05 meeting",
      "SKU-AB12",
      "12345",
      "on hold"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Customer Comments",
      "Order Description",
      "Free Text",
      "Text Body"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "Status",
      "SKU",
      "Order ID"
    ],
    "explanation": "This broad, free-text semantic type targets descriptive fields that contain natural language rather than structured identifiers or codes. The regex favors entries with at least three alphabetic words, helping to distinguish sentences and phrases from short tags, codes, or single keywords. High threshold and low precedence minimize conflicts with more specific types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:19.566876"
  },
  {
    "resultType": "generated",
    "semanticType": "title",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{3,}[\\.,;:!?)]*[ \\t]+[A-Za-z]{3,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9080,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|order|case).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Product Description"
        ],
        "negativeExamples": [
          "Product ID"
        ]
      },
      {
        "regExp": "(?i).*(user|customer|account).*(description|notes|comments|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Notes"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(desc|remarks|cmts|cmt|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Desc"
        ],
        "negativeExamples": [
          "Code"
        ]
      },
      {
        "regExp": "(?i).*(summary|details|feedback|review).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Order Details"
        ],
        "negativeExamples": [
          "Order Date"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Status"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported an intermittent outage after update.",
      "Blue sky forecast for the weekend.",
      "Requires manager approval before shipping.",
      "Payment received; order will ship tomorrow.",
      "Email address updated by support team.",
      "Not applicable for accounts created before 2022.",
      "Please see attached document for details.",
      "Minor cosmetic defect on left panel."
    ],
    "negativeContentExamples": [
      "OK to ship",
      "12345",
      "N/A",
      "ID 98765",
      "10/12/2023",
      "v2",
      "Title: Q1",
      "Blue-sky"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "User Comments",
      "Case Notes",
      "Order Details",
      "Summary"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status",
      "Quantity",
      "Amount",
      "Code",
      "Phone"
    ],
    "explanation": "Use this semantic type to identify free-form narrative fields such as descriptions, comments, notes, details, and summaries. It targets text that is natural language rather than structured codes, dates, or numeric identifiers, and is useful for routing such columns to NLP or unstructured text processing pipelines.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:20.946301"
  },
  {
    "resultType": "generated",
    "semanticType": "year",
    "description": "Captures spans expressed as start and end calendar years connected by a clear separator. Supports four-digit years between 1000 and 2099 joined by a dash, en/em dash, slash, or the word \"to\" with spaces, representing continuous or discrete periods.",
    "pluginType": "regex",
    "regexPattern": "\\b(1[0-9]{3}|20[0-9]{2})\\s*[-\u2013\u2014/]\\s*(1[0-9]{3}|20[0-9]{2})\\b|\\b(1[0-9]{3}|20[0-9]{2})\\s+[Tt][Oo]\\s+(1[0-9]{3}|20[0-9]{2})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9150,
    "headerPatterns": [
      {
        "regExp": "(?i).*(year|yr)[ _-]*range.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Year Range"
        ],
        "negativeExamples": [
          "Year"
        ]
      },
      {
        "regExp": "(?i).*date[ _-]*range.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Date Range"
        ],
        "negativeExamples": [
          "Single Date"
        ]
      },
      {
        "regExp": "(?i).*(time|period)[ _-]*(range|span).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Time Period Range"
        ],
        "negativeExamples": [
          "Year Range"
        ]
      },
      {
        "regExp": "(?i).*(years|fiscal[ _-]*years).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Years"
        ],
        "negativeExamples": [
          "Month"
        ]
      },
      {
        "regExp": "(?i).*(yr|yrs|rng|span).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "yr range"
        ],
        "negativeExamples": [
          "Code"
        ]
      },
      {
        "regExp": "(?i).*range.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Range"
        ],
        "negativeExamples": [
          "Year of Birth"
        ]
      }
    ],
    "positiveContentExamples": [
      "1999-2005",
      "2001\u20132004",
      "2010/2012",
      "1987 to 1993",
      "2015 \u2014 2016",
      "1900-1901",
      "2020\u20132020",
      "2008 / 2011"
    ],
    "negativeContentExamples": [
      "2019",
      "2019-",
      "-2020",
      "99-2001",
      "2019\u201320",
      "2019 to 20",
      "20192020",
      "2019/201A"
    ],
    "positiveHeaderExamples": [
      "Year Range",
      "Years",
      "Date Range",
      "Time Period Range",
      "Validity Range",
      "Fiscal Years",
      "Year Span",
      "Year Interval"
    ],
    "negativeHeaderExamples": [
      "Year",
      "Month",
      "Single Date",
      "Date",
      "Code",
      "Age",
      "Year of Birth",
      "Start Year"
    ],
    "explanation": "This semantic type identifies fields that store ranges of years expressed as two four-digit years between 1000 and 2099 connected by a dash, en/em dash, slash, or the word \"to\" with spaces. It is useful for columns describing historical spans, validity periods, fiscal years, or other temporal ranges rather than single dates.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:21.457770"
  },
  {
    "resultType": "generated",
    "semanticType": "notes",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ ]+\\b[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9330,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|case|order|ticket)[ _-]*(notes|comments|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Notes"
        ],
        "negativeExamples": [
          "Order Number"
        ]
      },
      {
        "regExp": "(?i).*(internal|public|additional)[ _-]*(notes|comments|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Internal Comments"
        ],
        "negativeExamples": [
          "Additional Info"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmts|cmt|remarks|remark).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Discount"
        ]
      },
      {
        "regExp": "(?i).*(free[ _-]*text|freeform[ _-]*text|long[ _-]*text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Free Text"
        ],
        "negativeExamples": [
          "Text Encoding"
        ]
      },
      {
        "regExp": "(?i).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "Note_ID"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please contact the customer to confirm the shipping address.",
      "Left voicemail; awaiting a callback from the client.",
      "Urgent: payment pending since 2023-10-02.",
      "Returned package due to incomplete apartment number.",
      "Follow-up scheduled for next week after deployment.",
      "Customer reported intermittent login issues during checkout.",
      "Spoke with support; issue resolved after cache clear.",
      "Add to agenda for quarterly review."
    ],
    "negativeContentExamples": [
      "Pending",
      "12345",
      "09/12/2024",
      "N/A",
      "ID-987654",
      "7.50",
      "OK",
      "A1 B2"
    ],
    "positiveHeaderExamples": [
      "Notes",
      "Description",
      "Comments",
      "Customer Notes",
      "Internal Comments",
      "Case Description",
      "Free Text",
      "Remarks"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Order Number",
      "Product Name",
      "Comment Count",
      "Note_ID",
      "Code"
    ],
    "explanation": "NOTES is intended for free-form narrative fields containing human-readable sentences or phrases, as commonly found in comment boxes, descriptions, or remark fields. It helps distinguish long-form text from structured identifiers, dates, or numeric measures, and is guided strongly by header semantics with a conservative content pattern requiring at least two alphabetic words.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:21.868179"
  },
  {
    "resultType": "generated",
    "semanticType": "time",
    "description": "This type captures Unix timestamp values expressed in seconds precision for standard time measurement and system operations. The values represent time as an integer count of seconds from the Unix epoch without any formatting, separators, or textual date components.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9][0-9]{7,10}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9040,
    "headerPatterns": [
      {
        "regExp": "(?i).*unix.*timestamp.*seconds.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "Unix Timestamp Seconds"
        ],
        "negativeExamples": [
          "Timestamp Seconds"
        ]
      },
      {
        "regExp": "(?i).*epoch.*time.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Epoch Time"
        ],
        "negativeExamples": [
          "Time Zone"
        ]
      },
      {
        "regExp": "(?i).*unix.*timestamp.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Unix Timestamp"
        ],
        "negativeExamples": [
          "Formatted Timestamp"
        ]
      },
      {
        "regExp": "(?i).*epoch.*seconds.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Epoch Seconds"
        ],
        "negativeExamples": [
          "Seconds Since Start"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "Timestamp"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "31536000",
      "123456789",
      "946684800",
      "1451606400",
      "1609459200",
      "1704067200",
      "2147483647",
      "10000000000"
    ],
    "negativeContentExamples": [
      "1625097600000",
      "1625097600.0",
      "-1625097600",
      "+1625097600",
      "01625097600",
      "1625 097600",
      "1625-097600",
      "12345678"
    ],
    "positiveHeaderExamples": [
      "Timestamp",
      "Unix Timestamp",
      "Epoch Time",
      "Epoch Seconds",
      "POSIX Timestamp",
      "Unix Time Seconds",
      "Event Unix Timestamp"
    ],
    "negativeHeaderExamples": [
      "Date",
      "Time",
      "Formatted Date",
      "Milliseconds",
      "Datetime",
      "Time Zone",
      "Created At"
    ],
    "explanation": "Identifies columns storing Unix epoch time represented as whole seconds since 1970-01-01 UTC, using only digits and no separators. Useful for log ingestion, telemetry, and system event timestamps where values are recorded as integer seconds (not milliseconds or formatted dates).",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:22.174987"
  },
  {
    "resultType": "generated",
    "semanticType": "population",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\s+[A-Za-z]{2,}\\s+[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9270,
    "headerPatterns": [
      {
        "regExp": "(?i).*long[ _-]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Long Description"
        ],
        "negativeExamples": [
          "Description"
        ]
      },
      {
        "regExp": "(?i).*additional[ _-]*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Additional Notes"
        ],
        "negativeExamples": [
          "Notes"
        ]
      },
      {
        "regExp": "(?i).*general[ _-]*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "General Comments"
        ],
        "negativeExamples": [
          "Comments"
        ]
      },
      {
        "regExp": "(?i).*(description|notes|comments|remarks|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*(desc|rmks|cmts).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Desc"
        ],
        "negativeExamples": [
          "Price"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "This item requires immediate attention due to safety concerns.",
      "Customer reported intermittent connectivity issues after the update.",
      "Please provide a detailed explanation of the variance in results.",
      "The package was left at the front desk according to the courier.",
      "Meeting was rescheduled to next week because of conflicting priorities.",
      "Overall performance has improved, but further optimization is recommended.",
      "Use this field to capture any additional context or clarifying remarks."
    ],
    "negativeContentExamples": [
      "2024-07-15",
      "7/15/2024",
      "$19.99",
      "ID-004529",
      "john.doe@example.com",
      "https://example.org/item/42",
      "High priority",
      "OK"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Additional Notes",
      "General Comments",
      "Free Text",
      "Details"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Email",
      "SKU",
      "Zip Code",
      "Quantity",
      "Status Code"
    ],
    "explanation": "This semantic type targets freeform narrative fields typically labeled as descriptions, notes, or comments. The value pattern expects at least three alphabetic words, reducing collisions with structured identifiers, dates, codes, and short labels. It is intended for capturing human-readable context, explanations, and remarks rather than structured data.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:22.790789"
  },
  {
    "resultType": "generated",
    "semanticType": "code",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier can include letters, digits, and limited separators (underscore, hyphen, period) but should not contain spaces, and is expected to be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "\\b(?=[A-Za-z0-9._-]*[A-Za-z])[A-Za-z0-9][A-Za-z0-9._-]{1,22}[A-Za-z0-9]\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9230,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unique|primary).*(id|identifier|code).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "Unique ID"
        ],
        "negativeExamples": [
          "Unique Name"
        ]
      },
      {
        "regExp": "(?i).*(record|entity|object|item).*(id|identifier|code).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Record ID"
        ],
        "negativeExamples": [
          "Record Name"
        ]
      },
      {
        "regExp": "(?i).*identifier.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Identifier"
        ],
        "negativeExamples": [
          "Description"
        ]
      },
      {
        "regExp": "(?i).*\\bid\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ID"
        ],
        "negativeExamples": [
          "Paid Amount"
        ]
      },
      {
        "regExp": "(?i).*\\bcode\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Item Code"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "A12-BC9",
      "INV_2023_0001",
      "7F2D89",
      "PRD-001-A",
      "X9.ZY_77",
      "K12",
      "OBJ-2024-AB",
      "C-123-XYZ"
    ],
    "negativeContentExamples": [
      "123456789",
      "A12 BC9",
      "-ABC123",
      "ABC123-",
      "A__",
      "INV/2023/001",
      "00123",
      "ID#123"
    ],
    "positiveHeaderExamples": [
      "ID",
      "Identifier",
      "Unique ID",
      "Record ID",
      "Entity Identifier",
      "Primary ID",
      "User ID",
      "Item Code"
    ],
    "negativeHeaderExamples": [
      "Name",
      "Description",
      "Date",
      "Status",
      "Count",
      "Total",
      "Email",
      "Category"
    ],
    "explanation": "IDENTITY.code is intended to detect general-purpose alphanumeric identifiers that include at least one letter and may use separators such as underscores, hyphens, or periods. It avoids matching plain numeric values to reduce conflicts with numeric columns and excludes whitespace and uncommon punctuation. Use this type when columns store record or entity keys that are not tied to a specific standardized code set.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:23.256860"
  },
  {
    "resultType": "generated",
    "semanticType": "height",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'(),:;/-]*\\s+[A-Za-z][A-Za-z0-9'(),:;/-]*(\\s+[A-Za-z0-9'(),:;/-]+){0,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9310,
    "headerPatterns": [
      {
        "regExp": "(?i).*(detailed|long).*(description|desc).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "detailed_description"
        ],
        "negativeExamples": [
          "description_date"
        ]
      },
      {
        "regExp": "(?i).*(customer|internal|public).*(comments|comment).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "internal_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Comments"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmt|cmts|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Price"
        ]
      },
      {
        "regExp": "(?i).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "ID"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached report for details.",
      "Customer requested an update on shipment status.",
      "No issues observed during the initial inspection.",
      "This item requires special handling and refrigeration.",
      "Contact support if the problem persists after reboot.",
      "The description was entered by the field technician.",
      "Notes: deliver before 10 am if possible.",
      "Comments include follow-up scheduled next week."
    ],
    "negativeContentExamples": [
      "Approved",
      "2024-07-15",
      "19.99",
      "ABC-12345",
      "user@example.com",
      "123456",
      "N/A",
      "OK"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Detailed Description",
      "Internal Comments",
      "General Notes",
      "Text",
      "Long Desc"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "SKU",
      "Amount",
      "Status",
      "Quantity",
      "Code"
    ],
    "explanation": "Detects free-form natural language fields where users enter descriptions, notes, or comments. The value regex requires at least two space-separated tokens starting with letters and allows common punctuation, which helps distinguish sentences/phrases from IDs, dates, codes, and single-word flags. Use this type to classify columns like Description, Notes, Comments, and other narrative text. High threshold and priority are set to minimize conflicts while still focusing on multi-word human-readable content.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:25.758464"
  },
  {
    "resultType": "generated",
    "semanticType": "type",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ \\t]+\\b[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9030,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\bproduct\\b.*\\bdescription\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Product Description"
        ],
        "negativeExamples": [
          "Product ID"
        ]
      },
      {
        "regExp": "(?i).*\\bcustomer\\b.*\\bcomments\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Comments"
        ],
        "negativeExamples": [
          "Customer Number"
        ]
      },
      {
        "regExp": "(?i).*\\binternal\\b.*\\bnotes\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Internal Notes"
        ],
        "negativeExamples": [
          "Internal Code"
        ]
      },
      {
        "regExp": "(?i).*\\bdescription\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Subscription"
        ]
      },
      {
        "regExp": "(?i).*\\bdesc\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Item Desc"
        ],
        "negativeExamples": [
          "Descriptor Code"
        ]
      },
      {
        "regExp": "(?i).*\\btext\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported a loud clicking sound when starting the device.",
      "Battery life exceeds expectations after the latest update.",
      "Please handle with care; fragile components inside.",
      "Delivered two days early, packaging was slightly damaged.",
      "Requires administrative approval before proceeding.",
      "Not applicable to orders placed prior to July.",
      "High-priority issue affecting multiple accounts.",
      "Use warm water and mild soap to clean the surface."
    ],
    "negativeContentExamples": [
      "12345",
      "A-1029-B",
      "2024-10-05",
      "USD 19.99",
      "OK",
      "APPROVED",
      "john.doe@example.com",
      "NY"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "Additional Details",
      "Internal Notes",
      "Free Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Account Number",
      "SKU",
      "Postal Code",
      "URL",
      "Quantity"
    ],
    "explanation": "This semantic type identifies columns that contain free-form, human-readable text such as descriptions, notes, and comments. It is intended for natural language content without strict structure, enabling differentiation from structured identifiers, codes, and numeric fields.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:25.766667"
  },
  {
    "resultType": "generated",
    "semanticType": "note",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Za-z][A-Za-z]+( [A-Za-z0-9][A-Za-z0-9'()\\-,:;]*)){1,}[.!?\"]?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 9090,
    "headerPatterns": [
      {
        "regExp": "(?i).*(\\bcustomer\\b|\\border\\b|\\bcase\\b|\\bticket\\b|\\baccount\\b)[ _-]*(\\bnote\\b|\\bnotes\\b|\\bcomment\\b|\\bcomments\\b|\\bdescription\\b|\\bdesc\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Notes"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(\\binternal\\b|\\bpublic\\b|\\bprivate\\b|\\bgeneral\\b)[ _-]*(\\bnote\\b|\\bnotes\\b|\\bcomment\\b|\\bcomments\\b|\\bdescription\\b|\\bdesc\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Internal Notes"
        ],
        "negativeExamples": [
          "General Ledger"
        ]
      },
      {
        "regExp": "(?i).*(\\bdescription\\b|\\bdesc\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Descriptor"
        ]
      },
      {
        "regExp": "(?i).*(\\bcomment\\b|\\bcomments\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Comments"
        ],
        "negativeExamples": [
          "Commentary"
        ]
      },
      {
        "regExp": "(?i).*(\\bnote\\b|\\bnotes\\b).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "Noteworthy"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer requested expedited shipping due to travel schedule.",
      "Left voicemail; follow up next Tuesday.",
      "Issue resolved after clearing cache; monitor for 24 hours.",
      "Package left at front desk with receptionist.",
      "Payment pending; awaiting approval from finance.",
      "User reports intermittent outages during peak hours.",
      "See attached for detailed steps and screenshots.",
      "Call back after 3 pm; customer prefers email."
    ],
    "negativeContentExamples": [
      "OK",
      "N/A",
      "123456",
      "INV-9081",
      "support@example.com",
      "http://example.com/path",
      "ABCD",
      "2025-08-01"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Internal Notes",
      "Customer Comments",
      "Case Description",
      "Order Notes",
      "Remarks"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "Email",
      "Phone",
      "Status",
      "SKU"
    ],
    "explanation": "This semantic type identifies free-form narrative fields used for notes, comments, and descriptions. It is useful for detecting columns that contain human-written sentences or phrases rather than structured codes or numeric identifiers, enabling downstream text processing, search, or summarization workflows.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:27.601161"
  },
  {
    "resultType": "generated",
    "semanticType": "weight",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}( [A-Za-z]{2,}){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9120,
    "headerPatterns": [
      {
        "regExp": "(?i).*product.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*user.*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "user_comments"
        ],
        "negativeExamples": [
          "date"
        ]
      },
      {
        "regExp": "(?i).*(description|notes|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "ID"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmt|remarks|detail).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "internal_desc"
        ],
        "negativeExamples": [
          "price"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Free Text"
        ],
        "negativeExamples": [
          "Quantity"
        ]
      }
    ],
    "positiveContentExamples": [
      "Package shipped yesterday.",
      "Customer requested expedited handling",
      "Please deliver to side entrance",
      "Item was damaged during transit",
      "No issues were reported by user",
      "The contract was signed last week",
      "Provide detailed summary of findings",
      "Return processed and refund issued"
    ],
    "negativeContentExamples": [
      "New York",
      "Pending review",
      "OK",
      "A-12345",
      "2024-06-01",
      "$19.99",
      "ID-9981",
      "user@example.com"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "Internal Notes",
      "User Comments",
      "Additional Details",
      "Free Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "Weight",
      "SKU",
      "Amount",
      "Email"
    ],
    "explanation": "This semantic type identifies unstructured, human-readable free text fields such as descriptions, notes, and comments. The value pattern looks for at least three consecutive alphabetic words, which effectively distinguishes natural language phrases and sentences from IDs, codes, dates, prices, and other structured values. Use this type to classify narrative fields where users enter explanations, observations, or other descriptive content.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:29.690825"
  },
  {
    "resultType": "generated",
    "semanticType": "state",
    "description": "This type captures the complete names of US states and territories as they are used in official documentation and government administration. The values represent full state names using proper English spelling and standard formatting as established by the US constitutional and administrative systems.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(Alabama|Alaska|American Samoa|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|District of Columbia|Florida|Georgia|Guam|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Northern Mariana Islands|Ohio|Oklahoma|Oregon|Pennsylvania|Puerto Rico|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming|Virgin Islands)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9140,
    "headerPatterns": [
      {
        "regExp": "(?i).*(us|united states).*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US State Name"
        ],
        "negativeExamples": [
          "State Code"
        ]
      },
      {
        "regExp": "(?i).*state.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State Full Name"
        ],
        "negativeExamples": [
          "Country Name"
        ]
      },
      {
        "regExp": "(?i).*state.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State Name"
        ],
        "negativeExamples": [
          "County Name"
        ]
      },
      {
        "regExp": "(?i).*(us|united states).*state.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US State"
        ],
        "negativeExamples": [
          "Country"
        ]
      },
      {
        "regExp": "(?i).*state.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State"
        ],
        "negativeExamples": [
          "Province"
        ]
      }
    ],
    "positiveContentExamples": [
      "California",
      "New York",
      "Texas",
      "District of Columbia",
      "Puerto Rico",
      "American Samoa",
      "North Dakota",
      "Northern Mariana Islands"
    ],
    "negativeContentExamples": [
      "CA",
      "New-York",
      "United States",
      "Rhode Is.",
      "Washington, D.C.",
      "Massachusets",
      "PuertoRico",
      "N Carolina"
    ],
    "positiveHeaderExamples": [
      "State",
      "State Name",
      "US State",
      "State Full Name",
      "Shipping State",
      "Residence State",
      "Customer State",
      "Billing State"
    ],
    "negativeHeaderExamples": [
      "State Code",
      "Country",
      "County",
      "US State Code",
      "Province",
      "Region",
      "State Abbreviation",
      "ZIP Code"
    ],
    "explanation": "This semantic type identifies full US state and territory names as they typically appear in administrative datasets, including multi-word names (for example, New Hampshire, District of Columbia) and insular areas (for example, Guam, Puerto Rico). It is intended for columns storing the spelled-out state/territory names rather than abbreviations or codes.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:31.419184"
  },
  {
    "resultType": "generated",
    "semanticType": "model",
    "description": "Open-ended natural language text that contains sentences, phrases, or paragraphs without a fixed structure. Suitable for free-form fields like descriptions, notes, and comments where content length and vocabulary vary widely.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ \\t,.;:!?\"'()-]+\\b[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9240,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|order).*description.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Product Description"
        ],
        "negativeExamples": [
          "Product ID"
        ]
      },
      {
        "regExp": "(?i).*(customer|internal|user).*notes?.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Internal Notes"
        ],
        "negativeExamples": [
          "User ID"
        ]
      },
      {
        "regExp": "(?i).*(order|customer|user).*comments?.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Customer Comments"
        ],
        "negativeExamples": [
          "Order Date"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Long Desc"
        ],
        "negativeExamples": [
          "Discount"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "ID"
        ]
      }
    ],
    "positiveContentExamples": [
      "Thank you for your prompt response.",
      "Please deliver to the side entrance after 5 pm.",
      "This item shows minor wear consistent with age.",
      "The customer reported intermittent connectivity issues.",
      "Notes: warranty coverage extends through next year.",
      "Approved by the committee following review.",
      "Return was processed without incident.",
      "Contact support if problems persist."
    ],
    "negativeContentExamples": [
      "Hello",
      "OK",
      "2024/05/01",
      "ABC-123",
      "A9B2C3",
      "100%",
      "REF:12345",
      "550e8400-e29b-41d4-a716-446655440000"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Internal Notes",
      "Customer Comments",
      "Product Description",
      "Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "SKU",
      "Quantity",
      "Zip Code",
      "Phone",
      "Status Code"
    ],
    "explanation": "This semantic type identifies free-form, human-readable text fields used for descriptions, notes, and comments. It is useful for classifying unstructured narrative content that lacks fixed formatting or constrained vocabularies.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:32.517094"
  },
  {
    "resultType": "generated",
    "semanticType": "class",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']+[ \\t]+[A-Za-z][A-Za-z']+[A-Za-z0-9 ,.;:'\"()\\-!?/]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9280,
    "headerPatterns": [
      {
        "regExp": "(?i).*free.*text.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text_description"
        ],
        "negativeExamples": [
          "item_description"
        ]
      },
      {
        "regExp": "(?i).*additional.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_notes"
        ],
        "negativeExamples": [
          "shipping_notes"
        ]
      },
      {
        "regExp": "(?i).*customer.*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "order_comments"
        ]
      },
      {
        "regExp": "(?i).*desc.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "short_desc"
        ],
        "negativeExamples": [
          "discount_percent"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please provide a brief summary of the incident.",
      "Customer reported intermittent connectivity issues throughout the day.",
      "Delivered package was left at the front porch per instructions.",
      "This product is no longer available in the current catalog.",
      "Payment received; invoice closed on 2023-05-10.",
      "The user experienced delays when launching the application.",
      "Notes: requires managerial approval before release.",
      "Contact support if issues persist after reboot."
    ],
    "negativeContentExamples": [
      "12345",
      "2024-08-10",
      "http://example.com/docs",
      "user@example.com",
      "N/A",
      "Yes",
      "A1 B2 C3",
      "SKU-99871"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Free Text Description",
      "Additional Notes",
      "Customer Comments",
      "Remarks",
      "General Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "SKU Code",
      "Account Number",
      "Postal Code",
      "Latitude"
    ],
    "explanation": "This semantic type is intended to classify free-form, human-readable text fields such as descriptions, notes, remarks, and comments. It favors fields containing multiple words and natural language content, helping distinguish narrative text from structured identifiers, codes, or numeric values.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:33.030249"
  },
  {
    "resultType": "generated",
    "semanticType": "treatment",
    "description": "Open-ended text fields containing human-readable content such as sentences, phrases, and paragraphs. Values are free-form natural language without predefined formats, lengths, or constraints and can include punctuation, mixed case, and varied vocabulary.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'\u2019\\-]+\\b([ ,;:!?.]+\\b[A-Za-z][A-Za-z'\u2019\\-]+\\b){1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9350,
    "headerPatterns": [
      {
        "regExp": "(?i).*treatment.*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_notes"
        ],
        "negativeExamples": [
          "treatment_date"
        ]
      },
      {
        "regExp": "(?i).*treatment.*(text|detail|details|summary|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "treatment_details"
        ],
        "negativeExamples": [
          "treatment_id"
        ]
      },
      {
        "regExp": "(?i).*(long[ _]?description|case[ _]?notes|general[ _]?comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "long_code"
        ]
      },
      {
        "regExp": "(?i).*(desc|note|cmt|remark|rmks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "node_count"
        ]
      },
      {
        "regExp": "(?i).*(description|notes|comments|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Take one tablet twice daily with food.",
      "Apply a thin layer to the affected area once nightly.",
      "Patient reports mild nausea after breakfast.",
      "Increase dosage if symptoms persist for more than 3 days.",
      "Service scheduled for next week pending approval.",
      "No adverse events observed during the trial period.",
      "Use caution when operating machinery after injection.",
      "Monitor blood pressure every morning before medication."
    ],
    "negativeContentExamples": [
      "Completed",
      "A B",
      "2023-05-06",
      "ID-9988",
      "42 reasons",
      "Note: 12345",
      "SKU12345",
      "OK-1"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "treatment_notes",
      "long_description",
      "customer_comments",
      "free_text",
      "treatment_description"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "treatment_id",
      "code",
      "qty",
      "index",
      "status"
    ],
    "explanation": "This semantic type targets free-form narrative fields that typically contain sentences or phrases rather than structured identifiers or codes. The value pattern emphasizes multi-word alphabetic text with natural separators to avoid matching IDs, dates, or single tokens. Header patterns prioritize explicit treatment-related descriptors, then general text-field synonyms and abbreviations, finishing with primitive terms. High threshold and low precedence prioritize more specific types over this broad free-text class.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:34.617163"
  },
  {
    "resultType": "generated",
    "semanticType": "family",
    "description": "This type captures family names or surnames as they appear in personal identification and formal documentation across different cultures. The values represent last names using standard spelling and formatting conventions without including given names, middle names, or honorific titles.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]{1,}([-' ][A-Za-z]{2,}){0,2}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9170,
    "headerPatterns": [
      {
        "regExp": "(?i).*(last|family).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Family Name"
        ],
        "negativeExamples": [
          "Full Name"
        ]
      },
      {
        "regExp": "(?i).*customer.*last.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_last_name"
        ],
        "negativeExamples": [
          "customer_full_name"
        ]
      },
      {
        "regExp": "(?i).*surname.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Surname"
        ],
        "negativeExamples": [
          "Middle Name"
        ]
      },
      {
        "regExp": "(?i).*l.?name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "lname"
        ],
        "negativeExamples": [
          "filename"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Smith",
      "Van der Meer",
      "De la Cruz",
      "McMillan",
      "Li",
      "Nguyen",
      "Taylor-Jones",
      "Andersen"
    ],
    "negativeContentExamples": [
      "john",
      "GARCIA",
      "A",
      "O\u2019Connor",
      "van der Meer",
      "Smith-J",
      "Chen,",
      "St. John"
    ],
    "positiveHeaderExamples": [
      "Last Name",
      "Surname",
      "Family Name",
      "Customer Last Name",
      "Employee Surname",
      "LName",
      "Client Family Name"
    ],
    "negativeHeaderExamples": [
      "First Name",
      "Full Name",
      "Middle Name",
      "Given Name",
      "File Name",
      "Nickname",
      "Account Number"
    ],
    "explanation": "The NAME.FAMILY semantic type identifies surnames (family names) presented as they would typically appear in records: one to three alphabetic tokens separated by spaces, hyphens, or an apostrophe, starting with an uppercase initial. The regex enforces proper-case starts and avoids digits or extraneous punctuation, reducing false positives with free-form text. Header detection prioritizes explicit variants like last/family name and surname, includes common field conventions (lname), and falls back to the primitive name pattern with a high threshold and high priority appropriate for a broad name-type field to minimize conflicts with more specific types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:38.969070"
  },
  {
    "resultType": "generated",
    "semanticType": "region",
    "description": "This type captures the complete names of US states and territories as they are used in official documentation and government administration. The values represent full state and territory names using proper English spelling and standard formatting as established by the US constitutional and administrative systems.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(ALABAMA|ALASKA|ARIZONA|ARKANSAS|CALIFORNIA|COLORADO|CONNECTICUT|DELAWARE|FLORIDA|GEORGIA|HAWAII|IDAHO|ILLINOIS|INDIANA|IOWA|KANSAS|KENTUCKY|LOUISIANA|MAINE|MARYLAND|MASSACHUSETTS|MICHIGAN|MINNESOTA|MISSISSIPPI|MISSOURI|MONTANA|NEBRASKA|NEVADA|NEW HAMPSHIRE|NEW JERSEY|NEW MEXICO|NEW YORK|NORTH CAROLINA|NORTH DAKOTA|OHIO|OKLAHOMA|OREGON|PENNSYLVANIA|RHODE ISLAND|SOUTH CAROLINA|SOUTH DAKOTA|TENNESSEE|TEXAS|UTAH|VERMONT|VIRGINIA|WASHINGTON|WEST VIRGINIA|WISCONSIN|WYOMING|DISTRICT OF COLUMBIA|AMERICAN SAMOA|GUAM|NORTHERN MARIANA ISLANDS|COMMONWEALTH OF THE NORTHERN MARIANA ISLANDS|PUERTO RICO|UNITED STATES VIRGIN ISLANDS|U\\.S\\. VIRGIN ISLANDS|US VIRGIN ISLANDS|VIRGIN ISLANDS OF THE UNITED STATES)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 9400,
    "headerPatterns": [
      {
        "regExp": "(?i).*(us|u\\.s\\.)\\s*state\\s*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US State Name"
        ],
        "negativeExamples": [
          "State Code"
        ]
      },
      {
        "regExp": "(?i).*state\\s*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State Name"
        ],
        "negativeExamples": [
          "Country"
        ]
      },
      {
        "regExp": "(?i).*(us|u\\.s\\.)\\s*state.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US State"
        ],
        "negativeExamples": [
          "County"
        ]
      },
      {
        "regExp": "(?i).*state.*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State Full Name"
        ],
        "negativeExamples": [
          "State Code"
        ]
      },
      {
        "regExp": "(?i).*state.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State"
        ],
        "negativeExamples": [
          "Region"
        ]
      }
    ],
    "positiveContentExamples": [
      "California",
      "New York",
      "Texas",
      "District of Columbia",
      "Puerto Rico",
      "American Samoa",
      "Guam",
      "United States Virgin Islands"
    ],
    "negativeContentExamples": [
      "NorthDakota",
      "New-Mexico",
      "Puerto Ricco",
      "District of Colombia",
      "Virgin Islands",
      "N. Carolina",
      "Wash.",
      "PR"
    ],
    "positiveHeaderExamples": [
      "State",
      "State Name",
      "US State",
      "US State Name",
      "State Full Name",
      "State or Territory",
      "State (Full)"
    ],
    "negativeHeaderExamples": [
      "State Code",
      "Country",
      "County",
      "Province",
      "Region",
      "State Abbrev",
      "Zip Code"
    ],
    "explanation": "Represents fully spelled-out names of US states and territories, suitable for validating columns that store jurisdiction names in official forms, registries, or administrative datasets. Useful for normalizing and standardizing regional attributes prior to geocoding or mapping.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:39.582444"
  },
  {
    "resultType": "generated",
    "semanticType": "country",
    "description": "Represents the full English country name written with standard capitalization. Names may include multiple words, hyphens, and common English connectors such as and, of, the, or d'. Abbreviations, codes, or non-English translations are excluded.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+(-[A-Z][a-z]+)?)( ((and|of|the) [A-Z][a-z]+(-[A-Z][a-z]+)?|d'[A-Z][a-z]+(-[A-Z][a-z]+)?| [A-Z][a-z]+(-[A-Z][a-z]+)?)){0,5}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 95,
    "priority": 9130,
    "headerPatterns": [
      {
        "regExp": "(?i).*(country|nation).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Country Name"
        ],
        "negativeExamples": [
          "Country Code"
        ]
      },
      {
        "regExp": "(?i).*(billing|shipping|delivery|residence|customer|company).*(country|nation).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Shipping Country"
        ],
        "negativeExamples": [
          "City"
        ]
      },
      {
        "regExp": "(?i).*(ctry).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ctry"
        ],
        "negativeExamples": [
          "country_code"
        ]
      },
      {
        "regExp": "(?i).*(country|nation).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Country"
        ],
        "negativeExamples": [
          "State"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "United States",
      "United Kingdom",
      "New Zealand",
      "Papua New Guinea",
      "Cote d'Ivoire",
      "Timor-Leste",
      "Trinidad and Tobago",
      "Republic of Korea"
    ],
    "negativeContentExamples": [
      "USA",
      "U.S.A.",
      "CA",
      "United states",
      "Republic of china",
      "Bosnia & Herzegovina",
      "Cote D'Ivoire",
      "Cote d Ivoire"
    ],
    "positiveHeaderExamples": [
      "Country",
      "Country Name",
      "Nation",
      "Billing Country",
      "Shipping Country",
      "Official Country",
      "Country Full Name",
      "Customer Country"
    ],
    "negativeHeaderExamples": [
      "Country Code",
      "State",
      "City",
      "Country_ID",
      "CountryCode",
      "Nationality",
      "Province",
      "County"
    ],
    "explanation": "This semantic type identifies cells containing full English country names, allowing multi-word forms, hyphenation, and common English connectors while excluding abbreviations and codes. It is useful for classifying geographic country fields in customer profiles, shipping addresses, and international datasets. Header patterns prioritize explicit country name labels and common variants while maintaining a primitive fallback for 'name' to support broader schemas.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:40.770948"
  },
  {
    "resultType": "generated",
    "semanticType": "city",
    "description": "This represents the official name of a populated place with municipal status, typically containing multiple words and proper capitalization. The name may include directional indicators, geographic descriptors, or historical references but excludes abbreviations or postal codes.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+(['-][A-Za-z][a-z]+)?)(\\s(of|the|and|de|la|del|da|do|van|von|di))?(\\s([A-Z][a-z]+(['-][A-Za-z][a-z]+)?)){0,4}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9190,
    "headerPatterns": [
      {
        "regExp": "(?i).*city.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "city_name"
        ],
        "negativeExamples": [
          "city_code"
        ]
      },
      {
        "regExp": "(?i).*(city|town|municipality|location).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "City"
        ],
        "negativeExamples": [
          "Country"
        ]
      },
      {
        "regExp": "(?i).*(cty|muni|loc).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "cty"
        ],
        "negativeExamples": [
          "zip"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "name"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "San Francisco",
      "New York",
      "Los Angeles",
      "Rio de Janeiro",
      "Ho Chi Minh City",
      "Saint Louis",
      "Santa Clara",
      "Nuku'alofa"
    ],
    "negativeContentExamples": [
      "NYC",
      "NewYork",
      "Sector 7",
      "94107",
      "la paz",
      "LOS ANGELES",
      "New york",
      "S\u00e3o Paulo"
    ],
    "positiveHeaderExamples": [
      "City",
      "Town",
      "Location",
      "city_name",
      "municipality_name",
      "place_name",
      "town_name"
    ],
    "negativeHeaderExamples": [
      "Country",
      "State",
      "ZIP Code",
      "Province",
      "Region",
      "county",
      "state_code"
    ],
    "explanation": "This semantic type identifies strings that look like proper-cased city names, allowing 1\u20135 tokens with internal spaces, apostrophes, or hyphens, and optional lowercase connectors like 'of' or 'de'. It avoids matching all-caps abbreviations, numeric codes, and strings containing digits or extraneous punctuation. Use it to recognize the names of municipalities or towns in datasets, especially when paired with broader geographic context like country or state fields.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:41.018103"
  },
  {
    "resultType": "generated",
    "semanticType": "category",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'&]+( [A-Za-z0-9][A-Za-z0-9'&(),:;/-]+){2,}[.!?]?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9070,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|order|customer).*(description|comments?|notes?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_id"
        ]
      },
      {
        "regExp": "(?i).*(details|summary|feedback).*(description|comments?|notes?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "feedback_comments"
        ],
        "negativeExamples": [
          "feedback_score"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "designation"
        ]
      },
      {
        "regExp": "(?i).*(comments?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Comments"
        ],
        "negativeExamples": [
          "Notes"
        ]
      },
      {
        "regExp": "(?i).*(notes?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "Comments"
        ]
      },
      {
        "regExp": "(?i).*(text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver after 5pm.",
      "Requires manager approval before shipment",
      "Customer reported a missing accessory",
      "Item color appears slightly faded",
      "Use with caution: read instructions",
      "Broken on arrival, packaging was torn",
      "Include spare screws in the box",
      "Works as expected in cold weather"
    ],
    "negativeContentExamples": [
      "Pending review",
      "OK",
      "N/A",
      "12345",
      "REF-12345",
      "Order #12345",
      "See above",
      "Yes"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "User Comments",
      "Detailed Notes",
      "Additional Text",
      "Feedback Comments"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "SKU",
      "Zip Code",
      "Quantity",
      "Email",
      "Invoice Number"
    ],
    "explanation": "This semantic type is intended for columns that hold general narrative or descriptive text rather than structured identifiers or codes. It favors strings with multiple words and natural punctuation, helping distinguish free-form descriptions, comments, and notes from concise codes or single-word labels.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:41.426425"
  },
  {
    "resultType": "generated",
    "semanticType": "min",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{3,}\\b(\\s+[A-Za-z]{3,}\\b){1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9320,
    "headerPatterns": [
      {
        "regExp": "(?i).*(detailed|full|long).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(product|order|customer|item).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(internal|public).*(comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "internal_comments"
        ],
        "negativeExamples": [
          "public_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|comment|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "notes"
        ],
        "negativeExamples": [
          "discount"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver before noon.",
      "Customer requested expedited shipping",
      "Item arrived damaged and needs replacement",
      "This is a sample description",
      "No known issues at this time",
      "Contact support if problem persists",
      "Eligible for return within 30 days",
      "Packaging was slightly dented"
    ],
    "negativeContentExamples": [
      "OK to ship?",
      "N/A",
      "X Y",
      "2024-07-31",
      "SKU-12345",
      "john@example.com",
      "$19.99",
      "AB CD"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "Internal Comments",
      "Customer Notes",
      "Detailed Description",
      "Long Description"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "SKU",
      "Order ID",
      "Email",
      "Quantity",
      "Status Code"
    ],
    "explanation": "This semantic type is intended for free-form, human-readable text fields such as descriptions, notes, and comments that do not follow a strict schema. The detection favors sequences of at least two alphabetic words to distinguish narrative text from structured values like codes, dates, or prices. Use this type to capture general commentary or narrative fields while allowing more specific semantic types (IDs, codes, dates) to take precedence.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:42.041371"
  },
  {
    "resultType": "generated",
    "semanticType": "position",
    "description": "This type captures job titles and occupational designations as they appear in professional contexts, employment records, and organizational structures. The values represent standard professional roles, specialized positions, or functional titles using conventional workplace terminology.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b((senior|sr|junior|jr|assistant|associate|principal)\\s+)?([a-z]+[\\s/-]+){0,3}(manager|engineer|developer|analyst|director|officer|specialist|consultant|administrator|coordinator|technician|accountant|architect|scientist|nurse|attorney|teacher|professor|designer|planner|supervisor|representative|agent|operator|driver|clerk|cashier|receptionist|editor|producer|buyer|account executive|product owner)\\b|\\b(vice president|vp|president|ceo|cfo|coo|cto|cio|founder|owner|partner|chair|chairman)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 9290,
    "headerPatterns": [
      {
        "regExp": "(?i).*job.*title.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "Job Title"
        ],
        "negativeExamples": [
          "Job Code"
        ]
      },
      {
        "regExp": "(?i).*position.*title.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Position Title"
        ],
        "negativeExamples": [
          "Position Number"
        ]
      },
      {
        "regExp": "(?i).*\\boccupation\\b.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Occupation"
        ],
        "negativeExamples": [
          "Occupational Safety"
        ]
      },
      {
        "regExp": "(?i).*\\bposition\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Position"
        ],
        "negativeExamples": [
          "Positioning"
        ]
      },
      {
        "regExp": "(?i).*\\btitle\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Title"
        ],
        "negativeExamples": [
          "Company"
        ]
      }
    ],
    "positiveContentExamples": [
      "Senior Software Engineer",
      "Marketing Manager",
      "Chief Financial Officer",
      "HR Coordinator",
      "Data Analyst",
      "Assistant Professor",
      "Product Designer",
      "VP of Sales"
    ],
    "negativeContentExamples": [
      "Management",
      "Engineering",
      "Staff Level",
      "Salary Grade 10",
      "Department Head",
      "Company Directorates",
      "QA Team Lead",
      "Customer Support"
    ],
    "positiveHeaderExamples": [
      "Job Title",
      "Position",
      "Occupation",
      "Position Title",
      "Title",
      "Employee Position"
    ],
    "negativeHeaderExamples": [
      "Name",
      "Company",
      "Salary",
      "Job Code",
      "Department",
      "Employee Name"
    ],
    "explanation": "Identifies values that are professional job titles or occupational roles, enabling classification of columns containing employment positions in HR systems, directories, resumes, and organizational datasets. Useful for schema discovery, PII separation from titles, and for standardizing role-based analytics.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:43.731372"
  },
  {
    "resultType": "generated",
    "semanticType": "filename",
    "description": "Captures complete filenames as they appear in file systems and directory listings, including a base name and one or more dot-separated extensions. Values are file identifiers using alphanumeric characters, dots, spaces, and common symbols, while excluding full path information or directory separators.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z0-9][A-Za-z0-9 _\\-\\(\\)\\[\\]\\.\\&]{0,100}(\\.[A-Za-z0-9]{1,8}){1,3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9390,
    "headerPatterns": [
      {
        "regExp": "(?i).*file[ _\\-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "File Name"
        ],
        "negativeExamples": [
          "File Path"
        ]
      },
      {
        "regExp": "(?i).*filename.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Filename"
        ],
        "negativeExamples": [
          "File Type"
        ]
      },
      {
        "regExp": "(?i).*document[ _\\-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Document Name"
        ],
        "negativeExamples": [
          "Document Type"
        ]
      },
      {
        "regExp": "(?i).*(fname|file[ _\\-]*nm|doc[ _\\-]*nm).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "fname"
        ],
        "negativeExamples": [
          "File Size"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Title"
        ]
      }
    ],
    "positiveContentExamples": [
      "report.pdf",
      "image_01.JPG",
      "backup-2023-09.zip",
      "archive.tar.gz",
      "invoice.final.v3.docx",
      "README.md",
      "data_2024-10-05.csv",
      "contract (1).pdf"
    ],
    "negativeContentExamples": [
      "C:\\Users\\me\\file.txt",
      "/var/log/syslog",
      ".gitignore",
      "readme",
      "file.",
      "report. pdf",
      "reportpdf",
      "notes.txt "
    ],
    "positiveHeaderExamples": [
      "Filename",
      "File Name",
      "Document Name",
      "Attachment Name",
      "Image Filename",
      "Saved File Name",
      "Output Document Name",
      "Report File Name"
    ],
    "negativeHeaderExamples": [
      "File Path",
      "Folder",
      "Extension",
      "Directory",
      "Path",
      "File Location",
      "File Extension",
      "File Type"
    ],
    "explanation": "This semantic type identifies standalone filenames that include a base name and one or more extensions, without any directory or drive components. It supports common separators and symbols typically found in filenames while rejecting paths, dotfiles without a base name, and values lacking an extension.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:44.463296"
  },
  {
    "resultType": "generated",
    "semanticType": "county",
    "description": "This type identifies US county names used for local administrative identification within American state governmental systems. The format consists of proper noun text strings representing official county names in English, often including the word 'County' as part of the designation.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z.'-]+( [A-Za-z.'-]+){0,4} [Cc][Oo][Uu][Nn][Tt][Yy]\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9160,
    "headerPatterns": [
      {
        "regExp": "(?i).*(us[\\s_-]*)?county[\\s_-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US County Name"
        ],
        "negativeExamples": [
          "State Name"
        ]
      },
      {
        "regExp": "(?i).*county[\\s_-]*(official|full)[\\s_-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Official County Name"
        ],
        "negativeExamples": [
          "Official State Name"
        ]
      },
      {
        "regExp": "(?i).*(us[\\s_-]*)?county.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US County"
        ],
        "negativeExamples": [
          "FIPS Code"
        ]
      },
      {
        "regExp": "(?i).*(cty|co)[\\s_-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cty_name"
        ],
        "negativeExamples": [
          "co_num"
        ]
      },
      {
        "regExp": "(?i).*county.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "County"
        ],
        "negativeExamples": [
          "State"
        ]
      }
    ],
    "positiveContentExamples": [
      "Los Angeles County",
      "Orange County",
      "Cook County",
      "Miami-Dade County",
      "St. Louis County",
      "Prince George's County",
      "DeKalb County",
      "New Castle County"
    ],
    "negativeContentExamples": [
      "Los Angeles",
      "Orange County, CA",
      "Orange County CA",
      "St. Louis Co",
      "Cook Cnty",
      "City and County of San Francisco",
      "Washington Parish",
      "Fairfax County VA"
    ],
    "positiveHeaderExamples": [
      "County",
      "County Name",
      "US County",
      "county_name",
      "County_name",
      "Official County Name",
      "US County Name",
      "CountyFullName"
    ],
    "negativeHeaderExamples": [
      "State",
      "FIPS Code",
      "City",
      "County Code",
      "County FIPS",
      "Country",
      "Province",
      "Region"
    ],
    "explanation": "Identifies strings that represent official US county names, emphasizing proper noun tokens followed by the word 'County'. This is suitable for classifying columns where values are full county designations (e.g., 'Los Angeles County') rather than codes or abbreviations. The pattern is constrained to typical county naming conventions, including support for hyphens, apostrophes, and periods within name tokens, and requires the string to end with 'County' to avoid false positives like appended state abbreviations or codes.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:45.810653"
  },
  {
    "resultType": "generated",
    "semanticType": "road",
    "description": "This type captures full English street names including both the identifying name and the street type suffix for addressing and navigation purposes. The values represent complete street designations using proper English spelling, capitalization, and standard type markers such as Street, Avenue, or Road.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-zA-Z'-]*|\\d{1,3}(st|nd|rd|th))( ([A-Z][a-zA-Z'-]*|\\d{1,3}(st|nd|rd|th))){0,4} (Street|Avenue|Road|Boulevard|Drive|Lane|Court|Place|Terrace|Way|Circle|Highway|Parkway|Square|Trail|Crescent)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9470,
    "headerPatterns": [
      {
        "regExp": "(?i).*(street|road|avenue|boulevard|drive|lane|court|place|terrace|way|circle).*(name|label|full).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Street Name"
        ],
        "negativeExamples": [
          "House Number"
        ]
      },
      {
        "regExp": "(?i).*(street|road|avenue|boulevard|drive).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Street"
        ],
        "negativeExamples": [
          "City"
        ]
      },
      {
        "regExp": "(?i).*\\baddress\\b.*\\b(street|road|avenue)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Street Address"
        ],
        "negativeExamples": [
          "ZIP Code"
        ]
      },
      {
        "regExp": "(?i).*\\b(st|rd|ave|blvd|dr|ln|ct|way)\\b.*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "St Name"
        ],
        "negativeExamples": [
          "State Name"
        ]
      },
      {
        "regExp": "(?i).*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Main Street",
      "Elm Avenue",
      "Old Mill Road",
      "St John's Road",
      "Cedar Drive",
      "Maple Lane",
      "1st Avenue",
      "King's Way"
    ],
    "negativeContentExamples": [
      "Main",
      "Main St",
      "123 Main Street",
      "Elm Avenue West",
      "Highway 50",
      "Baker-Street",
      "O'Connell",
      "Oak rd"
    ],
    "positiveHeaderExamples": [
      "Street Name",
      "Road Name",
      "Street",
      "Street Address",
      "Full Street Name",
      "Avenue Name",
      "Road Label"
    ],
    "negativeHeaderExamples": [
      "House Number",
      "City",
      "ZIP Code",
      "Address Line 2",
      "State",
      "House ID",
      "Country"
    ],
    "explanation": "Identifies full English street names that include a proper name component and a spelled-out street type suffix (e.g., Street, Avenue, Road). Useful for normalizing address fields, geocoding, and separating street names from house numbers or other address components.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:49.203906"
  },
  {
    "resultType": "generated",
    "semanticType": "status",
    "description": "Open-ended text fields containing human-readable natural language such as sentences, phrases, or short paragraphs without predefined formats or constraints. Values are typically multi-word and may include spaces and punctuation with variable length.\n\nUnlike short categorical status codes, this type focuses on free-form narrative content (e.g., descriptions, notes, comments) and does not include coded or enumerated statuses.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']+\\b[-\\s,;:.]+\\b[A-Za-z][A-Za-z']+\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9300,
    "headerPatterns": [
      {
        "regExp": "(?i).*status.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "status_description"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*comment.*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comment_text"
        ],
        "negativeExamples": [
          "comment_count"
        ]
      },
      {
        "regExp": "(?i).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "case_notes"
        ],
        "negativeExamples": [
          "note_id"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "descriptor_code"
        ]
      },
      {
        "regExp": "(?i).*desc.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "short_desc"
        ],
        "negativeExamples": [
          "detail_level"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "price"
        ]
      }
    ],
    "positiveContentExamples": [
      "Waiting for customer response",
      "Issue resolved after reboot",
      "Pending approval from manager",
      "Shipment delayed due to weather",
      "Customer requested refund",
      "Needs verification of address",
      "Working as expected",
      "Please see attached report"
    ],
    "negativeContentExamples": [
      "Closed",
      "Open",
      "OK",
      "2024-05-09",
      "A12-45Z",
      "ID12345",
      "N/A",
      "Error 404"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Status Description",
      "Comment Text",
      "Free Text",
      "Case Notes"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status Code",
      "Comment Count",
      "Note_ID",
      "Text_ID"
    ],
    "explanation": "This semantic type targets free-form narrative fields such as descriptions, notes, and comments that typically contain at least two words of natural language text, optionally including punctuation. It is useful for identifying unstructured text fields where users write explanations, observations, or status narratives rather than structured codes or numeric identifiers.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:49.607595"
  },
  {
    "resultType": "generated",
    "semanticType": "source",
    "description": "This type captures web addresses and resource locators used to identify and access content across networks including websites, files, and services. The values represent complete URL strings including protocol schemes, domain names, paths, and optional parameters following standardized URI formatting conventions.",
    "pluginType": "regex",
    "regexPattern": "\\b(http|https|ftp|ftps|sftp|ws|wss)://([A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?\\.)+[A-Za-z]{2,63}(:[0-9]{2,5})?(/[A-Za-z0-9._~!$&'()*+,;=:@/%-]*)?(\\?[A-Za-z0-9._~!$&'()*+,;=:@/%-]*)?(#[A-Za-z0-9._~!$&'()*+,;=:@/%-]*)?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9180,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\bsource\\b.*\\burl\\b.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "source_url"
        ],
        "negativeExamples": [
          "resource_id"
        ]
      },
      {
        "regExp": "(?i).*\\b(website|web|page)\\b.*\\burl\\b.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "website_url"
        ],
        "negativeExamples": [
          "web_port"
        ]
      },
      {
        "regExp": "(?i).*\\bsrc\\b.*\\burl\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "src_url"
        ],
        "negativeExamples": [
          "src_lang"
        ]
      },
      {
        "regExp": "(?i).*\\bweb(site)?\\b.*\\baddress\\b.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "Web Address"
        ],
        "negativeExamples": [
          "Postal Address"
        ]
      },
      {
        "regExp": "(?i).*\\bweb(site)?\\b.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Website"
        ],
        "negativeExamples": [
          "Webmaster"
        ]
      },
      {
        "regExp": "(?i).*\\burl\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "URL"
        ],
        "negativeExamples": [
          "URI"
        ]
      }
    ],
    "positiveContentExamples": [
      "https://www.example.com",
      "http://example.org/about",
      "https://sub.domain.co.uk/path/to/page?utm_source=newsletter&id=42",
      "ftp://files.example.net/downloads/archive.zip",
      "https://example.com:8443/api/v1/items?limit=100#top",
      "wss://socket.example.io/chat",
      "sftp://host.example.com/home/user/data.csv",
      "ftps://secure.example.com/files"
    ],
    "negativeContentExamples": [
      "www.example.com/index.html",
      "http:/example.com",
      "https://example",
      "https://example..com",
      "http://-bad.com",
      "s3://bucket/key",
      "mailto:info@example.com",
      "https:///example.com"
    ],
    "positiveHeaderExamples": [
      "URL",
      "Website",
      "Web Address",
      "source_url",
      "website_url",
      "page_url",
      "landing_page_url"
    ],
    "negativeHeaderExamples": [
      "Domain Name",
      "Email Address",
      "File Path",
      "Domain",
      "Email",
      "Filepath",
      "Resource ID",
      "URI"
    ],
    "explanation": "The URI.source type identifies full web URLs used to locate content or services across networks. It requires an explicit scheme (e.g., http, https, ftp, sftp, ws, wss), a well-formed domain, and optional port, path, query, and fragment components. Typical use cases include classifying columns containing website links, API endpoints, download links, or websocket endpoints while excluding incomplete addresses or non-URL identifiers.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:54.194343"
  },
  {
    "resultType": "generated",
    "semanticType": "age",
    "description": "This type captures individual ages as they appear in demographic data, personal records, and age-related analysis using numerical year values. The values represent current age in completed years without fractional components, typically ranging from birth to advanced elderly ages.",
    "pluginType": "regex",
    "regexPattern": "\\b(0|[1-9]\\d|1[01]\\d|120)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 92,
    "priority": 9500,
    "headerPatterns": [
      {
        "regExp": "(?i).*person.*age.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "Person Age"
        ],
        "negativeExamples": [
          "Birth Year"
        ]
      },
      {
        "regExp": "(?i).*(years[ _-]*old|age[ _-]*years).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Years Old"
        ],
        "negativeExamples": [
          "Date of Birth"
        ]
      },
      {
        "regExp": "(?i).*(demographic|demographics).*age.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "Demographic Age"
        ],
        "negativeExamples": [
          "Name"
        ]
      },
      {
        "regExp": "(?i).*age.*yr[s]?.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Age Yrs"
        ],
        "negativeExamples": [
          "Year"
        ]
      },
      {
        "regExp": "(?i).*number.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "Number"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "0",
      "1",
      "9",
      "18",
      "35",
      "64",
      "99",
      "120"
    ],
    "negativeContentExamples": [
      "121",
      "-1",
      "3.5",
      "07",
      "99 years",
      "1990",
      "65+",
      "02"
    ],
    "positiveHeaderExamples": [
      "Age",
      "Person Age",
      "Years Old",
      "Age (Years)",
      "Demographic Age",
      "Age Years",
      "Age Yrs"
    ],
    "negativeHeaderExamples": [
      "Birth Year",
      "Date of Birth",
      "Name",
      "Age Group",
      "Age Range",
      "Year of Birth",
      "Years Experience"
    ],
    "explanation": "PERSON.AGE identifies columns and values that represent a person's age in completed years. It focuses on whole-number years and excludes ranges, textual qualifiers, and out-of-bound values. Typical uses include demographic profiling, eligibility checks, and cohort analysis.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:56.171195"
  },
  {
    "resultType": "generated",
    "semanticType": "comment",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b [A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9200,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|ticket).*comments?.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "Customer Comments"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(internal|agent|staff).*notes.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Internal Notes"
        ],
        "negativeExamples": [
          "Internal ID"
        ]
      },
      {
        "regExp": "(?i).*(issue|problem|case).*description.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Issue Description"
        ],
        "negativeExamples": [
          "Case Number"
        ]
      },
      {
        "regExp": "(?i).*notes?.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Price"
        ]
      },
      {
        "regExp": "(?i).*comment.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Comments"
        ],
        "negativeExamples": [
          "ID"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review and update",
      "Customer requested a refund",
      "Left message on voicemail",
      "Issue resolved after restart",
      "Package arrived damaged",
      "Call back next week",
      "Payment pending, awaiting approval",
      "Works as expected"
    ],
    "negativeContentExamples": [
      "12345",
      "2023-07-15",
      "A1B2C3",
      "john@example.com",
      "10.99",
      "NY",
      "http://example.com",
      "OK"
    ],
    "positiveHeaderExamples": [
      "Comments",
      "Customer Comments",
      "Internal Notes",
      "Issue Description",
      "General Notes",
      "Additional Text",
      "Case Comments",
      "Description"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Customer Name",
      "Order Number",
      "Email",
      "URL",
      "Status"
    ],
    "explanation": "This semantic type is intended for fields that store free-form, human-authored text such as remarks, notes, descriptions, or multi-sentence comments. The detection favors natural language strings containing at least two alphabetic words, helping avoid collisions with identifiers, dates, codes, or numeric values. Use it to classify descriptive text columns where content varies widely by record.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:56.294773"
  },
  {
    "resultType": "generated",
    "semanticType": "author",
    "description": "Full personal names in given-name followed by family-name order, separated by a single space. No middle names/initials, titles, suffixes, or extra components are allowed. Names may include a single hyphen or apostrophe within either token.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][a-z]+([-'][A-Z][a-z]+)? [A-Z][a-z]+([-'][A-Z][a-z]+)?\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9520,
    "headerPatterns": [
      {
        "regExp": "(?i).*author.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Author Name"
        ],
        "negativeExamples": [
          "Author Email"
        ]
      },
      {
        "regExp": "(?i).*author.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "Author"
        ],
        "negativeExamples": [
          "Full Name"
        ]
      },
      {
        "regExp": "(?i).*full.*name.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Full Name"
        ],
        "negativeExamples": [
          "Last Name"
        ]
      },
      {
        "regExp": "(?i).*(byline|writer|pen.*name).*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "Byline"
        ],
        "negativeExamples": [
          "Title"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Emily Davis",
      "Anne-Marie Clark",
      "Liam O'Brien",
      "Maria Lopez",
      "Victor Huang",
      "Chloe Martin",
      "Daniel Perez"
    ],
    "negativeContentExamples": [
      "John A Smith",
      "Dr John Smith",
      "John  Smith",
      "Smith, John",
      "J. Smith",
      "John Smith Jr",
      "JOHN SMITH",
      "John"
    ],
    "positiveHeaderExamples": [
      "Full Name",
      "Name",
      "Person Name",
      "Author Name",
      "Byline",
      "Writer Name",
      "Pen Name",
      "Author"
    ],
    "negativeHeaderExamples": [
      "First Name",
      "Last Name",
      "Email Address",
      "Username",
      "Account Name",
      "Title",
      "Author Email",
      "Contact Person"
    ],
    "explanation": "This semantic type detects two-token personal names in the common Western order of given name followed by family name, enforcing a single space separator and permitting a single internal hyphen or apostrophe within each token. It excludes names with middle components, titles, suffixes, initials, commas, or multiple spaces, making it suitable for identifying clean first-last author name fields.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:56.786316"
  },
  {
    "resultType": "generated",
    "semanticType": "parent",
    "description": "Full personal names in Western order: a given name followed by a family name, separated by a single space. No middle names, initials, titles, suffixes, or additional components; only two name tokens are allowed, each composed of letters and optionally a single internal hyphen or apostrophe segment.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Za-z]{2,}[-'][A-Za-z]{2,}|[A-Za-z]{2,})\\s([A-Za-z]{2,}[-'][A-Za-z]{2,}|[A-Za-z]{2,})\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9370,
    "headerPatterns": [
      {
        "regExp": "(?i).*full.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Full Name"
        ],
        "negativeExamples": [
          "First Name"
        ]
      },
      {
        "regExp": "(?i).*(person).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Person Name"
        ],
        "negativeExamples": [
          "Last Name"
        ]
      },
      {
        "regExp": "(?i).*(legal|primary).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Legal Name"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Mary-Jane Watson",
      "Liam Carter",
      "Anne-Marie Clark",
      "Chloe Brown",
      "Miguel Alvarez",
      "Zoe Chen",
      "Daniel Johnson"
    ],
    "negativeContentExamples": [
      "John",
      "John  Smith",
      "John Smith Jr",
      "Mr John Smith",
      "John A Smith",
      "Smith, John",
      "Ana M. Ruiz",
      "John-Smith"
    ],
    "positiveHeaderExamples": [
      "Full Name",
      "Name",
      "Person Name",
      "Legal Name",
      "Primary Name",
      "Contact Name",
      "Customer Name",
      "Account Holder Name"
    ],
    "negativeHeaderExamples": [
      "First Name",
      "Last Name",
      "Email Address",
      "Given Name",
      "Family Name",
      "Username",
      "Display Name",
      "Surname"
    ],
    "explanation": "This semantic type targets two-token personal names in given-family order, separated by a single space, with each token containing at least two letters. It excludes titles, suffixes, initials, middle names, and name strings with extra tokens or punctuation beyond an optional internal hyphen or apostrophe.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:44:58.217104"
  },
  {
    "resultType": "generated",
    "semanticType": "abbreviation",
    "description": "Open-ended text fields containing human-readable content without predefined formats or constraints. Values are natural language sentences, phrases, or short paragraphs of variable length and content depending on context.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ \\t]+[A-Za-z][A-Za-z0-9 ,;:()'\"\\/\\-&_\\.]{2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9570,
    "headerPatterns": [
      {
        "regExp": "(?i).*customer.*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*order.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_notes"
        ],
        "negativeExamples": [
          "order_number"
        ]
      },
      {
        "regExp": "(?i).*product.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|remarks|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "remarks"
        ],
        "negativeExamples": [
          "status"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer requested expedited shipping due to upcoming trip.",
      "Package arrived damaged; requesting replacement.",
      "No issues observed during initial setup.",
      "Payment received on 2025-05-12; order released.",
      "Please contact via email before dispatch.",
      "Item color differs slightly from website photos.",
      "Follow up next week after client review.",
      "Leave at front desk if recipient is unavailable."
    ],
    "negativeContentExamples": [
      "ID-00421",
      "2025-05-12",
      "$12.99",
      "OK",
      "Approved",
      "N/A",
      "AB-1234",
      "15:30"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Order Notes",
      "Customer Comments",
      "Product Description",
      "Additional Notes",
      "General Remarks"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Order Number",
      "Product Code",
      "Quantity",
      "Status",
      "Zip Code"
    ],
    "explanation": "This semantic type identifies free-form, human-readable text fields typically used for descriptions, notes, comments, and similar narrative entries. The content pattern requires at least two words with alphabetic characters separated by whitespace, allowing typical punctuation while avoiding codes, single tokens, dates, or purely numeric identifiers. Header patterns prioritize specific domain variants (customer comments, order notes) before general terms and the primitive 'description'. The high threshold and low priority mitigate conflict with more specific types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:00.267540"
  },
  {
    "resultType": "generated",
    "semanticType": "race",
    "description": "This type captures racial and ethnic designations as they appear in demographic surveys, census forms, and diversity analysis using complete descriptive terminology. The values represent standard racial and ethnic categories following established demographic classification systems with full English language terms.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b(white|caucasian|black or african american|african american|black|asian|american indian or alaska native|american indian|alaska native|native hawaiian or other pacific islander|native hawaiian|other pacific islander|pacific islander|hispanic or latino|hispanic|latino|middle eastern or north african|middle eastern|north african|multiracial|two or more races)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9220,
    "headerPatterns": [
      {
        "regExp": "(?i).*(race and ethnicity|race/ethnicity|racial group|ethnic group|race category).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Racial Group"
        ],
        "negativeExamples": [
          "Race Code"
        ]
      },
      {
        "regExp": "(?i).*(race|ethnicity).*(group|category|classification).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Race Category"
        ],
        "negativeExamples": [
          "Nationality"
        ]
      },
      {
        "regExp": "(?i).*(racial|ethnic).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Ethnicity"
        ],
        "negativeExamples": [
          "Country"
        ]
      },
      {
        "regExp": "(?i).*race.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Race"
        ],
        "negativeExamples": [
          "Gender"
        ]
      }
    ],
    "positiveContentExamples": [
      "White",
      "Black or African American",
      "Asian",
      "American Indian or Alaska Native",
      "Native Hawaiian or Other Pacific Islander",
      "Hispanic or Latino",
      "Middle Eastern or North African",
      "Two or More Races"
    ],
    "negativeContentExamples": [
      "Afro-American",
      "Asiatic",
      "European",
      "MENA",
      "Two or more ethnicities",
      "Prefer not to answer",
      "American",
      "Middle East and North Africa"
    ],
    "positiveHeaderExamples": [
      "Race",
      "Ethnicity",
      "Racial Group",
      "Race Category",
      "Ethnic Group",
      "Race and Ethnicity",
      "Racial Classification",
      "Race/Ethnicity"
    ],
    "negativeHeaderExamples": [
      "Race Code",
      "Nationality",
      "Country",
      "Gender",
      "Language",
      "Race Identifier",
      "Ethnicity Code",
      "Country of Origin"
    ],
    "explanation": "PERSON.race identifies columns whose values are standard racial and ethnic categories expressed in full English terms commonly used in demographic reporting. It targets clean, human-readable labels rather than codes or abbreviations, and is suitable for survey analytics, HR diversity reporting, and census-aligned datasets.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:00.882310"
  },
  {
    "resultType": "generated",
    "semanticType": "created",
    "description": "This type captures Unix timestamp values expressed in seconds precision for standard time measurement and system operations. The values represent time as an integer count of seconds from the Unix epoch without any formatting, separators, or textual date components.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9]\\d{9}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 9710,
    "headerPatterns": [
      {
        "regExp": "(?i).*(unix|posix)[ _-]*timestamp.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Unix Timestamp"
        ],
        "negativeExamples": [
          "Time"
        ]
      },
      {
        "regExp": "(?i).*epoch[ _-]*time.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Epoch Time"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*(unix)[ _-]*time.*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "Unix Time"
        ],
        "negativeExamples": [
          "Formatted Date"
        ]
      },
      {
        "regExp": "(?i).*created[ _-]*timestamp.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Created Timestamp"
        ],
        "negativeExamples": [
          "Epoch Time"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "Timestamp"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "1234567890",
      "1451606400",
      "1500000000",
      "1609459200",
      "1672531200",
      "1704067200",
      "1711920000",
      "2147483647"
    ],
    "negativeContentExamples": [
      "123456789",
      "1234567890123",
      "1609459200000",
      "1609459200.0",
      "1,609,459,200",
      "1609459200Z",
      "01609459200",
      "0000000000"
    ],
    "positiveHeaderExamples": [
      "Timestamp",
      "Unix Timestamp",
      "Epoch Time",
      "Unix Time",
      "Created Timestamp",
      "Record Timestamp",
      "POSIX Timestamp",
      "Event Timestamp"
    ],
    "negativeHeaderExamples": [
      "Date",
      "Time",
      "Formatted Date",
      "Datetime",
      "Event Date",
      "ID",
      "Created Date",
      "Timezone"
    ],
    "explanation": "Identifies integer Unix epoch values in seconds (10-digit, no separators or text). Useful for parsing event creation times, log records, and system-generated timestamps where values are stored as raw seconds since 1970-01-01 UTC. The regex prioritizes precision to reduce collisions with generic numeric fields and pairs well with header cues emphasizing epoch/unix timestamp semantics.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:05.259699"
  },
  {
    "resultType": "generated",
    "semanticType": "reference",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier can contain letters, numbers, and common symbols but must be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9]{0,11}([\\-_/][A-Za-z0-9]{1,12}){0,4}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9650,
    "headerPatterns": [
      {
        "regExp": "(?i).*unique.*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Unique ID"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*(reference[_ ]?id|ref[_ ]?id).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Reference ID"
        ],
        "negativeExamples": [
          "Identifier"
        ]
      },
      {
        "regExp": "(?i).*(external|record|entity).*reference.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "External Reference"
        ],
        "negativeExamples": [
          "Description"
        ]
      },
      {
        "regExp": "(?i).*(identifier|id).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Identifier"
        ],
        "negativeExamples": [
          "Name"
        ]
      },
      {
        "regExp": "(?i).*ref.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Ref"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Code"
        ],
        "negativeExamples": [
          "Amount"
        ]
      }
    ],
    "positiveContentExamples": [
      "A12B9",
      "REF-2024-0001",
      "C7X9-AB",
      "OBJ_000123",
      "XZ/19-ALPHA",
      "R1-2B3C",
      "K9Q4",
      "INVREF_A1B2C3"
    ],
    "negativeContentExamples": [
      "2024-0001",
      "A B C 123",
      "A-123-",
      "123ABC",
      "A.123",
      "ID:ABC123",
      "A__B",
      "ABCDEF-GHIJKLMNOPQRSTUVWX"
    ],
    "positiveHeaderExamples": [
      "ID",
      "Identifier",
      "Unique ID",
      "Reference ID",
      "External Reference",
      "Ref",
      "Record Reference",
      "Code"
    ],
    "negativeHeaderExamples": [
      "Name",
      "Description",
      "Date",
      "Address",
      "Email",
      "Phone",
      "Status",
      "Notes"
    ],
    "explanation": "IDENTITY.REFERENCE captures general-purpose reference codes used to uniquely identify records or entities across diverse systems. It targets compact, non-spaced alphanumeric identifiers that may use limited separators (dash, underscore, slash) and start with a letter, minimizing collisions with dates, numbers, and free text.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:07.605937"
  },
  {
    "resultType": "generated",
    "semanticType": "route",
    "description": "Full English street names consisting of the identifying thoroughfare name followed by a fully spelled street type suffix (e.g., Street, Avenue, Road). Values are proper names only (no house numbers), using standard capitalization and complete suffix words rather than abbreviations.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+( [A-Z][a-z]+){0,3}|[0-9]{1,3}(st|nd|rd|th)) (Street|Avenue|Road|Boulevard|Drive|Court|Lane|Terrace|Place|Way|Parkway|Circle|Crescent|Square|Trail|Highway)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9680,
    "headerPatterns": [
      {
        "regExp": "(?i).*street[_ ]?name.*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "Street Name"
        ],
        "negativeExamples": [
          "House Number"
        ]
      },
      {
        "regExp": "(?i).*(street|road|avenue|boulevard|drive|court|lane|terrace|place|way|parkway|circle|square|trail|highway).*name.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Road Name"
        ],
        "negativeExamples": [
          "ZIP Code"
        ]
      },
      {
        "regExp": "(?i).*(street|road|avenue|boulevard|drive|court|lane|terrace|place|way|parkway|circle|square|trail|highway).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Street"
        ],
        "negativeExamples": [
          "City"
        ]
      },
      {
        "regExp": "(?i).*(st|rd|ave|blvd|dr|ln|ct|hwy).*name.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Avenue Name"
        ],
        "negativeExamples": [
          "State"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "StreetName"
        ],
        "negativeExamples": [
          "Number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Main Street",
      "Oak Avenue",
      "Pine Road",
      "Maple Boulevard",
      "Cedar Drive",
      "Willow Lane",
      "King Court",
      "River Terrace"
    ],
    "negativeContentExamples": [
      "Main St",
      "123 Main Street",
      "Elm street",
      "Main Street West",
      "MainStreet",
      "Broadway",
      "Old Mill Rd",
      "Elm"
    ],
    "positiveHeaderExamples": [
      "Street Name",
      "Road Name",
      "Street",
      "Avenue Name",
      "StreetName",
      "Road"
    ],
    "negativeHeaderExamples": [
      "House Number",
      "City",
      "ZIP Code",
      "Address",
      "State",
      "Latitude",
      "Person Name"
    ],
    "explanation": "This type identifies full street thoroughfare names composed of one to four capitalized tokens (or an ordinal like 3rd) followed by a fully spelled street type suffix. It excludes house numbers, abbreviations (e.g., St, Rd), trailing directional qualifiers, and additional address components. Typical use cases include extracting or validating the thoroughfare portion of addresses for geocoding, mapping, and navigation workflows.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:09.958926"
  },
  {
    "resultType": "generated",
    "semanticType": "project",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'(),.;:/\\-]{1,}[ ]+[A-Za-z][A-Za-z0-9'(),.;:/\\-]{1,}[ ]+[A-Za-z][A-Za-z0-9'(),.;:/\\-]{1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9560,
    "headerPatterns": [
      {
        "regExp": "(?i).*project.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_description"
        ],
        "negativeExamples": [
          "project_id"
        ]
      },
      {
        "regExp": "(?i).*project.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_notes"
        ],
        "negativeExamples": [
          "project_code"
        ]
      },
      {
        "regExp": "(?i).*(item|record).*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "record_comments"
        ],
        "negativeExamples": [
          "record_count"
        ]
      },
      {
        "regExp": "(?i).*(desc|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "short_desc"
        ],
        "negativeExamples": [
          "order_status"
        ]
      },
      {
        "regExp": "(?i).*(comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "user_comments"
        ],
        "negativeExamples": [
          "unit_price"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Project launch is scheduled for next quarter.",
      "Please review the attached specifications before approval.",
      "The system encountered an intermittent error during backup.",
      "Customer requested expedited shipping for this order.",
      "Initial draft includes scope, timeline, and budget details.",
      "This note explains the reasoning behind the chosen approach.",
      "Provide additional context about the change and its impact.",
      "Add comments describing known limitations and next steps."
    ],
    "negativeContentExamples": [
      "Pending review",
      "See notes",
      "N/A",
      "OK",
      "12/05/2024",
      "A12-B34",
      "http://example.com",
      "ID 12345"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Project Description",
      "Item Notes",
      "User Comments",
      "Free Text",
      "Remarks"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Code",
      "Status",
      "Quantity",
      "Phone",
      "Postal Code"
    ],
    "explanation": "Use this type to detect free-form, human-written text fields such as descriptions, notes, comments, or other narrative content. It is useful for columns where the content consists of multiple words or sentences rather than structured identifiers, dates, or codes.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:12.144786"
  },
  {
    "resultType": "generated",
    "semanticType": "end",
    "description": "Unix timestamp values expressed as whole seconds since 1970-01-01T00:00:00Z. Values are unformatted positive integers with no separators, text, or fractional parts, typically 9\u201310 digits.",
    "pluginType": "regex",
    "regexPattern": "\\b[1-9][0-9]{8,9}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 9690,
    "headerPatterns": [
      {
        "regExp": "(?i).*unix.*timestamp.*",
        "confidence": 97,
        "mandatory": true,
        "positiveExamples": [
          "Unix Timestamp"
        ],
        "negativeExamples": [
          "Timestamp"
        ]
      },
      {
        "regExp": "(?i).*epoch.*time.*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "Epoch Time"
        ],
        "negativeExamples": [
          "Time"
        ]
      },
      {
        "regExp": "(?i).*epoch.*sec.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "EpochSeconds"
        ],
        "negativeExamples": [
          "Epoch Millis"
        ]
      },
      {
        "regExp": "(?i).*ts.*epoch.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ts_epoch"
        ],
        "negativeExamples": [
          "Timestamp"
        ]
      },
      {
        "regExp": "(?i).*timestamp.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Timestamp"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "946684800",
      "1609459200",
      "1700000000",
      "1234567890",
      "915148800",
      "315532800",
      "1451606400",
      "1893456000"
    ],
    "negativeContentExamples": [
      "1617181920123",
      "1623456789.0",
      "1,623,456,789",
      "0102030405",
      "12345678",
      "12345678901",
      "+1623456789",
      "1623456789Z"
    ],
    "positiveHeaderExamples": [
      "Timestamp",
      "Unix Timestamp",
      "Epoch Time",
      "EpochSeconds",
      "ts_epoch",
      "Unix time seconds"
    ],
    "negativeHeaderExamples": [
      "Date",
      "Time",
      "Formatted Date",
      "Duration",
      "Millis",
      "Created At"
    ],
    "explanation": "Identifies columns containing Unix epoch timestamps in seconds precision. Values are strictly numeric tokens of 9\u201310 digits with no signs, separators, or decimals, distinguishing them from millisecond epochs and formatted dates. Suitable for log/event time fields stored as raw seconds.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:12.698589"
  },
  {
    "resultType": "generated",
    "semanticType": "version",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier can contain letters, numbers, and common separators such as hyphen, underscore, or dot, and is expected to be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b[A-Z]+[0-9][A-Z0-9]{1,}\\b|\\b[0-9]+[A-Z][A-Z0-9]{1,}\\b|\\b[0-9A-Z]*[A-Z][0-9A-Z]*([-_.][0-9A-Z]+){1,5}\\b|\\b[0-9A-Z]+([-_.][0-9A-Z]*[A-Z][0-9A-Z]*){1,5}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9600,
    "headerPatterns": [
      {
        "regExp": "(?i).*unique.*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Unique ID"
        ],
        "negativeExamples": [
          "Unique Name"
        ]
      },
      {
        "regExp": "(?i).*(record|entity).*(identifier|id).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Record Identifier"
        ],
        "negativeExamples": [
          "Record Date"
        ]
      },
      {
        "regExp": "(?i).*identifier.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Identifier"
        ],
        "negativeExamples": [
          "Description"
        ]
      },
      {
        "regExp": "(?i).*(uid|uniqid|id).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ID"
        ],
        "negativeExamples": [
          "Name"
        ]
      },
      {
        "regExp": "(?i).*code.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Code"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "ID-2048-A",
      "ACC_98765_Z",
      "U1234",
      "2024-AB-12",
      "REF.A7B9",
      "CUST-0001",
      "X9Z2Y",
      "INV_2023_000017"
    ],
    "negativeContentExamples": [
      "ABCDEF",
      "123456",
      "ID 1234",
      "A/B-12",
      "_ID-123",
      "ID-",
      "A.",
      "#ID123"
    ],
    "positiveHeaderExamples": [
      "ID",
      "Identifier",
      "Unique ID",
      "Record ID",
      "Entity Identifier",
      "UID",
      "Customer Code",
      "Unique Identifier"
    ],
    "negativeHeaderExamples": [
      "Name",
      "Description",
      "Date",
      "Version",
      "Status",
      "Quantity",
      "Email",
      "Address"
    ],
    "explanation": "Use this type to detect columns that store unique identification codes combining letters, digits, and common separators like hyphen, underscore, or dot. It is suitable for generic record or entity identifiers where format varies but typically includes both alphabetic and numeric characters. The header patterns prioritize explicit ID/identifier cues and fall back to the primitive concept of a code to minimize conflicts with other types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:14.321012"
  },
  {
    "resultType": "generated",
    "semanticType": "duration",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[ A-Za-z0-9'\"()\\-/,.;:?!&]*[A-Za-z][A-Za-z0-9'\"()\\-/,.;:?!&]*\\b(\\s+\\b[ A-Za-z0-9'\"()\\-/,.;:?!&]*[A-Za-z][A-Za-z0-9'\"()\\-/,.;:?!&]*\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9550,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\b(item|project|record)\\b[ _-]?\\b(description|desc)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_description"
        ],
        "negativeExamples": [
          "project_id"
        ]
      },
      {
        "regExp": "(?i).*\\b(customer|order)\\b[ _-]?\\b(comments|notes)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_comments"
        ],
        "negativeExamples": [
          "order_date"
        ]
      },
      {
        "regExp": "(?i).*\\b(detailed|long|freeform)\\b[ _-]?\\b(description|notes|comments)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "freeform_description"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*\\b(desc|cmts|cmt|notes?)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "desc_text"
        ],
        "negativeExamples": [
          "doc_text"
        ]
      },
      {
        "regExp": "(?i).*\\bdescription\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Package delivered to the front desk after 5 PM.",
      "Customer reported intermittent connectivity issues.",
      "Requires manager approval before shipment.",
      "Payment received; awaiting confirmation email.",
      "Notes: fragile items, handle with care.",
      "Please contact support if problems persist.",
      "The device restarted unexpectedly during testing.",
      "Returned due to damaged packaging."
    ],
    "negativeContentExamples": [
      "No issues",
      "Pending",
      "OK",
      "N/A",
      "2024-06-01",
      "100.00",
      "john.doe@example.com",
      "A12-B34"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Item Description",
      "Detailed Notes",
      "Project_Comments",
      "desc_text",
      "freeform_description"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status",
      "Code",
      "Quantity",
      "Priority",
      "Name"
    ],
    "explanation": "DESCRIPTION identifies free-form, natural-language text fields often used for notes, comments, or narrative descriptions where content is unconstrained and variable in length. The pattern favors multi-word textual content to distinguish it from short codes, single-word labels, and structured identifiers.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:16.242812"
  },
  {
    "resultType": "generated",
    "semanticType": "department",
    "description": "This type captures the complete names of US states and territories as they are used in official documentation and government administration. The values represent full state names using proper English spelling and standard formatting as established by the US constitutional and administrative systems.",
    "pluginType": "regex",
    "regexPattern": "\\b(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|District of Columbia|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New Hampshire|New Jersey|New Mexico|New York|North Carolina|North Dakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode Island|South Carolina|South Dakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West Virginia|Wisconsin|Wyoming|American Samoa|Guam|Northern Mariana Islands|Puerto Rico|U\\.S\\. Virgin Islands)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9660,
    "headerPatterns": [
      {
        "regExp": "(?i).*(united states|us).*(state).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US State Name"
        ],
        "negativeExamples": [
          "State Name"
        ]
      },
      {
        "regExp": "(?i).*(state).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State Name"
        ],
        "negativeExamples": [
          "State Code"
        ]
      },
      {
        "regExp": "(?i).*(united states|us).*(state).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "US State"
        ],
        "negativeExamples": [
          "State"
        ]
      },
      {
        "regExp": "(?i).*(state).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "State"
        ],
        "negativeExamples": [
          "Country"
        ]
      },
      {
        "regExp": "(?i).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "California",
      "New York",
      "North Dakota",
      "Rhode Island",
      "District of Columbia",
      "U.S. Virgin Islands",
      "Puerto Rico",
      "American Samoa"
    ],
    "negativeContentExamples": [
      "US Virgin Islands",
      "NewYork",
      "Washington D.C.",
      "PuertoRico",
      "Calif",
      "N. Carolina",
      "Virgin Island",
      "District of Colombia"
    ],
    "positiveHeaderExamples": [
      "State",
      "State Name",
      "US State",
      "US State Name",
      "United States State",
      "State of Residence",
      "Home State",
      "Resident State"
    ],
    "negativeHeaderExamples": [
      "State Code",
      "Country",
      "County",
      "Province",
      "Region",
      "Country Name",
      "Postal Code",
      "Nationality"
    ],
    "explanation": "This semantic type identifies full, properly formatted names of US states and territories in data columns and cells. It is useful for validating geographic attributes, normalizing location fields, and distinguishing full state/territory names from abbreviations or codes in datasets.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:16.685657"
  },
  {
    "resultType": "generated",
    "semanticType": "number",
    "description": "This type represents a unique alphanumeric code assigned to individual records, entities, or objects for identification purposes. The identifier can contain letters, numbers, and common symbols but must be unique within its context.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b([A-Z][A-Z0-9._/-]*[0-9][A-Z0-9._/-]*|[0-9][A-Z0-9._/-]*[A-Z][A-Z0-9._/-]*)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9630,
    "headerPatterns": [
      {
        "regExp": "(?i).*unique.*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Unique ID"
        ],
        "negativeExamples": [
          "ID"
        ]
      },
      {
        "regExp": "(?i).*record.*id.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Record ID"
        ],
        "negativeExamples": [
          "Identifier"
        ]
      },
      {
        "regExp": "(?i).*entity.*identifier.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Entity Identifier"
        ],
        "negativeExamples": [
          "Description"
        ]
      },
      {
        "regExp": "(?i).*uid.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "UID"
        ],
        "negativeExamples": [
          "ID"
        ]
      },
      {
        "regExp": "(?i).*identifier.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Identifier"
        ],
        "negativeExamples": [
          "Name"
        ]
      },
      {
        "regExp": "(?i).*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "ID Number"
        ],
        "negativeExamples": [
          "Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "A12",
      "ID-0001",
      "USR_42",
      "X9Y-7Z",
      "INV/2023-09",
      "C3PO",
      "R2-D2",
      "ACC.12345"
    ],
    "negativeContentExamples": [
      "123456",
      "ABCDEF",
      "ID 001",
      "2023/09",
      "A#001",
      "CODE?7",
      "A",
      "000-000"
    ],
    "positiveHeaderExamples": [
      "ID",
      "Identifier",
      "Unique ID",
      "Record ID",
      "Entity Identifier",
      "UID",
      "ID Number",
      "Number"
    ],
    "negativeHeaderExamples": [
      "Name",
      "Description",
      "Date",
      "Index",
      "Account",
      "Code",
      "Count",
      "Label"
    ],
    "explanation": "Classifies generic alphanumeric identifiers that include at least one letter and one digit, optionally using separators such as hyphen, underscore, slash, or dot. Useful for detecting record IDs and unique identifiers where formats vary across systems. High threshold and priority ensure it yields to more specific identifier subtypes while still covering broad real-world ID formats.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:18.479424"
  },
  {
    "resultType": "generated",
    "semanticType": "species",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z']+\\b([ \\t,;:()-]+\\b[A-Za-z][A-Za-z']+\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9640,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|case|item|record)[ _-]*(description|comments?|notes?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_description"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*(detailed[ _-]*description|free[ _-]*text|additional[ _-]*comments|additional[ _-]*notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "detailed_description"
        ],
        "negativeExamples": [
          "additional_charge"
        ]
      },
      {
        "regExp": "(?i).*(description|comments?|notes?|remarks|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "price"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmt|cmts|rmks|memo).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "desc"
        ],
        "negativeExamples": [
          "name"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported intermittent connectivity issues.",
      "Please follow up with the vendor next week.",
      "Item arrived damaged and requires replacement.",
      "The quick brown fox jumps over the lazy dog.",
      "This record contains confidential information; handle carefully.",
      "User requested access to the beta features.",
      "Payment received and applied to outstanding balance.",
      "Processing delayed due to maintenance on servers."
    ],
    "negativeContentExamples": [
      "Pending review",
      "All good",
      "OK",
      "N/A",
      "05/12/2023",
      "AB-123",
      "New",
      "On hold"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Detailed Notes",
      "General Comments",
      "Free Text",
      "Customer Description",
      "Order Comments"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Order ID",
      "Status Detail",
      "Information",
      "Category",
      "Amount"
    ],
    "explanation": "This semantic type is intended to detect free-form, human-readable text fields such as descriptions, notes, and comments. It prioritizes multi-word natural language content and common header naming conventions used for narrative text, helping distinguish open text from structured identifiers, dates, or numeric fields.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:20.103598"
  },
  {
    "resultType": "generated",
    "semanticType": "genus",
    "description": "Open-ended natural language text intended for human reading, typically composed of sentences or phrases with variable length and common punctuation. Values are not constrained to a fixed format, code list, or specific structure and often include descriptive context, instructions, or commentary.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z]+[ ]+[A-Za-z][A-Za-z]+[A-Za-z0-9 ,;:'\"()\\[\\]/%&\\-!?\\.]{3,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9670,
    "headerPatterns": [
      {
        "regExp": "(?i).*(long|full|detailed)[ _-]*(description|desc|notes|comment|comments).*",
        "confidence": 98,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "invoice_description"
        ]
      },
      {
        "regExp": "(?i).*(customer|order|record|general)[ _-]*(description|notes|comments).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*(additional|other|misc)[ _-]*(notes|comments|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_text"
        ],
        "negativeExamples": [
          "misc_code"
        ]
      },
      {
        "regExp": "(?i).*(free[ _-]*text|freeform|unstructured).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "text_length"
        ]
      },
      {
        "regExp": "(?i).*(description|desc|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Name"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported an intermittent issue with logging in after the latest update.",
      "Please deliver to the side entrance; the main gate is under maintenance.",
      "The system should retry the request twice before showing an error message.",
      "This item shows slight wear consistent with normal use; see photos for details.",
      "Payment will be processed within three business days unless otherwise noted.",
      "User prefers contact by email during weekdays between 9am and 5pm.",
      "Replace the filter monthly to maintain optimal performance and air quality.",
      "Notes: Batch failed due to timeout; rerun completed successfully."
    ],
    "negativeContentExamples": [
      "OK",
      "Paid",
      "12345",
      "A-123-B",
      "2024-07-31",
      "N/A",
      "See note",
      "REF12345"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Customer Comments",
      "General Notes",
      "Additional Text",
      "Free Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Code",
      "Amount",
      "Count",
      "Quantity",
      "Invoice Number"
    ],
    "explanation": "This semantic type targets free-form, human-readable text commonly found in descriptive fields such as descriptions, notes, and comments. It is designed for flexible content rather than structured identifiers, dates, or numeric values, and therefore uses a conservative regex that requires at least two words and additional context to reduce collisions with codes or short tokens.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:21.124242"
  },
  {
    "resultType": "generated",
    "semanticType": "length",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-.,;:!?]*( [A-Za-z][A-Za-z0-9'\u2019\\-.,;:!?]*)+",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9540,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Product Description"
        ],
        "negativeExamples": [
          "Product Code"
        ]
      },
      {
        "regExp": "(?i).*(customer|user).*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Notes"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(general|additional).*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Additional Comments"
        ],
        "negativeExamples": [
          "Additional Charges"
        ]
      },
      {
        "regExp": "(?i).*(desc|remarks|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Remarks"
        ],
        "negativeExamples": [
          "Retail Price"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Package delayed due to severe weather conditions.",
      "Customer requested expedited shipping for this order.",
      "Please contact support if the issue persists after reboot.",
      "Includes all accessories but missing original packaging.",
      "Payment received; awaiting confirmation from the bank.",
      "Item arrived damaged; replacement has been authorized.",
      "Meeting rescheduled to next week due to conflicts.",
      "This field captures any additional notes from the reviewer."
    ],
    "negativeContentExamples": [
      "A12345",
      "2024-06-01",
      "john.doe@example.com",
      "$19.99",
      "OK",
      "N/A",
      "ABC-123-XYZ",
      "http://example.com/resource"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "Customer Notes",
      "General Comments",
      "User Remarks",
      "Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "SKU",
      "Quantity",
      "Code",
      "Zip Code",
      "Amount"
    ],
    "explanation": "A broad, open-text semantic type intended to identify fields containing natural language phrases, sentences, or paragraphs rather than structured identifiers or codes. Useful for columns like descriptions, notes, and comments where content is variable and unconstrained.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:21.363119"
  },
  {
    "resultType": "generated",
    "semanticType": "price",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z'-]*\\b(\\s+\\b[A-Za-z0-9][A-Za-z0-9'-]*\\b){2,}([.,;:?!()\\[\\]\"/\\s-]+[A-Za-z0-9][A-Za-z0-9'-]*)*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9510,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|order|item|issue|ticket|incident)_(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "price"
        ]
      },
      {
        "regExp": "(?i).*(additional|long|free|detailed).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_comments"
        ],
        "negativeExamples": [
          "date"
        ]
      },
      {
        "regExp": "(?i).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "ID"
        ]
      },
      {
        "regExp": "(?i).*(desc|memo|remark|cmts|cmt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prod_desc"
        ],
        "negativeExamples": [
          "qty"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "status"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported intermittent crashes during login.",
      "Replacement part will ship next week pending approval.",
      "Left voicemail and emailed account owner for confirmation.",
      "High-priority issue affecting checkout flow in Safari.",
      "Please refer to the attached design draft for context.",
      "Payment delayed due to missing purchase order.",
      "Product color appears different under fluorescent lighting.",
      "Short meeting summary outlining migration steps completed today."
    ],
    "negativeContentExamples": [
      "See attached.",
      "Update pending",
      "TBD",
      "N/A",
      "2024-07-01",
      "$199.99",
      "OK",
      "On hold"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "product_description",
      "item_notes",
      "additional_comments",
      "order_details",
      "text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "Status",
      "SKU",
      "Email",
      "Invoice_Number"
    ],
    "explanation": "This semantic type identifies free-form, human-readable text fields used for descriptions, notes, comments, and similar narrative content. It is designed for multi-word natural language entries and helps differentiate unstructured text from structured identifiers, dates, or numeric fields.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:22.590861"
  },
  {
    "resultType": "generated",
    "semanticType": "max",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\\-]*[ ]+[A-Za-z][A-Za-z0-9'\\-]*([ ]+[A-Za-z][A-Za-z0-9'\\-]*)*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9730,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|client|user).*(comments?|notes?|remarks?|feedback|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Comments"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(product|order|issue|ticket|record).*(description|notes?|comments?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Issue Description"
        ],
        "negativeExamples": [
          "Issue Date"
        ]
      },
      {
        "regExp": "(?i).*(long|detailed|free[-_ ]?form|free[-_ ]?text|unstructured).*(text|description|notes?).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Free Text Notes"
        ],
        "negativeExamples": [
          "Free Shipping"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|txt|msg|cmts|cmt|note|notes|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Comments"
        ],
        "negativeExamples": [
          "Code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver the package to the back door after 5 pm.",
      "Customer reported intermittent connection issues over the weekend.",
      "Payment received; order will ship tomorrow morning.",
      "Left a voicemail and sent a follow-up email to confirm details.",
      "The device overheats during charging and emits a buzzing sound.",
      "New feature request: allow exporting results to CSV format.",
      "Meeting rescheduled to next Wednesday due to team availability.",
      "Notes: user prefers contact by text message, not phone."
    ],
    "negativeContentExamples": [
      "123456",
      "2024-11-05",
      "ID-93842",
      "A1B2C3D4",
      "19.99",
      "john.doe@example.com",
      "https://example.com",
      "SKU-001-RED"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Customer Comments",
      "Issue Description",
      "Free Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Postal Code",
      "Quantity",
      "Status"
    ],
    "explanation": "MAX is intended for unstructured, human-readable text where no rigid schema applies. It identifies fields that contain sentences or phrases (two or more words) and allows punctuation and mixed content typical of notes and descriptions. Use this type to capture narrative data such as comments, notes, and descriptions while keeping high thresholds and low priority to avoid conflicts with specific structured types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:23.102567"
  },
  {
    "resultType": "generated",
    "semanticType": "part",
    "description": "Open-ended natural language text intended for human reading, such as sentences, phrases, notes, and paragraphs. Values have no fixed format and may include spaces, punctuation, and varied length depending on context or use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ ,.;:!?()-]*\\s+\\b[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9210,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|ticket).*(description|comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*(long|free).*(text|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_description"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(description|desc).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_desc"
        ],
        "negativeExamples": [
          "discount_code"
        ]
      },
      {
        "regExp": "(?i).*(comments|comment|notes|note|remarks|remark|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_remarks"
        ],
        "negativeExamples": [
          "status_flag"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver to the rear entrance.",
      "Customer reported intermittent Wi-Fi issues.",
      "Left voicemail requesting a callback.",
      "Requires follow up within 48 hours.",
      "This item shows signs of wear and tear.",
      "High priority due to compliance impact.",
      "Payment scheduled for next Friday.",
      "Provide a brief summary of changes."
    ],
    "negativeContentExamples": [
      "Pending",
      "Approved",
      "2025-08-11",
      "$19.99",
      "A12-BC9",
      "12345",
      "john.doe@example.com",
      "http://example.com"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Free Text",
      "Additional Remarks",
      "Narrative",
      "Details"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "Code",
      "Email",
      "Number",
      "SKU"
    ],
    "explanation": "This semantic type targets freeform, human-readable fields like descriptions, notes, and comments. The value regex requires at least two alphabetic words, allowing spaces and common punctuation, which helps distinguish natural language from identifiers, codes, dates, and numeric-only values. It is intentionally broad and assigned a high threshold and priority to minimize conflicts with more specific types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:24.606064"
  },
  {
    "resultType": "generated",
    "semanticType": "prefix",
    "description": "This type captures formal titles and prefixes used before personal names in English language correspondence and formal documentation. The values represent established honorific terms including punctuation when applicable, following standard English linguistic and social conventions for respectful address.",
    "pluginType": "list",
    "regexPattern": null,
    "listValues": [
      "MR.",
      "MRS.",
      "MS.",
      "MISS",
      "MX.",
      "DR.",
      "PROF.",
      "SIR",
      "DAME",
      "LORD",
      "LADY",
      "REV.",
      "HON.",
      "CAPT.",
      "COL.",
      "LT.",
      "MAJ.",
      "GEN.",
      "SGT.",
      "JUDGE",
      "FR.",
      "RABBI",
      "IMAM",
      "MSTR."
    ],
    "backout": "^[A-Z]{2,5}\\.?$",
    "confidenceThreshold": 97,
    "priority": 9530,
    "headerPatterns": [
      {
        "regExp": "(?i).*name.*prefix.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "name_prefix"
        ],
        "negativeExamples": [
          "prefix_length"
        ]
      },
      {
        "regExp": "(?i).*person.*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "person_title"
        ],
        "negativeExamples": [
          "job_title"
        ]
      },
      {
        "regExp": "(?i).*honorific.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "honorific"
        ],
        "negativeExamples": [
          "title_code"
        ]
      },
      {
        "regExp": "(?i).*salutation.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "salutation"
        ],
        "negativeExamples": [
          "greeting"
        ]
      },
      {
        "regExp": "(?i).*prefix.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "prefix"
        ],
        "negativeExamples": [
          "suffix"
        ]
      }
    ],
    "positiveContentExamples": [
      "MR.",
      "MRS.",
      "MS.",
      "MISS",
      "DR.",
      "PROF.",
      "SIR",
      "MX."
    ],
    "negativeContentExamples": [
      "Mr",
      "Mrs",
      "Dr",
      "Prof",
      "Capt",
      "Hon",
      "Sir.",
      "Mx"
    ],
    "positiveHeaderExamples": [
      "Title",
      "Honorific",
      "Prefix",
      "Name Prefix",
      "Person Title",
      "Honorific Title",
      "Salutation"
    ],
    "negativeHeaderExamples": [
      "First Name",
      "Last Name",
      "Full Name",
      "Job Title",
      "Suffix",
      "Middle Name",
      "Title Code"
    ],
    "explanation": "This semantic type targets columns that store honorific prefixes used before a person's name, such as Mr., Dr., or Prof. It is useful when prefixes are modeled separately from given and family names to preserve respectful forms of address and for proper salutation generation.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:25.390956"
  },
  {
    "resultType": "generated",
    "semanticType": "month",
    "description": "Identifies numeric month values as integers representing months 1 through 12, optionally with a leading zero (01\u201309). This captures standalone month components commonly used in date fields or calendar indices and excludes names or abbreviations.",
    "pluginType": "regex",
    "regexPattern": "\\b(0?[1-9]|1[0-2])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9720,
    "headerPatterns": [
      {
        "regExp": "(?i).*numeric[ _-]*month.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Numeric Month"
        ],
        "negativeExamples": [
          "Month Name"
        ]
      },
      {
        "regExp": "(?i).*month[ _-]*(number|num).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Month Number"
        ],
        "negativeExamples": [
          "Month Name"
        ]
      },
      {
        "regExp": "(?i).*(calendar|fiscal)[ _-]*month.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Calendar Month"
        ],
        "negativeExamples": [
          "Year"
        ]
      },
      {
        "regExp": "(?i).*(mo|mnth)[ _-]*(number|num).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Mo Number"
        ],
        "negativeExamples": [
          "Day"
        ]
      },
      {
        "regExp": "(?i).*month.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Month"
        ],
        "negativeExamples": [
          "Quarter"
        ]
      }
    ],
    "positiveContentExamples": [
      "1",
      "2",
      "3",
      "7",
      "09",
      "10",
      "11",
      "12"
    ],
    "negativeContentExamples": [
      "00",
      "013",
      "20",
      "12th",
      "2012",
      "Jan",
      "Q3",
      "1st"
    ],
    "positiveHeaderExamples": [
      "Month",
      "Month Number",
      "Numeric Month",
      "Month Num",
      "Calendar Month",
      "Mo Number",
      "Month Index"
    ],
    "negativeHeaderExamples": [
      "Month Name",
      "Day",
      "Year",
      "Week",
      "Quarter",
      "Month Abbrev",
      "Date"
    ],
    "explanation": "This semantic type captures numeric month indicators in the range 1\u201312, with optional leading zeros for single-digit months. Use this for columns storing month numbers extracted from dates or used as calendar indices. It intentionally excludes month names or abbreviations and values outside the 1\u201312 range.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:26.072426"
  },
  {
    "resultType": "generated",
    "semanticType": "definition",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b([ \\t]+[A-Za-z0-9][A-Za-z0-9'-]{1,}\\b){2,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9590,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|record)[ _-]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Product Description"
        ],
        "negativeExamples": [
          "Product Code"
        ]
      },
      {
        "regExp": "(?i).*(customer|user|client)[ _-]*(notes|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Notes"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(internal|admin)[ _-]*(comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Internal Comments"
        ],
        "negativeExamples": [
          "Admin Email"
        ]
      },
      {
        "regExp": "(?i).*(long|full)[ _-]*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Long Description"
        ],
        "negativeExamples": [
          "Full Name"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|details|detail|notes|note|comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Details"
        ],
        "negativeExamples": [
          "Status"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Detailed description of the issue and steps to reproduce.",
      "The customer reported intermittent failures during login.",
      "Brief summary of scope and known limitations.",
      "Explanation of terms used in this report.",
      "Notes on configuration requirements and dependencies.",
      "Clarifies how the feature is expected to behave.",
      "Use cases include onboarding and account recovery workflows.",
      "Provides background context for decision-making."
    ],
    "negativeContentExamples": [
      "N/A",
      "TBD",
      "2024-10-15",
      "10/12/2023 status update",
      "user@example.com",
      "http://example.com/page",
      "ERROR_CODE_123",
      "$19.99"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Long Description",
      "Item Notes",
      "Internal Comments",
      "Details",
      "Additional Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Code",
      "Amount",
      "SKU",
      "Email",
      "Phone"
    ],
    "explanation": "Definition fields are free-form natural language text intended to explain, describe, or provide narrative context. Typical use cases include product descriptions, internal notes, comments, and other narrative fields that lack a strict schema. The regex favors content with multiple words and alphabetic tokens to distinguish natural language from identifiers, codes, or structured values.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:27.295171"
  },
  {
    "resultType": "generated",
    "semanticType": "day",
    "description": "Captures the numeric day component of calendar dates as they appear in date fields and temporal data. Accepts integer values from 1 to 31 with no leading zeros and no additional formatting or suffixes. Intended for standalone day-of-month values rather than full dates or weekday names.",
    "pluginType": "regex",
    "regexPattern": "\\b([1-9]|[12][0-9]|3[01])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9620,
    "headerPatterns": [
      {
        "regExp": "(?i).*day.*of.*month.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Day of Month"
        ],
        "negativeExamples": [
          "Day Name"
        ]
      },
      {
        "regExp": "(?i).*date.*number.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Date Number"
        ],
        "negativeExamples": [
          "Date Name"
        ]
      },
      {
        "regExp": "(?i).*(calendar).*day.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Calendar Day"
        ],
        "negativeExamples": [
          "Calendar Year"
        ]
      },
      {
        "regExp": "(?i).*(\\bdom\\b|day.*num|day.*number).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Day Number"
        ],
        "negativeExamples": [
          "Month Number"
        ]
      },
      {
        "regExp": "(?i).*day.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Day"
        ],
        "negativeExamples": [
          "Month"
        ]
      }
    ],
    "positiveContentExamples": [
      "1",
      "7",
      "9",
      "10",
      "15",
      "23",
      "30",
      "31"
    ],
    "negativeContentExamples": [
      "0",
      "34",
      "01",
      "09",
      "31st",
      "8a",
      "00",
      "40"
    ],
    "positiveHeaderExamples": [
      "Day",
      "Day of Month",
      "Date Number",
      "Day Number",
      "Calendar Day",
      "DOM"
    ],
    "negativeHeaderExamples": [
      "Month",
      "Year",
      "Day Name",
      "Weekday",
      "Date",
      "Day of Week",
      "Business Day",
      "Calendar Year"
    ],
    "explanation": "This semantic type identifies standalone numeric day-of-month tokens (1\u201331) without leading zeros or suffixes, useful for columns that isolate the day component separate from month and year. It helps normalize and validate day fields when parsing or reconstructing full dates from discrete components.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:32.419574"
  },
  {
    "resultType": "generated",
    "semanticType": "series",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9,.;:'\"()\\-/%&!?]* [A-Za-z][A-Za-z0-9,.;:'\"()\\-/%&!?]*\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 99,
    "priority": 9770,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|order|issue|ticket|case).*(description|comments|notes|details).*",
        "confidence": 96,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_id"
        ]
      },
      {
        "regExp": "(?i).*(additional|free|long|full).*(description|comments|notes|details|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_notes"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmts|cmt|note|narrative|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "cust_desc"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(comment|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "commission"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Excellent build quality and performance.",
      "Please deliver to the front desk after 5 pm.",
      "Customer reported intermittent failures during startup.",
      "This item was returned due to damaged packaging.",
      "Works as expected; minor scratches on the surface.",
      "The quick brown fox jumps over the lazy dog.",
      "Refunded after review by support team.",
      "Includes charger, cable, and user manual."
    ],
    "negativeContentExamples": [
      "OK",
      "Pending",
      "TBD",
      "12345",
      "A1B2C3",
      "ERROR_CODE_42",
      "2023-07-31",
      "US-CA-90210"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "Order Notes",
      "Issue Details",
      "Narrative",
      "Free Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Quantity",
      "SKU",
      "Account Number",
      "Postal Code",
      "Email Address"
    ],
    "explanation": "Series captures free-form narrative text fields commonly used for descriptions, notes, and comments where structure is not enforced. It is useful to identify columns intended for human-readable prose and long-form explanations, enabling downstream NLP processing or exclusion from strict validation.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:35.506086"
  },
  {
    "resultType": "generated",
    "semanticType": "creator",
    "description": "This type represents full personal names formatted in the first-name followed by last-name order, combining exactly two name tokens separated by a single space, without titles, middle names, suffixes, or extra components. Tokens are alphabetic with optional internal hyphens or apostrophes and are typically capitalized.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+([-'][A-Z][a-z]+)?) ([A-Z][a-z]+([-'][A-Z][a-z]+)?)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9760,
    "headerPatterns": [
      {
        "regExp": "(?i).*full[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Full Name"
        ],
        "negativeExamples": [
          "First Name"
        ]
      },
      {
        "regExp": "(?i).*person[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Person Name"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      },
      {
        "regExp": "(?i).*(author|creator)[ _-]*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Author Name"
        ],
        "negativeExamples": [
          "Creator ID"
        ]
      },
      {
        "regExp": "(?i).*(creator|author).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Creator"
        ],
        "negativeExamples": [
          "Creation Date"
        ]
      },
      {
        "regExp": "(?i).*(contact|user).*[ _-]*full[ _-]*name.*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "User Full Name"
        ],
        "negativeExamples": [
          "Account Name"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Surname"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Doe",
      "Jane Smith",
      "Mary-Jane Watson",
      "Liam O'Connor",
      "Jean-Luc Martin",
      "Peter O'Toole",
      "Alice Brown",
      "David Johnson"
    ],
    "negativeContentExamples": [
      "John A. Doe",
      "Dr John Doe",
      "john doe",
      "John",
      "Doe, John",
      "John  Doe",
      "John-Doe",
      "Ana Mar\u00eda"
    ],
    "positiveHeaderExamples": [
      "Full Name",
      "Name",
      "Person Name",
      "Creator",
      "Author Name",
      "Contact Full Name",
      "User Full Name"
    ],
    "negativeHeaderExamples": [
      "First Name",
      "Last Name",
      "Email Address",
      "Creator ID",
      "Account Name",
      "Creation Date",
      "Display Name"
    ],
    "explanation": "Detects two-token personal names in given-name followed by family-name order, separated by a single space. The pattern enforces alphabetic tokens with optional internal hyphens or apostrophes and capitalized initials, excluding titles, middle names, suffixes, and multi-part sequences. Useful for identifying columns storing simple full names in Western ordering, such as contact lists or user directories.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:35.571885"
  },
  {
    "resultType": "generated",
    "semanticType": "season",
    "description": "This type identifies quarterly period designations as they appear in business reporting, financial analysis, and temporal data organization. The values represent standardized quarter indicators using common abbreviations to denote three-month periods within annual business or calendar cycles.",
    "pluginType": "regex",
    "regexPattern": "\\b[Ff][Yy]\\d{4}[ _\\-/][Qq][1-4]\\b|\\b\\d{4}[ _\\-/][Qq][1-4]\\b|\\b[Qq][1-4][ _\\-/][Ff][Yy]\\d{4}\\b|\\b[Qq][1-4][ _\\-/]\\d{4}\\b|\\b[Qq][1-4]\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9700,
    "headerPatterns": [
      {
        "regExp": "(?i).*(fiscal|fy).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Fiscal Quarter"
        ],
        "negativeExamples": [
          "Quarterly Budget"
        ]
      },
      {
        "regExp": "(?i).*year.*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Year Quarter"
        ],
        "negativeExamples": [
          "Quarter Yearly Average"
        ]
      },
      {
        "regExp": "(?i).*quarter.*period.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Quarterly Period"
        ],
        "negativeExamples": [
          "Period Type"
        ]
      },
      {
        "regExp": "(?i).*\\bqtr\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "QTR"
        ],
        "negativeExamples": [
          "Quarter"
        ]
      },
      {
        "regExp": "(?i).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Quarter"
        ],
        "negativeExamples": [
          "Month"
        ]
      }
    ],
    "positiveContentExamples": [
      "Q1",
      "Q2 2024",
      "2023 Q4",
      "FY2022 Q3",
      "Q1 FY2021",
      "Q4-2020",
      "2021-Q2",
      "Q3/2019"
    ],
    "negativeContentExamples": [
      "Q5",
      "2023 Q0",
      "FY20 Q2",
      "Q-3 2021",
      "Quarter 2 2020",
      "2023 H1",
      "S1 2022",
      "Q3FY19"
    ],
    "positiveHeaderExamples": [
      "Quarter",
      "Year Quarter",
      "Quarterly Period",
      "Fiscal Quarter",
      "FY Quarter",
      "QTR",
      "Yr-Qtr"
    ],
    "negativeHeaderExamples": [
      "Half Year",
      "Month",
      "Full Year",
      "Season",
      "Week",
      "Quarterback",
      "Yearly Average",
      "H1"
    ],
    "explanation": "Identifies quarter designations such as Q1\u2013Q4 with optional four-digit years and optional FY qualifiers, using explicit separators (space, hyphen, slash). Suitable for financial and reporting datasets where quarters are recorded as compact tokens. The pattern excludes half-year markers, month labels, ambiguous season names, two-digit years, and spelled-out forms like 'Quarter 2'.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:37.479527"
  },
  {
    "resultType": "generated",
    "semanticType": "score",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "(?i)\\b[a-z]+[a-z0-9]*([ \\t,.;:'\"!?()/\\-]+[a-z]+[a-z0-9]*)+",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9790,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user).*(comments|notes|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Comments"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*(order|ticket|case).*(description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Case Description"
        ],
        "negativeExamples": [
          "Order Date"
        ]
      },
      {
        "regExp": "(?i).*(comments|comment|notes|note|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Notes"
        ],
        "negativeExamples": [
          "Price"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|memo|feedback).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Feedback Text"
        ],
        "negativeExamples": [
          "Code"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Free Text"
        ],
        "negativeExamples": [
          "Number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Great product, works as expected.",
      "Customer reported an intermittent error during login.",
      "Needs follow-up next week to confirm delivery.",
      "Package arrived damaged; requested replacement.",
      "Very satisfied with the service!",
      "Issue resolved after clearing cache and cookies.",
      "User prefers email communication over phone.",
      "Payment received, order will ship tomorrow."
    ],
    "negativeContentExamples": [
      "OK",
      "12345",
      "A-123",
      "Pending",
      "abc_def",
      "LoginError",
      "prod-01",
      "YES"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Customer Comments",
      "Order Notes",
      "Additional Details",
      "Feedback Text",
      "Case Description"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Status",
      "Score",
      "Postal Code",
      "Quantity",
      "URL"
    ],
    "explanation": "This semantic type identifies free-form, human-readable text fields typically used for descriptions, notes, comments, feedback, and similar narrative content. It favors multi-word natural language with spaces and common punctuation, avoiding single-token identifiers or purely numeric strings.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:38.155148"
  },
  {
    "resultType": "generated",
    "semanticType": "rating",
    "description": "Free-text narrative fields capturing human-readable content such as descriptions, notes, comments, and feedback. Values are natural language sentences or phrases with variable length, often containing multiple words and punctuation.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-\\&\\/\\(\\)%]*[\\.,!\\?:;]?(\\s+[A-Za-z][A-Za-z0-9'\u2019\\-\\&\\/\\(\\)%]*[\\.,!\\?:;]?){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9480,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|user|ticket|product).*(comment|comments|feedback|review|notes|note|description).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_feedback_notes"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(detailed|general|additional|free|open).*(comment|comments|notes|note|feedback|description).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "additional_comments"
        ],
        "negativeExamples": [
          "general_ledger"
        ]
      },
      {
        "regExp": "(?i).*(comment|comments|notes|note|feedback|review|description|desc|remark|remarks).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "account_name"
        ]
      },
      {
        "regExp": "(?i).*(desc|remarks|rmk|txt).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "desc"
        ],
        "negativeExamples": [
          "txn_id"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Great product, works as expected.",
      "Customer reported intermittent failures during setup.",
      "Needs improvement in battery life.",
      "The documentation is clear and helpful.",
      "Package arrived late but in good condition.",
      "Service was friendly and the room clean.",
      "Please follow up with a replacement.",
      "Not satisfied with the current experience."
    ],
    "negativeContentExamples": [
      "OK",
      "Very good",
      "A+",
      "5 stars",
      "2024-05-01 status",
      "1 out of 5",
      "Excellent!!",
      "Short note"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "general_comments",
      "customer_notes",
      "additional_feedback",
      "text",
      "desc"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "invoice_number",
      "country_code",
      "email",
      "status_code",
      "quantity"
    ],
    "explanation": "This semantic type targets open-ended narrative text meant for descriptions, notes, comments, and free-form feedback. It emphasizes multi-word natural language content rather than structured codes or numeric ratings. Typical uses include capturing user comments, support ticket notes, product feedback, or any field intended for human-readable prose. High threshold and lower priority help avoid conflicts with more specific types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:39.384335"
  },
  {
    "resultType": "generated",
    "semanticType": "tag",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-&,()]{1,} +[A-Za-z][A-Za-z0-9\"\u201c\u201d'\u2019\\-&,()]{1,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9830,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|order|issue|review).*(description|notes|comments|details|text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*(customer|user|profile).*(notes|comments|bio|about).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_notes"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(long|free|additional|internal).*(text|comment|description|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "internal_code"
        ]
      },
      {
        "regExp": "(?i).*(desc|note|cmt|cmts|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "desc"
        ],
        "negativeExamples": [
          "acct_num"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "High quality stainless steel bottle with insulated lid.",
      "Customer reported intermittent connection drops during evening hours.",
      "Please handle with care; fragile glass components inside.",
      "Eligible for free shipping on orders over $50.",
      "User prefers email updates instead of SMS notifications.",
      "Return requested due to incorrect size selected.",
      "Handmade in small batches from locally sourced materials.",
      "This item was backordered and will ship next week."
    ],
    "negativeContentExamples": [
      "ID_98765",
      "2024-07-15",
      "SKU-12345",
      "3.14159",
      "OK",
      "N/A",
      "ABC 12345",
      "A1"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Details",
      "Review Text",
      "Free Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "SKU",
      "Amount",
      "Status"
    ],
    "explanation": "TAG identifies free-form, human-readable text fields where content is natural language rather than structured codes or numeric identifiers. It is useful for columns like descriptions, notes, comments, and other narrative text that vary widely in length and vocabulary across records.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:43.465174"
  },
  {
    "resultType": "generated",
    "semanticType": "format",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9',;:()/-]{1,}[ ]+[A-Za-z0-9][A-Za-z0-9',;:()/-]{1,}([ ]+[A-Za-z0-9][A-Za-z0-9',;:()/-]{1,}){0,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9850,
    "headerPatterns": [
      {
        "regExp": "(?i).*order.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Order Description"
        ],
        "negativeExamples": [
          "Order Status"
        ]
      },
      {
        "regExp": "(?i).*customer.*notes.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Notes"
        ],
        "negativeExamples": [
          "Customer ID"
        ]
      },
      {
        "regExp": "(?i).*user.*comments.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "User Comments"
        ],
        "negativeExamples": [
          "User Email"
        ]
      },
      {
        "regExp": "(?i).*remarks.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Remarks"
        ],
        "negativeExamples": [
          "Remark Code"
        ]
      },
      {
        "regExp": "(?i).*desc.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Item Desc"
        ],
        "negativeExamples": [
          "Product Code"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Created Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached report.",
      "Customer reported intermittent login failures.",
      "Shipment delayed due to weather conditions.",
      "This item requires special handling and packaging.",
      "The contract was signed on Tuesday afternoon.",
      "Notes: replace filter and test again.",
      "Service was excellent, would recommend.",
      "Payment pending; awaiting approval from finance."
    ],
    "negativeContentExamples": [
      "Approved",
      "TBD",
      "N/A",
      "2025-08-11",
      "$12.99",
      "A1B2-C3",
      "user@example.com",
      "http://example.com"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Order Description",
      "Customer Notes",
      "User Comments",
      "Remarks",
      "Item Desc"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Code",
      "Status",
      "Amount",
      "Quantity",
      "Product Code"
    ],
    "explanation": "FORMAT identifies free-text, natural language fields often used for descriptions, notes, and comments. The value regex requires at least two space-separated tokens containing letters and allows common punctuation, which helps distinguish free text from structured identifiers, dates, prices, or codes. This type is intentionally broad, so it carries a higher threshold and priority to minimize conflicts with more specific semantic types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:48.088461"
  },
  {
    "resultType": "generated",
    "semanticType": "alias",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ \\t]+[A-Za-z]{2,}([ \\t,;:!?.-]+[A-Za-z]{2,}){0,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9580,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|item|order|record).*(description|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_id"
        ]
      },
      {
        "regExp": "(?i).*(customer|user|account|profile).*(comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_comments"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|remark|memo).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "item_code"
        ]
      },
      {
        "regExp": "(?i).*(details|summary|overview).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_details"
        ],
        "negativeExamples": [
          "issue_status"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver before the end of the month.",
      "Customer reported intermittent login issues.",
      "High-quality stainless steel with matte finish.",
      "This item is currently backordered due to supply constraints.",
      "Handle with care; fragile contents inside.",
      "Payment received and confirmed on 2023-08-14.",
      "See also the user manual for installation steps."
    ],
    "negativeContentExamples": [
      "OK",
      "N/A",
      "Pending",
      "SKU-12345",
      "john.doe@example.com",
      "2024-05-01",
      "A B"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "product_description",
      "customer_comments",
      "issue_details",
      "item_desc"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "item_code",
      "status_code",
      "quantity",
      "delivery_date"
    ],
    "explanation": "Alias represents free-form narrative or explanatory text fields commonly used for descriptions, notes, comments, or summaries. It is useful when identifying columns that store natural language content rather than structured identifiers, codes, or numeric values. The detection prioritizes fields containing multiple words separated by spaces, reducing false positives from codes, emails, or single tokens.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:49.222990"
  },
  {
    "resultType": "generated",
    "semanticType": "elevation",
    "description": "Open-ended natural language text intended for human reading, such as sentences, phrases, and short paragraphs. Values are unstructured and may include punctuation, mixed case, and variable lengths.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\u2019\\-(),;:]*( [A-Za-z][A-Za-z0-9'\u2019\\-(),;:]*)+[.!?]?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9800,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|user|issue|order).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_description"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*(description|comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmts|cmt|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "desc"
        ],
        "negativeExamples": [
          "sku"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "price"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please provide additional details about the issue.",
      "Customer reported intermittent failures during startup.",
      "Left voicemail and awaiting call back.",
      "Notes: package arrived damaged; requesting replacement.",
      "This item was used for two weeks before returning.",
      "Follow up scheduled for next Tuesday afternoon.",
      "The quick brown fox jumps over the lazy dog.",
      "User mentioned confusion about the onboarding steps."
    ],
    "negativeContentExamples": [
      "12345",
      "A1B2C3",
      "2024-07-15",
      "TRUE",
      "N/A",
      "9.99",
      "user@example.com",
      "http://example.com/path"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Additional Notes",
      "Free Text",
      "User Comments",
      "Long Description"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Email",
      "SKU",
      "Country Code",
      "Amount"
    ],
    "explanation": "This semantic type is designed to identify free-form, human-readable text fields like descriptions, notes, and comments. It emphasizes multi-word natural language content as opposed to structured identifiers, numbers, codes, or dates. Typical use cases include user feedback, internal notes, and narrative descriptions where format is unconstrained.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:49.365650"
  },
  {
    "resultType": "generated",
    "semanticType": "company",
    "description": "This represents the complete corporate name including any legal suffixes such as Corporation, Inc., LLC, or Ltd. The name typically includes proper capitalization and may contain multiple words, punctuation, and legal designations but excludes stock symbols or abbreviations.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][A-Za-z0-9&'().\\-]+(\\s+[A-Z][A-Za-z0-9&'().\\-]+){0,5})((,\\s+)|(\\s+))(Corporation|Corp\\.|Incorporated|Inc\\.|LLC|L\\.L\\.C\\.|Limited|Ltd\\.|Company|Co\\.|PLC|LLP|L\\.P\\.|LP)",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9740,
    "headerPatterns": [
      {
        "regExp": "(?i).*(company|corporate|legal).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Corporate Name"
        ],
        "negativeExamples": [
          "Organization"
        ]
      },
      {
        "regExp": "(?i).*(company|corporation|organization|business|firm).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Organization"
        ],
        "negativeExamples": [
          "Employee Count"
        ]
      },
      {
        "regExp": "(?i).*\\b(corp|inc|llc|ltd|co)\\b.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Corp Name"
        ],
        "negativeExamples": [
          "Industry"
        ]
      },
      {
        "regExp": "(?i).*(business|firm).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Business Name"
        ],
        "negativeExamples": [
          "Stock Symbol"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Company Name"
        ],
        "negativeExamples": [
          "Company Code"
        ]
      }
    ],
    "positiveContentExamples": [
      "Acme Corporation",
      "Globex, Inc.",
      "Example Holdings LLC",
      "Smith & Sons Ltd.",
      "Blue River Company",
      "Northern Lights PLC",
      "Sunrise Ventures LP",
      "Green Valley Co."
    ],
    "negativeContentExamples": [
      "Acme",
      "AAPL",
      "Globex Incorporated Holdings",
      "acme inc.",
      "Inc.",
      "John Smith",
      "Blue-River Co",
      "Example Ltd"
    ],
    "positiveHeaderExamples": [
      "Company Name",
      "Organization",
      "Corporation",
      "Corporate Name",
      "Business Name",
      "Firm Name",
      "Legal Company Name",
      "Corp Name"
    ],
    "negativeHeaderExamples": [
      "Stock Symbol",
      "Industry",
      "Employee Count",
      "Company Code",
      "Organization ID",
      "Corporation Type",
      "Business Number",
      "Employer Count"
    ],
    "explanation": "NAME.COMPANY identifies complete corporate names that end with a recognized legal suffix (e.g., Corporation, Inc., LLC, Ltd.). It is useful for extracting and validating company name fields in customer, vendor, or registry datasets while avoiding confusion with stock tickers, IDs, or codes.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:49.397582"
  },
  {
    "resultType": "generated",
    "semanticType": "event",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9'\"/\\-]*( +[A-Za-z0-9][A-Za-z0-9'\"/\\-]*){2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9880,
    "headerPatterns": [
      {
        "regExp": "(?i).*(event|incident|activity).*(description|details|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "event_description"
        ],
        "negativeExamples": [
          "event_date"
        ]
      },
      {
        "regExp": "(?i).*(case|ticket|issue).*(description|details|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "issue_notes"
        ],
        "negativeExamples": [
          "ticket_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|remarks|note|comment|summary).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "summary"
        ],
        "negativeExamples": [
          "sum"
        ]
      },
      {
        "regExp": "(?i).*(free[ _]?text|freeform|narrative|other[ _]?details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*(text).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "amount"
        ]
      }
    ],
    "positiveContentExamples": [
      "Package delivered to front desk without signature",
      "Customer requested a refund due to late shipment",
      "Unexpected error occurred while processing the request",
      "Meeting rescheduled to next Tuesday afternoon",
      "Payment pending awaiting bank confirmation",
      "Please refer to the attached report for details",
      "User reported intermittent connectivity issues",
      "Item arrived damaged and requires replacement"
    ],
    "negativeContentExamples": [
      "Needs review",
      "OK",
      "None",
      "N/A",
      "- pending approval",
      "\"Approved\"",
      "2024 meeting postponed",
      "ERROR-42"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Event Description",
      "Issue Notes",
      "Free Text",
      "Narrative",
      "Other Details"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Email",
      "Quantity",
      "Status Code",
      "Longitude",
      "User Name"
    ],
    "explanation": "A broad, narrative-oriented semantic type intended for descriptive fields such as descriptions, notes, comments, and free text. It captures multi-word, human-readable content rather than structured identifiers, numeric codes, or standardized formats, and is tuned with a high threshold and low priority to minimize conflicts with more specific semantic types.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:52.615845"
  },
  {
    "resultType": "generated",
    "semanticType": "width",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b\\s+\\b[A-Za-z]{2,}\\b([A-Za-z0-9'\u2019\\-.,;:!?()\"/&%]+\\s*)*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9870,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|order|issue|case|ticket).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Product Description"
        ],
        "negativeExamples": [
          "Product ID"
        ]
      },
      {
        "regExp": "(?i).*(description|notes|comments|remarks|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Price"
        ]
      },
      {
        "regExp": "(?i).*(desc|note|notes|cmt|cmts|detail|txt).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "desc"
        ],
        "negativeExamples": [
          "id"
        ]
      },
      {
        "regExp": "(?i).*(free\\s*text|long\\s*text|commentary|narrative).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Free Text"
        ],
        "negativeExamples": [
          "Free Shipping"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please provide an updated timeline for the project.",
      "Customer reported intermittent connectivity issues after the update.",
      "This item includes all standard accessories and a user manual.",
      "The order was delivered to the front desk due to recipient absence.",
      "Notes indicate that approval was granted by the committee.",
      "Add a brief summary outlining key objectives and risks.",
      "User comments: works as expected; performance improved.",
      "Description: high-resolution, scratch-resistant display."
    ],
    "negativeContentExamples": [
      "12345",
      "2021-12-31",
      "AB-12345",
      "user@example.com",
      "OK",
      "A quick",
      "100 x 200",
      "v2.0 update"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Product Description",
      "Order Notes",
      "Free Text",
      "Long Text",
      "Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Product ID",
      "Quantity",
      "Postal Code",
      "Phone Number",
      "SKU"
    ],
    "explanation": "This semantic type is intended for columns that store free-form narrative content such as descriptions, notes, comments, and other human-readable text without a strict structural pattern. It deliberately requires at least two alphabetic words to distinguish natural language text from single tokens, codes, or numeric-only fields. Use this type to capture descriptive fields and annotations where variability in length and punctuation is expected while reducing false positives on identifiers and numeric values.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:53.555440"
  },
  {
    "resultType": "generated",
    "semanticType": "percentage",
    "description": "Open-ended natural language content intended for human reading, such as sentences, phrases, and short paragraphs. Values have variable length, typically contain multiple words, and may include punctuation and mixed case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}( [A-Za-z]{2,}){2,}[A-Za-z0-9 ,.;:'\"()\\-/%&]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9860,
    "headerPatterns": [
      {
        "regExp": "(?i).*(customer|order|case|ticket)[ _-]*(description|comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "customer_description"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(additional|internal)[ _-]*(comments|notes|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "additional_comments"
        ],
        "negativeExamples": [
          "internal_id"
        ]
      },
      {
        "regExp": "(?i).*(description|comments|notes|remarks).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Date"
        ]
      },
      {
        "regExp": "(?i).*(long|free)[ _-]*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "free_text"
        ],
        "negativeExamples": [
          "free_shipping"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Text"
        ],
        "negativeExamples": [
          "Number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Customer reported intermittent connection issues during the evening.",
      "Please deliver to the side entrance and ring the bell.",
      "This item arrived damaged; requesting a replacement.",
      "Payment received and recorded successfully.",
      "Notes: follow up next week after the audit.",
      "The user experienced delays when loading dashboards.",
      "No known allergies; patient tolerates penicillin.",
      "Project on hold pending budget approval."
    ],
    "negativeContentExamples": [
      "Short note",
      "Pending review",
      "Approved",
      "12345",
      "2024-03-15",
      "REF-2023-09-001",
      "N/A",
      "9.99"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Customer Description",
      "Order Notes",
      "Additional Comments",
      "Free Text",
      "Long Text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Order ID",
      "Amount",
      "Status Code",
      "Email",
      "Number"
    ],
    "explanation": "This semantic type targets multi-word, human-readable free text fields commonly found in descriptive columns such as descriptions, notes, comments, and remarks. The regex requires at least three alphabetic words and allows common punctuation, which helps distinguish natural language text from identifiers, dates, codes, and numeric-only values. Use this to classify columns that store narrative or explanatory content rather than structured codes or numbers.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:45:58.228954"
  },
  {
    "resultType": "generated",
    "semanticType": "order",
    "description": "Open-ended text fields containing human-readable content such as sentences, phrases, or short paragraphs. Intended for descriptive notes, comments, or narrative details that do not follow a strict format.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z0-9&'\".,;:!?()-]*[ \\t]+[A-Za-z0-9][A-Za-z0-9&'\".,;:!?()-]*[ \\t]+[A-Za-z0-9][A-Za-z0-9&'\".,;:!?()-]*",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9490,
    "headerPatterns": [
      {
        "regExp": "(?i).*(order[ _-]*(description|desc|notes|comments)).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "order_description"
        ],
        "negativeExamples": [
          "order_id"
        ]
      },
      {
        "regExp": "(?i).*(item|product|service)[ _-]*(description|desc|notes|comments).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_code"
        ]
      },
      {
        "regExp": "(?i).*(issue|request|ticket)[ _-]*(comments|notes|description).*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "issue_comments"
        ],
        "negativeExamples": [
          "issue_date"
        ]
      },
      {
        "regExp": "(?i).*(desc|note|notes|cmt|cmts|remark|remarks|detail|details).*",
        "confidence": 91,
        "mandatory": true,
        "positiveExamples": [
          "desc_text"
        ],
        "negativeExamples": [
          "quantity"
        ]
      },
      {
        "regExp": "(?i).*text.*",
        "confidence": 90,
        "mandatory": true,
        "positiveExamples": [
          "text"
        ],
        "negativeExamples": [
          "price"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver to the back entrance after 5 pm.",
      "Customer requested gift wrapping and a handwritten note.",
      "Package arrived damaged; requesting replacement.",
      "Urgent: need expedited shipping due to event date.",
      "The color appears slightly different than expected.",
      "Contact me before dispatch to confirm address.",
      "Item is too large; considering exchange.",
      "Works as described; very satisfied."
    ],
    "negativeContentExamples": [
      "Order delayed",
      "Ship asap",
      "2024-01-31",
      "INV-12345",
      "john@example.com",
      "1234567890",
      "3 units",
      "Ship-today"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "order_description",
      "product_description",
      "issue_comments",
      "remarks",
      "details"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "order_id",
      "product_code",
      "invoice_number",
      "customer_name",
      "status"
    ],
    "explanation": "This semantic type targets unstructured narrative fields that usually contain multi-word natural language content rather than codes or structured identifiers. The regex favors entries with at least three whitespace-separated tokens, beginning with a letter, to reduce false positives from IDs, dates, and short codes. High threshold and priority reduce conflicts and ensure it is applied when column names and content both strongly indicate free-text descriptions or comments.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:02.485017"
  },
  {
    "resultType": "generated",
    "semanticType": "abstract",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}[A-Za-z'-]*\\b[ ]+\\b[A-Za-z]{2,}[A-Za-z0-9'/-]*\\b([ ]+\\b[A-Za-z0-9][A-Za-z0-9'/-]*\\b){0,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9840,
    "headerPatterns": [
      {
        "regExp": "(?i).*project.*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "project_description"
        ],
        "negativeExamples": [
          "project_code"
        ]
      },
      {
        "regExp": "(?i).*(abstract|summary|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "comments"
        ],
        "negativeExamples": [
          "status_code"
        ]
      },
      {
        "regExp": "(?i).*(desc|descr|note|cmt|cmts).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "id_number"
        ]
      },
      {
        "regExp": "(?i).*(free|long).*text.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "long_text"
        ],
        "negativeExamples": [
          "long_date"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "subscription"
        ]
      }
    ],
    "positiveContentExamples": [
      "This report provides an overview of the quarterly results.",
      "Customer requested a refund due to damaged packaging.",
      "A brief summary of the proposed changes and next steps.",
      "Notes: follow up with vendor by Friday.",
      "Initial assessment indicates low risk for deployment.",
      "Research abstract: evaluating methods for anomaly detection.",
      "Please see attached document for detailed specifications.",
      "Clarification added after client call on 2024-09-18."
    ],
    "negativeContentExamples": [
      "Unknown",
      "N/A",
      "OK",
      "AB-12345",
      "2024-09-18",
      "Ref: 12345",
      "Yes",
      "SKU A12-9X"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "project_description",
      "abstract_text",
      "case_notes",
      "summary",
      "long_text"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "status_code",
      "quantity",
      "email",
      "zip"
    ],
    "explanation": "Use this semantic type to identify columns containing natural language descriptions, summaries, notes, or abstracts where content is free-form and not constrained by fixed formats. It helps separate narrative fields from structured identifiers, codes, and dates to enable appropriate text processing, search, or NLP.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:10.720251"
  },
  {
    "resultType": "generated",
    "semanticType": "role",
    "description": "This type captures job titles and occupational designations as they appear in professional contexts, employment records, and organizational structures. The values represent standard professional roles, specialized positions, or functional titles using conventional workplace terminology.",
    "pluginType": "regex",
    "regexPattern": "\\b(VP|SVP|EVP|CFO|COO|CTO|CMO|CIO|Chief|Senior|Junior|Lead|Principal|Head|Assistant|Associate)?\\s?([A-Za-z/&-]{2,}\\s){0,3}(Engineer|Manager|Director|Officer|Consultant|Specialist|Architect|Administrator|Coordinator|Technician|Developer|Designer|Executive|Associate|Assistant|Supervisor|Advisor|Scientist|Accountant|Auditor|Controller|Planner|Operator|Recruiter|Therapist|Teacher|Nurse|Pharmacist|Attorney|Agent|Representative|Researcher|Strategist|Analyst)\\b(\\s(of|for|in)\\s[A-Za-z/&-]{2,}(\\s[A-Za-z/&-]{2,}){0,3})?",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 97,
    "priority": 9610,
    "headerPatterns": [
      {
        "regExp": "(?i).*job.*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Job Title"
        ],
        "negativeExamples": [
          "Company"
        ]
      },
      {
        "regExp": "(?i).*(position).*(title|name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Position Title"
        ],
        "negativeExamples": [
          "Employee ID"
        ]
      },
      {
        "regExp": "(?i).*(job|work).*(role|position).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Job Role"
        ],
        "negativeExamples": [
          "Start Date"
        ]
      },
      {
        "regExp": "(?i).*(occupation).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Occupation"
        ],
        "negativeExamples": [
          "Name"
        ]
      },
      {
        "regExp": "(?i).*(position).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Position"
        ],
        "negativeExamples": [
          "Department"
        ]
      },
      {
        "regExp": "(?i).*title.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Title"
        ],
        "negativeExamples": [
          "Location"
        ]
      }
    ],
    "positiveContentExamples": [
      "Software Engineer",
      "Senior Data Scientist",
      "Product Manager",
      "Director of Finance",
      "Chief Operating Officer",
      "UX/UI Designer",
      "Registered Nurse",
      "Customer Support Associate"
    ],
    "negativeContentExamples": [
      "HR Generalist",
      "Head of Marketing",
      "VP Sales",
      "Team Member",
      "Senior Product Owner",
      "Directorate of Operations",
      "Marketing",
      "Customer Support"
    ],
    "positiveHeaderExamples": [
      "Job Title",
      "Position",
      "Occupation",
      "Role",
      "Title",
      "Position Title",
      "Job Role"
    ],
    "negativeHeaderExamples": [
      "Name",
      "Company",
      "Salary",
      "Employee ID",
      "Department",
      "Start Date",
      "Location"
    ],
    "explanation": "This semantic type identifies strings that represent professional job titles or roles, typically found in HR systems, resumes, organizational charts, and workforce datasets. The pattern focuses on the presence of common role nouns (e.g., Manager, Engineer, Director, Analyst) optionally preceded by qualifiers (e.g., Senior, Lead, Chief) and may include domain context via prepositions (e.g., Director of Finance). The header patterns prioritize explicit job-title terminology and cover common variants like position, role, and occupation to reliably detect relevant columns while avoiding generic identifiers.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:12.154149"
  },
  {
    "resultType": "generated",
    "semanticType": "publisher",
    "description": "Represents a full corporate or organizational name that includes a legal suffix such as Corporation, Inc., LLC, or Ltd. Names may contain multiple words, punctuation (commas before the suffix, periods in abbreviations), ampersands, and hyphens, and are typically in proper capitalization. This excludes appended stock tickers, share classes, or other trailing qualifiers.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Z][A-Za-z0-9&'\u2019\\-. ]{1,80},?\\s+(Corporation|Corp|Corp\\.|Incorporated|Inc|Inc\\.|Company|Co|Co\\.|Limited|Ltd|Ltd\\.|LLC|L\\.L\\.C\\.|LLP|L\\.L\\.P\\.|PLC|P\\.L\\.C\\.)",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9750,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\b(company|corporate|legal)\\b.*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Company Legal Name"
        ],
        "negativeExamples": [
          "Company Code"
        ]
      },
      {
        "regExp": "(?i).*\\bpublisher\\b.*\\bname\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Publisher Name"
        ],
        "negativeExamples": [
          "Publisher ID"
        ]
      },
      {
        "regExp": "(?i).*\\bcorporation\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Corporation"
        ],
        "negativeExamples": [
          "Corporate Tax Rate"
        ]
      },
      {
        "regExp": "(?i).*\\b(corp|inc|ltd|llc)\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Corp"
        ],
        "negativeExamples": [
          "Stock Symbol"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Company Name"
        ],
        "negativeExamples": [
          "Company ID"
        ]
      }
    ],
    "positiveContentExamples": [
      "Acme Corporation",
      "Northbridge Holdings, Inc.",
      "Aurora & Sons LLC",
      "Silverline Ventures Ltd.",
      "The Meridian Group, LLC",
      "Beacon Analytics Co.",
      "Redwood Labs Corp.",
      "Apex Innovations Inc"
    ],
    "negativeContentExamples": [
      "Acme, Inc. (ACME)",
      "Northbridge Holdings",
      "Aurora & Sons, Inc., Class A",
      "Silverline Ventures Limited - Series B",
      "The Meridian Group Ltd - UK",
      "Horizon Capital Partners L.P.",
      "Redwood Labs GmbH",
      "Beacon Analytics"
    ],
    "positiveHeaderExamples": [
      "Company Name",
      "Organization",
      "Corporation",
      "Corporate Name",
      "Company Legal Name",
      "Publisher Name",
      "Organization Name",
      "Registered Company Name"
    ],
    "negativeHeaderExamples": [
      "Stock Symbol",
      "Industry",
      "Employee Count",
      "Ticker",
      "Sector",
      "Company ID",
      "Organizational Unit",
      "Contact Name"
    ],
    "explanation": "This semantic type detects full corporate or organizational names that end with a recognized legal suffix (e.g., Inc., LLC, Ltd, Corporation). It is useful for identifying company legal names in datasets where the presence of a legal designator distinguishes corporate entities from people or informal names. Header patterns progress from specific terms like company legal name and publisher name to the primitive name.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:13.980295"
  },
  {
    "resultType": "generated",
    "semanticType": "party",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z][A-Za-z\u2019'-]*\\b([ ,.;:!?-]+\\b[A-Za-z][A-Za-z\u2019'-]*\\b){1,}",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9890,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|order|item|issue).*(description|comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "invoice_date"
        ]
      },
      {
        "regExp": "(?i).*(description|comments|notes).*(text|details).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "description_text"
        ],
        "negativeExamples": [
          "customer_id"
        ]
      },
      {
        "regExp": "(?i).*(description|comments|notes).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Order Notes"
        ],
        "negativeExamples": [
          "Country Code"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmt|cmts|note).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "unit_price"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Description"
        ],
        "negativeExamples": [
          "Number"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please deliver to the side entrance after 5 pm.",
      "Customer requested a callback on Friday morning.",
      "Packaging shows minor wear but item is unused.",
      "Payment will be processed upon receipt of invoice.",
      "Delayed due to weather; notify recipient of new ETA.",
      "Replacement part shipped via courier with tracking provided.",
      "Apply 10% discount for loyalty program member.",
      "Issue resolved after firmware update and reboot."
    ],
    "negativeContentExamples": [
      "Pending",
      "N/A",
      "12345",
      "A1B2C3",
      "RMA 12345",
      "SKU-00123",
      "90210 area",
      "Yes"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Item Description",
      "Order Notes",
      "Review Comments",
      "Additional Notes"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Customer ID",
      "Country Code",
      "Invoice Number",
      "Quantity"
    ],
    "explanation": "This semantic type identifies free-form descriptive text fields such as descriptions, notes, and comments. It is suitable for columns containing sentences or phrases written in natural language rather than structured codes or numeric identifiers. The content regex favors multi-word human-readable text and excludes single tokens or code-like strings.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:18.809024"
  },
  {
    "resultType": "generated",
    "semanticType": "depth",
    "description": "This type captures open-ended text fields that contain human-readable content without predefined formats or constraints. The values represent natural language text including sentences, phrases, and paragraphs with variable length and content depending on the specific use case.",
    "pluginType": "regex",
    "regexPattern": "\\b[A-Za-z]{2,}\\b[ ]+\\b[A-Za-z]{2,}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9810,
    "headerPatterns": [
      {
        "regExp": "(?i).*(product|order|customer).*(description|notes|comments).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "product_description"
        ],
        "negativeExamples": [
          "product_id"
        ]
      },
      {
        "regExp": "(?i).*(issue|problem|feedback|remark|remarks).*(details|description|notes|comments).*",
        "confidence": 94,
        "mandatory": true,
        "positiveExamples": [
          "feedback_comments"
        ],
        "negativeExamples": [
          "issue_id"
        ]
      },
      {
        "regExp": "(?i).*(desc|cmts|rmks|txt).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "item_desc"
        ],
        "negativeExamples": [
          "acct_num"
        ]
      },
      {
        "regExp": "(?i).*(details|summary|narrative|explanation).*",
        "confidence": 93,
        "mandatory": true,
        "positiveExamples": [
          "case_details"
        ],
        "negativeExamples": [
          "case_number"
        ]
      },
      {
        "regExp": "(?i).*description.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "description"
        ],
        "negativeExamples": [
          "date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Please review the attached file.",
      "Customer requested a call back",
      "Damaged on arrival, packaging torn",
      "Payment received in full",
      "Requires manager approval",
      "Left voicemail with instructions",
      "Ship by end of week",
      "Item returned due to defect"
    ],
    "negativeContentExamples": [
      "Pending",
      "N/A",
      "OK",
      "12345",
      "A note",
      "2021-04-05 updated",
      "SKU-123",
      "Y/N"
    ],
    "positiveHeaderExamples": [
      "Description",
      "Notes",
      "Comments",
      "Order Notes",
      "Internal Comments",
      "Case Description",
      "Details",
      "Issue Summary"
    ],
    "negativeHeaderExamples": [
      "ID",
      "Date",
      "Price",
      "Phone Number",
      "Postal Code",
      "Quantity",
      "SKU",
      "Country Code"
    ],
    "explanation": "This semantic type is intended for columns that hold free-form, human-readable narrative content such as descriptions, notes, remarks, or comments. The regex emphasizes the presence of at least two alphabetic words separated by a space, helping distinguish natural language text from identifiers, codes, or single-token fields. High threshold and lower priority reduce interference with more specific types. Typical use cases include product descriptions, customer service notes, case details, and general comments.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:19.561794"
  },
  {
    "resultType": "generated",
    "semanticType": "period",
    "description": "Identifies quarterly period designations as they appear in business reporting, financial analysis, and temporal data organization. Values use common quarter abbreviations and formats such as Q1, Q3 2024, 2024-Q4, FY2023 Q1, or 2022Q2 with clear separators where required.",
    "pluginType": "regex",
    "regexPattern": "\\b((FY|CY)\\d{4}[ -/]?Q[1-4]|Q[1-4][ -/]?(FY|CY)\\d{4}|\\d{4}[ -/]?Q[1-4]|Q[1-4][ -/]\\d{4}|Q[1-4])\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9820,
    "headerPatterns": [
      {
        "regExp": "(?i).*(fiscal|fy|calendar|cy).*[ _-]?quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Fiscal Quarter"
        ],
        "negativeExamples": [
          "Full Year"
        ]
      },
      {
        "regExp": "(?i).*(year)[ _-]?quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Year Quarter"
        ],
        "negativeExamples": [
          "Year"
        ]
      },
      {
        "regExp": "(?i).*quarterly[ _-]?period.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Quarterly Period"
        ],
        "negativeExamples": [
          "Monthly Period"
        ]
      },
      {
        "regExp": "(?i).*qtr.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Qtr"
        ],
        "negativeExamples": [
          "Month"
        ]
      },
      {
        "regExp": "(?i).*quarter.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Quarter"
        ],
        "negativeExamples": [
          "Month Name"
        ]
      },
      {
        "regExp": "(?i).*period.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Period"
        ],
        "negativeExamples": [
          "Date"
        ]
      }
    ],
    "positiveContentExamples": [
      "Q1",
      "Q2 2023",
      "2024 Q3",
      "2020-Q4",
      "Q1/2021",
      "2022Q2",
      "FY2023 Q1",
      "Q3 FY2020"
    ],
    "negativeContentExamples": [
      "2023-01",
      "H1 2023",
      "Q5 2023",
      "Q1.2023",
      "23Q3",
      "Q12023",
      "Quarter 3 2023",
      "2023-Q0"
    ],
    "positiveHeaderExamples": [
      "Quarter",
      "Year Quarter",
      "Quarterly Period",
      "Fiscal Quarter",
      "Qtr",
      "Calendar Quarter"
    ],
    "negativeHeaderExamples": [
      "Half Year",
      "Month",
      "Full Year",
      "Date",
      "Week",
      "Semester"
    ],
    "explanation": "This semantic type targets standardized quarter markers used to group data into three-month intervals, commonly seen in financial and operational reporting. It accepts quarter tokens (Q1\u2013Q4) optionally combined with a four-digit year and optional fiscal/calendar prefixes (FY/CY) with clear separators, supporting forms like Q1 2023, 2023Q3, FY2024 Q2, and Q4/2020.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:26.795555"
  },
  {
    "resultType": "generated",
    "semanticType": "currency",
    "description": "Full English currency names as used in international financial and economic contexts. Values are complete names written in English words, without codes, symbols, or abbreviations.",
    "pluginType": "regex",
    "regexPattern": "\\b(Euro|[A-Z][a-z]+(?:[- ][A-Z][a-z]+){0,3} (Afghani|Ariary|Balboa|Baht|Birr|Bolivar|Bol\u00edvar|Cordoba|C\u00f3rdoba|Colon|Col\u00f3n|Dalasi|Dinar|Dirham|Dollar|Dong|Dram|Escudo|Forint|Franc|Gourde|Hryvnia|Kina|Kip|Krona|Krone|Kroon|Kwanza|Kyat|Lari|Lek|Leone|Leu|Lev|Lilangeni|Lira|Loti|Manat|Mark|Marka|Metical|Naira|Ngultrum|Ouguiya|Pataca|Peso|Pound Sterling|Pound|Pula|Quetzal|Rand|Real|Rial|Riel|Ringgit|Riyal|Ruble|Rouble|Rufiyaa|Rupiah|Rupee|Shekel|Shilling|Sol|Som|Somoni|Taka|Tala|Tenge|Tugrik|Vatu|Won|Yuan|Yen|Zloty))\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 94,
    "priority": 9780,
    "headerPatterns": [
      {
        "regExp": "(?i).*currency.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Currency Name"
        ],
        "negativeExamples": [
          "Currency Code"
        ]
      },
      {
        "regExp": "(?i).*official.*currency.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Official Currency Name"
        ],
        "negativeExamples": [
          "Official Currency Code"
        ]
      },
      {
        "regExp": "(?i).*money.*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Money Name"
        ],
        "negativeExamples": [
          "Money Code"
        ]
      },
      {
        "regExp": "(?i).*(ccy|curr).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "CCY Name"
        ],
        "negativeExamples": [
          "Curr Code"
        ]
      },
      {
        "regExp": "(?i).*money.*",
        "confidence": 92,
        "mandatory": true,
        "positiveExamples": [
          "Money"
        ],
        "negativeExamples": [
          "Exchange Rate"
        ]
      },
      {
        "regExp": "(?i).*currency.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Currency"
        ],
        "negativeExamples": [
          "Country"
        ]
      }
    ],
    "positiveContentExamples": [
      "United States Dollar",
      "Euro",
      "Japanese Yen",
      "British Pound Sterling",
      "Swiss Franc",
      "Canadian Dollar",
      "Indian Rupee",
      "Chinese Yuan"
    ],
    "negativeContentExamples": [
      "USD",
      "US Dollar",
      "U.S. Dollar",
      "British Pounds",
      "Canadian $",
      "Currency",
      "Dollar",
      "Yen"
    ],
    "positiveHeaderExamples": [
      "Currency",
      "Currency Name",
      "Money",
      "Official Currency Name",
      "CCY Name",
      "Curr Name"
    ],
    "negativeHeaderExamples": [
      "Currency Code",
      "Exchange Rate",
      "Country",
      "Amount",
      "Price",
      "Country Name"
    ],
    "explanation": "This semantic type identifies full English currency names such as 'United States Dollar' or 'Swiss Franc'. It excludes codes (e.g., USD), symbols (e.g., $), and abbreviated or partial forms (e.g., US Dollar, Dollar). The regex favors capitalized word tokens followed by a recognized currency unit, with a special allowance for 'Euro'.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:35.721054"
  },
  {
    "resultType": "generated",
    "semanticType": "name",
    "description": "This type represents full personal names formatted in the first name followed by last name order, which is common in Western naming conventions. The values combine given names and family names separated by a single space without including middle names, titles, or additional name components.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]+(['-][A-Z][a-z]+)?|[A-Z]['-][A-Z][a-z]+)\\s([A-Z][a-z]+(['-][A-Z][a-z]+)?|[A-Z]['-][A-Z][a-z]+)\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 98,
    "priority": 9020,
    "headerPatterns": [
      {
        "regExp": "(?i).*(person|customer|user|employee|contact).*(full).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Customer Full Name"
        ],
        "negativeExamples": [
          "First Name"
        ]
      },
      {
        "regExp": "(?i).*(person|contact|customer|user|employee).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Person Name"
        ],
        "negativeExamples": [
          "Email Address"
        ]
      },
      {
        "regExp": "(?i).*(full[_ ]?nm|nm[_ ]?full|fl[_ ]?name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "full_nm"
        ],
        "negativeExamples": [
          "username"
        ]
      },
      {
        "regExp": "(?i).*(full).*(name).*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Full Name"
        ],
        "negativeExamples": [
          "Full Address"
        ]
      },
      {
        "regExp": "(?i).*name.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Name"
        ],
        "negativeExamples": [
          "Email"
        ]
      }
    ],
    "positiveContentExamples": [
      "John Smith",
      "Maria Garcia",
      "Anne-Marie Johnson",
      "D'Arcy Wills",
      "John O'Connor",
      "Luca Moretti",
      "Jean-Paul Sartre",
      "Chloe Brown"
    ],
    "negativeContentExamples": [
      "JOHN DOE",
      "John A. Smith",
      "Dr John Smith",
      "Mary",
      "Smith, John",
      "Li  Wei",
      "Ana-Maria-Jose Perez",
      "O' Connor"
    ],
    "positiveHeaderExamples": [
      "Full Name",
      "Name",
      "Person Name",
      "Customer Full Name",
      "User Full Name",
      "Employee Full Name",
      "Contact Name",
      "Buyer Name"
    ],
    "negativeHeaderExamples": [
      "First Name",
      "Last Name",
      "Email Address",
      "Username",
      "Company Name",
      "Account Name",
      "Display Name",
      "Billing Contact"
    ],
    "explanation": "Identifies two-token personal names in first-last order with standard casing, allowing a single hyphen or apostrophe within each token (e.g., Anne-Marie, O'Connor). Use this when a column stores a single field containing a given name followed by a family name without middle names, initials, titles, or reversed order.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:46:54.648522"
  },
  {
    "resultType": "generated",
    "semanticType": "language",
    "description": "This type captures natural language names as they are commonly expressed in English text and international communication. The values represent complete language names using standard English terminology and conventional spelling without abbreviated forms or codes.",
    "pluginType": "regex",
    "regexPattern": "\\b([A-Z][a-z]{2,}([\\-\\'][A-Z][a-z]{1,})?)(\\s+[A-Z][a-z]{2,}([\\-\\'][A-Z][a-z]{1,})?){0,3}\\b",
    "listValues": null,
    "backout": null,
    "confidenceThreshold": 93,
    "priority": 9440,
    "headerPatterns": [
      {
        "regExp": "(?i).*\\blanguage[\\s_-]*name\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Language Name"
        ],
        "negativeExamples": [
          "Language Code"
        ]
      },
      {
        "regExp": "(?i).*\\bspoken[\\s_-]*language\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Spoken Language"
        ],
        "negativeExamples": [
          "Programming Language"
        ]
      },
      {
        "regExp": "(?i).*\\buser[\\s_-]*language\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "User Language"
        ],
        "negativeExamples": [
          "Language Code"
        ]
      },
      {
        "regExp": "(?i).*\\blang\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Lang"
        ],
        "negativeExamples": [
          "Country"
        ]
      },
      {
        "regExp": "(?i).*\\blanguage\\b.*",
        "confidence": 95,
        "mandatory": true,
        "positiveExamples": [
          "Language"
        ],
        "negativeExamples": [
          "Dialect"
        ]
      }
    ],
    "positiveContentExamples": [
      "English",
      "Spanish",
      "Mandarin Chinese",
      "American Sign Language",
      "Haitian Creole",
      "Simplified Chinese",
      "German",
      "Serbo-Croatian"
    ],
    "negativeContentExamples": [
      "ENGLISH",
      "en",
      "English (UK)",
      "Mandarin/Chinese",
      "English-UK",
      "Cantonese, Chinese",
      "Chinese 2",
      "Old Norse (Classical)"
    ],
    "positiveHeaderExamples": [
      "Language",
      "Language Name",
      "Spoken Language",
      "Preferred Language",
      "User Language",
      "Primary Language",
      "Native Language",
      "Lang"
    ],
    "negativeHeaderExamples": [
      "Language Code",
      "Country",
      "Dialect",
      "Programming Language",
      "Locale",
      "Nationality",
      "Coding Language",
      "Language Family"
    ],
    "explanation": "Values matching this semantic type are full natural language names written in standard English title case, optionally composed of multiple words and allowing common hyphenation within words (e.g., Serbo-Croatian). It is intended for columns that store the language as a name rather than a code, abbreviation, or compound with extra qualifiers. Typical use cases include user profile language, content language, and survey response language fields.",
    "description_pattern": "P3",
    "generated_at": "2025-08-10T18:47:18.416473"
  }
]