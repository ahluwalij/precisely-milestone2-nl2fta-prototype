{
  "dataset": "telco_5GTraffic",
  "description_number": 6,
  "timestamp": "20250808_085402",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "Source",
      "description": "Network traffic source IP address identifier - IPv4 or IPv6 addresses that represent the origin point of network communications",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?::[0-9a-fA-F]{1,4}){1,6}|:(?::[0-9a-fA-F]{1,4}){1,7}|::(?:[0-9a-fA-F]{1,4}:){0,6}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.168.1.100",
        "10.0.0.1",
        "172.16.254.1",
        "203.0.113.45",
        "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
        "2001:db8::1",
        "::1"
      ],
      "negativeContentExamples": [
        "192.168.1.256",
        "10.0.0",
        "172.16.254.1.1",
        "203.0.113",
        "2001:0db8:85a3::8a2e::7334",
        "gggg::1",
        "192.168.1.1:8080",
        "source-server-01"
      ],
      "positiveHeaderExamples": [
        "Source_IP",
        "Src_IP_Address",
        "Origin_IP",
        "Source_Address",
        "Src_Addr",
        "Client_IP",
        "From_IP",
        "Sender_IP"
      ],
      "negativeHeaderExamples": [
        "Source_Port",
        "Origin_Hostname",
        "Destination_IP",
        "Target_IP",
        "Dst_IP_Address",
        "Server_IP",
        "Source_MAC",
        "Source_URL"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*source.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source_IP_Address"
          ],
          "negativeExamples": [
            "Destination_IP_Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*src.*ip.*addr.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Src_IP_Addr"
          ],
          "negativeExamples": [
            "Dst_IP_Addr"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*origin.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Origin_IP"
          ],
          "negativeExamples": [
            "Origin_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*source.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source_IP"
          ],
          "negativeExamples": [
            "Source_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*src.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Src_IP"
          ],
          "negativeExamples": [
            "Src_MAC"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*source.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source"
          ],
          "negativeExamples": [
            "Destination"
          ],
          "rationale": null
        }
      ],
      "priority": 2760,
      "explanation": "This semantic type identifies IP addresses that serve as the source or origin point in network traffic analysis. It captures both IPv4 and IPv6 addresses that represent where network communications originate from. This is commonly used in network security logs, firewall records, intrusion detection systems, and network monitoring tools to track the source of network activity. The type distinguishes source IP addresses from destination IPs, ports, hostnames, and other network identifiers through both content pattern matching and header pattern recognition.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T08:52:18.927420"
    },
    {
      "resultType": "generated",
      "semanticType": "Destination",
      "description": "Network traffic destination IP address - identifies the target endpoint in network communications",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|::1|(?:[0-9a-fA-F]{1,4}:)*::(?:[0-9a-fA-F]{1,4}:)*[0-9a-fA-F]{1,4}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.168.1.100",
        "10.0.0.1",
        "172.16.254.1",
        "203.0.113.45",
        "::1",
        "8.8.8.8"
      ],
      "negativeContentExamples": [
        "192.168.1.256",
        "300.168.1.1",
        "192.168",
        "192.168.1",
        "www.example.com",
        "localhost",
        "8080",
        "192.168.1.1:8080"
      ],
      "positiveHeaderExamples": [
        "Destination_IP",
        "Dst_IP_Address",
        "Target_IP",
        "Dest_Address",
        "Destination_IPv4",
        "Network_Destination",
        "Traffic_Dest_IP",
        "Remote_IP"
      ],
      "negativeHeaderExamples": [
        "Destination_Port",
        "Destination_Hostname",
        "Source_IP",
        "Src_IP_Address",
        "Local_IP",
        "Gateway_IP",
        "DNS_Server",
        "Subnet_Mask"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*destination.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Destination_IP_Address"
          ],
          "negativeExamples": [
            "Source_IP_Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dest.*ip.*addr.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Dest_IP_Addr"
          ],
          "negativeExamples": [
            "Src_IP_Addr"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*dst.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Dst_IP"
          ],
          "negativeExamples": [
            "Dst_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*target.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Target_IP"
          ],
          "negativeExamples": [
            "Target_Host"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*destination.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Destination"
          ],
          "negativeExamples": [
            "Destination_Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Address"
          ],
          "negativeExamples": [
            "Street_Address"
          ],
          "rationale": null
        }
      ],
      "priority": 2770,
      "explanation": "This semantic type identifies destination IP addresses in network traffic data. It's specifically designed to recognize IPv4 and IPv6 addresses that represent the target or endpoint of network communications. This is commonly found in network logs, firewall data, intrusion detection systems, and traffic analysis datasets. The type distinguishes destination addresses from source addresses, ports, hostnames, or other network identifiers through both content pattern matching and header analysis. It supports both IPv4 (dotted decimal notation) and IPv6 (hexadecimal colon notation) address formats.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T08:52:54.173214"
    },
    {
      "resultType": "generated",
      "semanticType": "Protocol",
      "description": "Network transmission protocol types used in communication systems",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "TCP",
        "UDP",
        "HTTP",
        "HTTPS",
        "FTP",
        "SFTP",
        "SSH",
        "SMTP",
        "POP3",
        "IMAP",
        "DNS",
        "DHCP",
        "SNMP",
        "ICMP",
        "ARP",
        "RARP",
        "TELNET",
        "NTP",
        "LDAP",
        "SIP",
        "RTP",
        "RTCP",
        "BGP",
        "OSPF"
      ],
      "backout": "(?i)[A-Z]{2,5}[PS]?",
      "positiveContentExamples": [
        "TCP",
        "UDP",
        "HTTP",
        "HTTPS",
        "FTP",
        "SMTP",
        "DNS",
        "SSH"
      ],
      "negativeContentExamples": [
        "80",
        "443",
        "192.168.1.1",
        "www.example.com",
        "email@domain.com",
        "Apache",
        "Windows",
        "MySQL"
      ],
      "positiveHeaderExamples": [
        "Protocol_Type",
        "Network_Protocol",
        "Transmission_Protocol",
        "Comm_Protocol",
        "Net_Protocol_Type",
        "Communication_Protocol",
        "Protocol_Name",
        "Network_Protocol_Used"
      ],
      "negativeHeaderExamples": [
        "Service_Name",
        "Port_Number",
        "IP_Address",
        "Server_Name",
        "Application_Name",
        "Protocol_Version",
        "Network_Interface",
        "Connection_Type"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*network.*protocol.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Network_Protocol_Type"
          ],
          "negativeExamples": [
            "Network_Service_Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transmission.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transmission_Protocol"
          ],
          "negativeExamples": [
            "Transmission_Rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*comm.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Comm_Protocol"
          ],
          "negativeExamples": [
            "Comm_Channel"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*protocol.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Protocol_Type"
          ],
          "negativeExamples": [
            "Protocol_Version"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*net.*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Net_Protocol"
          ],
          "negativeExamples": [
            "Net_Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*protocol.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Protocol"
          ],
          "negativeExamples": [
            "Port"
          ],
          "rationale": null
        }
      ],
      "priority": 2780,
      "explanation": "This semantic type identifies network transmission protocol types used in communication systems. It covers the most common protocols used for data transmission across networks, including transport layer protocols (TCP, UDP), application layer protocols (HTTP, HTTPS, FTP, SMTP), and network management protocols (DNS, DHCP, SNMP). The type uses a finite list approach since network protocols are standardized and well-defined, with a backout pattern to catch protocol-like abbreviations that might not be in the main list. This is useful for network analysis, security monitoring, and system configuration documentation.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T08:53:26.289573"
    },
    {
      "resultType": "generated",
      "semanticType": "Length",
      "description": "Network packet size measurements representing the length of data transmission in bytes",
      "pluginType": "regex",
      "regexPattern": "\\d{1,5}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "64",
        "1500",
        "576",
        "1024",
        "128",
        "9000",
        "46",
        "1518"
      ],
      "negativeContentExamples": [
        "100000",
        "-64",
        "1500.5",
        "abc",
        "1500 bytes",
        "1,500",
        "1500ms"
      ],
      "positiveHeaderExamples": [
        "Packet_Length",
        "Length_Bytes",
        "pkt_size",
        "frame_length",
        "msg_len",
        "packet_size_bytes",
        "data_length",
        "transmission_size"
      ],
      "negativeHeaderExamples": [
        "Duration",
        "Payload_Size",
        "packet_count",
        "bandwidth",
        "file_size",
        "buffer_size",
        "window_size",
        "queue_length"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*packet.*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Packet_Length"
          ],
          "negativeExamples": [
            "Duration"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*packet.*size.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "packet_size_bytes"
          ],
          "negativeExamples": [
            "Payload_Size"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*bytes.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Length_Bytes"
          ],
          "negativeExamples": [
            "file_length_chars"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*pkt.*(len|size).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "pkt_len"
          ],
          "negativeExamples": [
            "pkt_count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(frame|msg).*(len|size).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "frame_length"
          ],
          "negativeExamples": [
            "frame_rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*length.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "length"
          ],
          "negativeExamples": [
            "width"
          ],
          "rationale": null
        }
      ],
      "priority": 2790,
      "explanation": "This semantic type identifies network packet size measurements, which represent the length of data transmission units in computer networks. Packet sizes are typically measured in bytes and have practical limits based on network protocols (e.g., Ethernet MTU of 1500 bytes, jumbo frames up to 9000 bytes). The pattern matches numeric values from 1 to 5 digits, covering the typical range of packet sizes from minimum frame sizes (46-64 bytes) to jumbo frames. This type is distinct from other size measurements like file sizes or payload sizes, focusing specifically on network transmission units.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P6",
      "generated_at": "2025-08-08T08:54:02.337592"
    }
  ]
}