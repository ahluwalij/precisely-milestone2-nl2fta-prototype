{
  "dataset": "fintech_bank_transaction",
  "description_number": 4,
  "timestamp": "20250808_112519",
  "generated_types": [
    {
      "resultType": "generated",
      "semanticType": "TransactionID",
      "description": "A string that strictly matches the pattern TX\\d{6}, where 'TX' is a constant prefix followed by exactly six digits (0\u20139), with no spaces or symbols. Used for transaction reference codes.",
      "pluginType": "regex",
      "regexPattern": "TX\\d{6}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "TX000001",
        "TX000201",
        "TX123456",
        "TX999999",
        "TX000000",
        "TX567890",
        "TX111111",
        "TX987654"
      ],
      "negativeContentExamples": [
        "TX12345",
        "TX1234567",
        "tx000001",
        "TX 000001",
        "TX-000001",
        "RX000001",
        "TX00000A",
        "TX000001X"
      ],
      "positiveHeaderExamples": [
        "Transaction ID",
        "TX Reference",
        "Transaction Reference",
        "TX ID",
        "Transaction Code",
        "TX Ref",
        "Transaction Number",
        "TX Code"
      ],
      "negativeHeaderExamples": [
        "User ID",
        "Transaction Date",
        "Customer ID",
        "Order Number",
        "Invoice ID",
        "Payment Reference",
        "Account Number",
        "Product Code"
      ],
      "confidenceThreshold": 98.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*reference.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Reference"
          ],
          "negativeExamples": [
            "Customer Reference"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*tx.*reference.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "TX Reference"
          ],
          "negativeExamples": [
            "RX Reference"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transaction.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction ID"
          ],
          "negativeExamples": [
            "User ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*tx.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "TX ID"
          ],
          "negativeExamples": [
            "RX ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transaction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction"
          ],
          "negativeExamples": [
            "Transaction Date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*reference.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Reference"
          ],
          "negativeExamples": [
            "Date"
          ],
          "rationale": null
        }
      ],
      "priority": 5140,
      "explanation": "This semantic type identifies transaction reference codes that follow a specific format: the prefix \"TX\" followed by exactly six digits. This pattern is commonly used in financial systems, e-commerce platforms, and transaction processing systems to create unique, sequential identifiers for transactions. The strict format ensures consistency and allows for easy validation and processing. The pattern is case-sensitive and requires no spaces or additional characters, making it suitable for systems that need precise transaction tracking and reference.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:16:42.774810"
    },
    {
      "resultType": "generated",
      "semanticType": "AccountID",
      "description": "Account identifier following the pattern AC followed by exactly 5 digits (AC\\d{5})",
      "pluginType": "regex",
      "regexPattern": "AC\\d{5}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "AC00128",
        "AC00393",
        "AC12345",
        "AC99999",
        "AC00001",
        "AC54321",
        "AC77777",
        "AC00000"
      ],
      "negativeContentExamples": [
        "AC1234",
        "AC123456",
        "AC0012A",
        "BC00128",
        "ac00128",
        "A00128",
        "AC 00128",
        "AC-00128"
      ],
      "positiveHeaderExamples": [
        "Account ID",
        "Customer Account Code",
        "Account Code",
        "Acct ID",
        "Customer Account ID",
        "Account Identifier",
        "Primary Account Code",
        "Account Reference"
      ],
      "negativeHeaderExamples": [
        "Account Balance",
        "Customer Name",
        "Account Type",
        "Account Status",
        "Account Description",
        "Account Owner",
        "Account Created Date",
        "Account Amount"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*account.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Customer Account Code"
          ],
          "negativeExamples": [
            "Customer Account Balance"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*account.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Account ID"
          ],
          "negativeExamples": [
            "Account Balance"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*account.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Account Code"
          ],
          "negativeExamples": [
            "Account Name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*acct.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Acct ID"
          ],
          "negativeExamples": [
            "Acct Balance"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*account.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Account"
          ],
          "negativeExamples": [
            "Balance"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "ID"
          ],
          "negativeExamples": [
            "Name"
          ],
          "rationale": null
        }
      ],
      "priority": 5150,
      "explanation": "This semantic type identifies account identifiers that follow a specific format of 'AC' followed by exactly 5 digits. This pattern is commonly used in financial systems, customer relationship management systems, and business applications where accounts need unique, structured identifiers. The 'AC' prefix clearly indicates it's an account code, while the 5-digit suffix provides a structured numbering system that can accommodate up to 100,000 unique accounts (00000-99999). This type of identifier is useful for data validation, account lookup operations, and ensuring data consistency across systems that handle account information.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:17:15.374692"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionAmount",
      "description": "Monetary amounts represented as positive numbers with optional decimal places up to two digits for currency precision, following the pattern \\d+(\\.\\d{1,2})?",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d{1,2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "376.24",
        "1.2",
        "1000",
        "25.99",
        "0.01",
        "999999.99",
        "50",
        "123.5"
      ],
      "negativeContentExamples": [
        "-25.99",
        "1.234",
        "0.001",
        "25.9999",
        "abc.12",
        "25.",
        "$25.99",
        "25,000.00"
      ],
      "positiveHeaderExamples": [
        "Transaction Amount",
        "Amount",
        "Payment Amount",
        "Total Amount",
        "Purchase Amt",
        "Sale Amount",
        "Net Amount",
        "Gross Amount"
      ],
      "negativeHeaderExamples": [
        "Transaction Date",
        "Balance",
        "Account Number",
        "Currency Code",
        "Payment Method",
        "Transaction ID",
        "Customer Name",
        "Item Count"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Amount"
          ],
          "negativeExamples": [
            "Transaction Date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*amount.*(usd|eur|gbp|cad|aud).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Amount (USD)"
          ],
          "negativeExamples": [
            "Currency Code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(payment|purchase|sale).*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Payment Amount"
          ],
          "negativeExamples": [
            "Payment Method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(total|subtotal|net|gross).*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Total Amount"
          ],
          "negativeExamples": [
            "Total Items"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(amt|amnt).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Amt"
          ],
          "negativeExamples": [
            "Account Number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*amount.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Amount"
          ],
          "negativeExamples": [
            "Balance"
          ],
          "rationale": null
        }
      ],
      "priority": 5160,
      "explanation": "This semantic type identifies monetary amounts in their numeric form, specifically positive currency values with up to two decimal places for precision. It's commonly used in financial transactions, invoices, receipts, and accounting systems where monetary values need to be stored and processed. The pattern ensures compatibility with standard currency formatting while maintaining simplicity for mathematical operations. This type is essential for financial data analysis, reporting, and transaction processing systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:17:48.981141"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionDate",
      "description": "Formatted date-time strings following patterns like M/d/yyyy H:mm:ss or yyyy-MM-dd H:mm:ss for complete date-time representation with both date and time components",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4} \\d{1,2}:\\d{2}:\\d{2}|\\d{4}-\\d{2}-\\d{2} \\d{1,2}:\\d{2}:\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "4/11/2023 16:29:14",
        "2023-05-11 11:29:14",
        "12/31/2022 23:59:59",
        "2024-01-01 0:00:01",
        "7/4/2023 9:15:30",
        "2023-12-25 18:45:22",
        "1/1/2024 12:00:00",
        "2023-06-15 7:30:45"
      ],
      "negativeContentExamples": [
        "4/11/2023",
        "16:29:14",
        "2023-05-11T11:29:14",
        "04/11/23 16:29:14",
        "2023/05/11 11:29:14",
        "11-05-2023 11:29:14",
        "2023-05-11 11:29",
        "May 11, 2023 11:29:14"
      ],
      "positiveHeaderExamples": [
        "Transaction Date",
        "Txn Timestamp",
        "Order DateTime",
        "Event Timestamp",
        "Created Date Time",
        "Purchase Date",
        "Modified Timestamp",
        "Log DateTime"
      ],
      "negativeHeaderExamples": [
        "Transaction ID",
        "Date Created",
        "Order Number",
        "Event Type",
        "Created By",
        "Purchase Amount",
        "Modified By",
        "Log Level"
      ],
      "confidenceThreshold": 92.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*date.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Date Time"
          ],
          "negativeExamples": [
            "Transaction Amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Txn Timestamp"
          ],
          "negativeExamples": [
            "Txn ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*datetime.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Event DateTime"
          ],
          "negativeExamples": [
            "Event Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Created Timestamp"
          ],
          "negativeExamples": [
            "Created By"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Order Date Time"
          ],
          "negativeExamples": [
            "Order Status"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Purchase Date"
          ],
          "negativeExamples": [
            "Purchase ID"
          ],
          "rationale": null
        }
      ],
      "priority": 5170,
      "explanation": "This semantic type identifies formatted date-time strings that combine both date and time components in specific patterns. It recognizes two common formats: the US format (M/d/yyyy H:mm:ss) and the ISO-like format (yyyy-MM-dd H:mm:ss). This type is commonly used for transaction timestamps, event logging, audit trails, and any scenario where precise date-time recording is required. The pattern ensures both date and time components are present, distinguishing it from date-only or time-only fields.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:18:51.328888"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionType",
      "description": "Transaction direction indicator using fixed pattern matching to categorize the directional flow of funds as either Debit or Credit",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "DEBIT",
        "CREDIT",
        "DEBIT",
        "CREDIT",
        "DEBIT",
        "CREDIT",
        "DR",
        "CR",
        "DR",
        "CR",
        "DR",
        "CR"
      ],
      "backout": "(?i)(debit|credit|dr|cr)",
      "positiveContentExamples": [
        "Debit",
        "Credit",
        "DEBIT",
        "CREDIT",
        "debit",
        "credit",
        "Dr",
        "Cr"
      ],
      "negativeContentExamples": [
        "Deposit",
        "Withdrawal",
        "Transfer",
        "Payment",
        "Refund",
        "Fee",
        "Interest",
        "Balance"
      ],
      "positiveHeaderExamples": [
        "Transaction Type",
        "Txn Direction",
        "Transaction Direction",
        "Debit Credit Indicator",
        "Dr Cr Type",
        "Transaction Flow",
        "Entry Type",
        "Posting Direction"
      ],
      "negativeHeaderExamples": [
        "Account Type",
        "Payment Method",
        "Transaction Amount",
        "Card Type",
        "Customer Type",
        "Product Type",
        "Status Type",
        "Currency Type"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Type"
          ],
          "negativeExamples": [
            "Account Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*direction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Txn Direction"
          ],
          "negativeExamples": [
            "Payment Method"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*transaction.*direction.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Direction"
          ],
          "negativeExamples": [
            "Transaction Amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(debit|credit).*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Debit Credit Type"
          ],
          "negativeExamples": [
            "Card Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Txn Type"
          ],
          "negativeExamples": [
            "Account Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(direction|type).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Direction"
          ],
          "negativeExamples": [
            "Amount"
          ],
          "rationale": null
        }
      ],
      "priority": 5180,
      "explanation": "This semantic type identifies transaction direction fields that categorize financial transactions as either debits or credits. It uses a finite list approach since there are only two primary values (Debit/Credit) with their common variations including case variations and abbreviations (Dr/Cr). This type is commonly found in accounting systems, banking records, and financial transaction logs where the directional flow of funds needs to be clearly indicated. The pattern matching is strict to ensure accurate classification of this critical financial data element.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:19:22.847448"
    },
    {
      "resultType": "existing",
      "semanticType": "Location",
      "description": "City/Town",
      "pluginType": "regex",
      "regexPattern": null,
      "listValues": null,
      "backout": null,
      "positiveContentExamples": [],
      "negativeContentExamples": [],
      "positiveHeaderExamples": [
        "Location",
        "Branch Location"
      ],
      "negativeHeaderExamples": [
        "Latitude",
        "Country Code"
      ],
      "confidenceThreshold": 0.0,
      "headerPatterns": null,
      "priority": 5190,
      "explanation": "The CITY type is a strong match for the user's requirements. The user's description specifically mentions \"city or region names\" with examples like \"New York, San Francisco\" which are classic city names. The pattern [A-Za-z\\s]+ for alphabetic characters and spaces aligns well with typical city name formats. While the user mentions \"region names\" which could be broader than just cities, the examples provided are specifically cities, and the CITY type would cover the primary use case effectively.",
      "existingTypeMatch": "CITY",
      "existingTypeDescription": "City/Town",
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": [
        "^(?i)(ort)$"
      ],
      "existingTypeIsBuiltIn": true,
      "suggestedAction": "use_existing",
      "comparison": {
        "existingTypeName": "CITY",
        "existingTypeDescription": "City/Town",
        "similarityScore": 0.7228381424904378,
        "similarities": [
          "Both types are designed to store geographic location data representing cities, towns, and regions, with the user's type providing explicit validation through a regex pattern that restricts input to alphabetic characters and spaces"
        ],
        "differences": [
          {
            "aspect": "Key Difference",
            "description": "The existing City/Town type likely accepts similar geographic location data but may have broader or different validation rules that could allow additional characters commonly found in place names like hyphens, apostrophes, or numbers"
          }
        ],
        "recommendUseExisting": false,
        "recommendationReason": "The types are different enough that you should create a new semantic type.",
        "summary": "Both types are designed to store geographic location data representing cities, towns, and regions, with the user's type providing explicit validation through a regex pattern that restricts input to alphabetic characters and spaces. The existing City/Town type likely accepts similar geographic location data but may have broader or different validation rules that could allow additional characters commonly found in place names like hyphens, apostrophes, or numbers.",
        "similarityPercentage": 72.28381424904377
      },
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:19:50.406296"
    },
    {
      "resultType": "generated",
      "semanticType": "DeviceID",
      "description": "Device identifier following the pattern D followed by exactly six numeric digits (D\\d{6}). Used to uniquely identify devices in systems with a standardized device numbering scheme.",
      "pluginType": "regex",
      "regexPattern": "D\\d{6}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "D000380",
        "D001380",
        "D123456",
        "D000001",
        "D999999",
        "D567890",
        "D098765",
        "D555555"
      ],
      "negativeContentExamples": [
        "D12345",
        "D1234567",
        "d000380",
        "D000380A",
        "AD000380",
        "D00038A",
        "123456",
        "E000380"
      ],
      "positiveHeaderExamples": [
        "Device ID",
        "D\u2011ID",
        "Device Identifier",
        "Device Number",
        "DeviceID",
        "Device_ID",
        "DEVICE_IDENTIFIER",
        "Dev ID"
      ],
      "negativeHeaderExamples": [
        "Customer ID",
        "Device Type",
        "Device Name",
        "Serial Number",
        "Product ID",
        "User ID",
        "Order ID",
        "Device Status"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*device.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Device ID"
          ],
          "negativeExamples": [
            "Customer ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*d.id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "D\u2011ID"
          ],
          "negativeExamples": [
            "User ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*device.*identifier.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Device Identifier"
          ],
          "negativeExamples": [
            "Device Type"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*device.*num.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Device Number"
          ],
          "negativeExamples": [
            "Serial Number"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*device.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Device"
          ],
          "negativeExamples": [
            "Customer"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "ID"
          ],
          "negativeExamples": [
            "Name"
          ],
          "rationale": null
        }
      ],
      "priority": 5200,
      "explanation": "This semantic type identifies device identifiers that follow a specific format: the letter 'D' followed by exactly six numeric digits. This pattern is commonly used in manufacturing, IoT systems, and inventory management where devices need standardized, sequential identification codes. The pattern ensures consistent device numbering while providing a large namespace (1 million possible device IDs from D000000 to D999999). This type is useful for data validation, device tracking, and ensuring data quality in systems that manage device inventories or monitor device performance.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:20:23.779644"
    },
    {
      "resultType": "generated",
      "semanticType": "IP Address",
      "description": "IPv4 addresses consisting of four decimal numbers (0-255) separated by dots, representing network addresses in the Internet Protocol version 4 format",
      "pluginType": "regex",
      "regexPattern": "(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "192.168.1.1",
        "10.0.0.1",
        "172.16.254.1",
        "8.8.8.8",
        "127.0.0.1",
        "255.255.255.255",
        "0.0.0.0",
        "203.0.113.195"
      ],
      "negativeContentExamples": [
        "256.1.1.1",
        "192.168.1",
        "192.168.1.1.1",
        "192.168.-1.1",
        "192.168.1.256",
        "192.168.1.1:8080",
        "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
      ],
      "positiveHeaderExamples": [
        "IP Address",
        "Source IP",
        "Client IP Address",
        "Server IP",
        "Remote IP",
        "Host IP",
        "Origin IP",
        "Network Address"
      ],
      "negativeHeaderExamples": [
        "MAC Address",
        "Address",
        "IPv6 Address",
        "Email Address",
        "Physical Address",
        "Port Number",
        "Subnet Mask",
        "Gateway"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*source.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Source IP Address"
          ],
          "negativeExamples": [
            "Source MAC Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*destination.*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Destination IP Address"
          ],
          "negativeExamples": [
            "Destination Port"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*client.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Client IP"
          ],
          "negativeExamples": [
            "Client ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*server.*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Server IP"
          ],
          "negativeExamples": [
            "Server Name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*ip.*address.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "IP Address"
          ],
          "negativeExamples": [
            "MAC Address"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*ip.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "IP"
          ],
          "negativeExamples": [
            "VIP"
          ],
          "rationale": null
        }
      ],
      "priority": 5210,
      "explanation": "This semantic type identifies IPv4 addresses, which are 32-bit numerical labels used to identify devices on computer networks. IPv4 addresses are written in dotted decimal notation as four octets (numbers from 0-255) separated by periods. This type is commonly found in network logs, server configurations, security data, and any system that tracks network communications. The regex pattern ensures that each octet is within the valid range of 0-255, preventing false matches on invalid IP addresses that might superficially look correct but exceed the valid range.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:20:54.511586"
    },
    {
      "resultType": "generated",
      "semanticType": "MerchantID",
      "description": "Merchant identification codes following the pattern M followed by exactly three digits (M\\d{3}). Used to uniquely identify merchants in payment processing and retail systems.",
      "pluginType": "regex",
      "regexPattern": "M\\d{3}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "M091",
        "M011",
        "M123",
        "M456",
        "M789",
        "M001",
        "M999",
        "M500"
      ],
      "negativeContentExamples": [
        "M12",
        "M1234",
        "m091",
        "M91",
        "M0911",
        "N091",
        "M12A",
        "MA91"
      ],
      "positiveHeaderExamples": [
        "Merchant ID",
        "Merchant Code",
        "Merchant Identifier",
        "MerchantCode",
        "MERCHANT_ID",
        "merchant_code",
        "Merchant Number",
        "MID"
      ],
      "negativeHeaderExamples": [
        "Store Name",
        "Vendor Name",
        "Business Name",
        "Company Name",
        "Retailer Name",
        "Shop Name",
        "Store Location",
        "Merchant Address"
      ],
      "confidenceThreshold": 95.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*merchant.*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Merchant Code"
          ],
          "negativeExamples": [
            "Product Code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*id.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Merchant ID"
          ],
          "negativeExamples": [
            "Customer ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*identifier.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Merchant Identifier"
          ],
          "negativeExamples": [
            "Transaction Identifier"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*merchant.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Merchant"
          ],
          "negativeExamples": [
            "Store Name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*code.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Code"
          ],
          "negativeExamples": [
            "Name"
          ],
          "rationale": null
        }
      ],
      "priority": 5220,
      "explanation": "This semantic type identifies merchant codes that follow a specific format of 'M' followed by exactly three digits. These codes are commonly used in payment processing systems, point-of-sale systems, and retail management platforms to uniquely identify merchants or stores. The pattern ensures consistent identification across different systems and helps maintain data integrity in merchant-related transactions and reporting.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:21:27.353509"
    },
    {
      "resultType": "generated",
      "semanticType": "Channel",
      "description": "Service delivery channel types representing the method or medium through which financial or business services are accessed, such as ATM, Online, Branch, Mobile, or Phone",
      "pluginType": "list",
      "regexPattern": "",
      "listValues": [
        "ATM",
        "ONLINE",
        "BRANCH",
        "MOBILE",
        "PHONE",
        "WEB",
        "INTERNET",
        "TELEPHONE",
        "CALL CENTER",
        "IN-PERSON",
        "DIGITAL",
        "KIOSK",
        "MAIL",
        "FAX",
        "EMAIL"
      ],
      "backout": "(?i)(ATM|Online|Branch|Mobile|Phone|Web|Internet|Telephone|Call.?Center|In.?Person|Digital|Kiosk|Mail|Fax|Email)",
      "positiveContentExamples": [
        "ATM",
        "Online",
        "Branch",
        "Mobile",
        "Phone",
        "Web",
        "Internet",
        "Telephone"
      ],
      "negativeContentExamples": [
        "ESPN",
        "CNN",
        "HBO",
        "Retail",
        "Wholesale",
        "Direct",
        "Partner",
        "Affiliate"
      ],
      "positiveHeaderExamples": [
        "Channel",
        "Transaction Channel",
        "Service Channel",
        "Access Channel",
        "Delivery Channel",
        "Channel Type",
        "Service Delivery Method",
        "Banking Channel"
      ],
      "negativeHeaderExamples": [
        "TV Channel",
        "Distribution Channel",
        "Marketing Channel",
        "Sales Channel",
        "Communication Channel",
        "Media Channel",
        "Broadcasting Channel",
        "Channel Number"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Channel"
          ],
          "negativeExamples": [
            "Transaction Amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*service.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Service Channel"
          ],
          "negativeExamples": [
            "Service Date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*delivery.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Delivery Channel"
          ],
          "negativeExamples": [
            "Distribution Channel"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*access.*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Access Channel"
          ],
          "negativeExamples": [
            "Access Code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*type.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Channel Type"
          ],
          "negativeExamples": [
            "Channel Name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*channel.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Channel"
          ],
          "negativeExamples": [
            "TV Channel"
          ],
          "rationale": null
        }
      ],
      "priority": 5230,
      "explanation": "This semantic type identifies service delivery channels used in financial services and business operations. It captures the various methods through which customers can access services, such as ATM for automated teller machines, Online for web-based services, Branch for physical locations, Mobile for smartphone applications, and Phone for telephone-based services. This is commonly used in transaction data, customer interaction logs, and service analytics to track how customers prefer to engage with services. The type distinguishes between service delivery channels and other types of channels like TV channels or distribution channels by focusing on customer service access methods.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:22:00.350513"
    },
    {
      "resultType": "generated",
      "semanticType": "CustomerAge",
      "description": "Represents a person's age as a positive integer, typically between 0 and 120 years, commonly used for customer demographics and age verification",
      "pluginType": "regex",
      "regexPattern": "\\d{1,3}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "18",
        "25",
        "42",
        "67",
        "89",
        "21",
        "55",
        "33"
      ],
      "negativeContentExamples": [
        "18.5",
        "-25",
        "25 years",
        "42.0",
        "N/A",
        "twenty-five",
        "1995"
      ],
      "positiveHeaderExamples": [
        "Customer Age",
        "Age",
        "Person Age",
        "Current Age",
        "Age",
        "Member Age",
        "Patient Age",
        "Employee Age"
      ],
      "negativeHeaderExamples": [
        "Account Age",
        "Years Since Opening",
        "Service Years",
        "Product Age",
        "Building Age",
        "Company Age",
        "Membership Duration",
        "Years of Experience"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Customer Age"
          ],
          "negativeExamples": [
            "Customer Account Age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*person.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Person Age"
          ],
          "negativeExamples": [
            "Person Employment Age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*age.*(years|yrs).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Age (years)"
          ],
          "negativeExamples": [
            "Account Age (years)"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Current Age"
          ],
          "negativeExamples": [
            "Current Account Age"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*age.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Age"
          ],
          "negativeExamples": [
            "Vintage"
          ],
          "rationale": null
        }
      ],
      "priority": 5240,
      "explanation": "This semantic type identifies person age values represented as positive integers. It's designed to capture human ages in demographic data, customer profiles, medical records, and similar contexts. The pattern matches 1-3 digit numbers, which covers the realistic range of human ages from 0 to 999, though practically most values would be between 0-120. The header patterns specifically look for age references that relate to people rather than accounts, products, or other entities that might have age-like attributes. This helps distinguish between person age and other temporal measurements like account age or years of service.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:22:31.661273"
    },
    {
      "resultType": "generated",
      "semanticType": "CustomerOccupation",
      "description": "Professional occupations and job titles containing only alphabetic characters and spaces, representing various career fields and professional roles",
      "pluginType": "regex",
      "regexPattern": "[A-Za-z\\s]+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "Doctor",
        "Software Engineer",
        "Teacher",
        "Marketing Manager",
        "Sales Representative",
        "Registered Nurse",
        "Financial Analyst",
        "Construction Worker"
      ],
      "negativeContentExamples": [
        "Doctor123",
        "Software-Engineer",
        "Teacher@School",
        "Sales Rep.",
        "Analyst_Financial",
        "Worker#1"
      ],
      "positiveHeaderExamples": [
        "Customer Occupation",
        "Job Title",
        "Employee Position",
        "Professional Role",
        "Career Field",
        "Work Title",
        "Occupation Type",
        "Employment Category"
      ],
      "negativeHeaderExamples": [
        "Customer Name",
        "Occupation Code",
        "Employee ID",
        "Job Number",
        "Position Level",
        "Work Location",
        "Salary Grade",
        "Department Code"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*customer.*occupation.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Customer Occupation"
          ],
          "negativeExamples": [
            "Customer Name"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*job.*title.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Job Title"
          ],
          "negativeExamples": [
            "Job Code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(profession|career|position).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Employee Position"
          ],
          "negativeExamples": [
            "Position Code"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(work|employment).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Work Type"
          ],
          "negativeExamples": [
            "Work ID"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*occupation.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "occupation"
          ],
          "negativeExamples": [
            "location"
          ],
          "rationale": null
        }
      ],
      "priority": 5250,
      "explanation": "This semantic type identifies professional occupations and job titles that contain only alphabetic characters and spaces. It's designed to capture human-readable job descriptions and professional roles while excluding coded values, abbreviations with special characters, or alphanumeric identifiers. This is useful for analyzing workforce demographics, professional categorization, and employment data where the occupation is expressed in natural language format.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:23:07.712681"
    },
    {
      "resultType": "generated",
      "semanticType": "TransactionDuration",
      "description": "Duration in seconds for transaction processing time, represented as positive integers",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "12",
        "323",
        "1",
        "45",
        "789",
        "2156",
        "67",
        "9"
      ],
      "negativeContentExamples": [
        "12.5",
        "-45",
        "12s",
        "3.14",
        "+123",
        "12 seconds",
        "abc"
      ],
      "positiveHeaderExamples": [
        "Transaction Duration",
        "Duration",
        "Txn Duration",
        "Processing Duration",
        "Payment Duration",
        "Request Duration",
        "Duration Seconds",
        "Transaction Processing Duration"
      ],
      "negativeHeaderExamples": [
        "Session Duration",
        "Processing Time",
        "Duration",
        "Total Time",
        "Elapsed Time",
        "Response Time",
        "Duration Type",
        "Time Spent"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*transaction.*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Transaction Duration"
          ],
          "negativeExamples": [
            "Session Duration"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*duration.*sec.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Duration (secs)"
          ],
          "negativeExamples": [
            "Duration (mins)"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*txn.*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Txn Duration"
          ],
          "negativeExamples": [
            "Txn Amount"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*processing.*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Processing Duration"
          ],
          "negativeExamples": [
            "Processing Time"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*duration.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Duration"
          ],
          "negativeExamples": [
            "Duration Type"
          ],
          "rationale": null
        }
      ],
      "priority": 5260,
      "explanation": "This semantic type identifies transaction processing durations measured in seconds as positive integers. It's commonly used in financial systems, payment processing, and transaction monitoring to track how long individual transactions take to complete. The pattern matches simple positive integer values that represent seconds, making it suitable for performance monitoring and SLA tracking in transaction-based systems.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:23:40.056995"
    },
    {
      "resultType": "generated",
      "semanticType": "LoginAttempts",
      "description": "A positive integer representing the number of attempts made for a specific action, typically ranging from 1 to a maximum allowed threshold",
      "pluginType": "regex",
      "regexPattern": "\\d+",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "1",
        "2",
        "3",
        "5",
        "10",
        "15",
        "25",
        "100"
      ],
      "negativeContentExamples": [
        "-1",
        "1.5",
        "2.0",
        "abc",
        "N/A",
        "3 attempts"
      ],
      "positiveHeaderExamples": [
        "Login Attempts",
        "Attempt Count",
        "Auth Attempts",
        "Access Attempts",
        "Connection Attempts",
        "Verification Attempts",
        "Password Attempts",
        "Sign-in Attempts"
      ],
      "negativeHeaderExamples": [
        "Failed Attempts",
        "Retry Count",
        "Error Count",
        "Success Rate",
        "Failure Rate",
        "Max Attempts",
        "Attempt Limit",
        "Remaining Attempts"
      ],
      "confidenceThreshold": 85.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*login.*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Login Attempts"
          ],
          "negativeExamples": [
            "Failed Attempts"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*attempt.*count.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Attempt Count"
          ],
          "negativeExamples": [
            "Retry Count"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*auth.*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Auth Attempts"
          ],
          "negativeExamples": [
            "Auth Failures"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*access.*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Access Attempts"
          ],
          "negativeExamples": [
            "Access Denied"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*attempt.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Attempts"
          ],
          "negativeExamples": [
            "Failures"
          ],
          "rationale": null
        }
      ],
      "priority": 5270,
      "explanation": "This semantic type identifies columns containing attempt counts - positive integers that track how many times a particular action has been tried. This is commonly used in security contexts (login attempts), system monitoring (connection attempts), and user behavior tracking. The pattern matches any positive integer, as attempt counts can vary widely depending on the system's configuration and thresholds. The header patterns focus on identifying columns that specifically track attempt counts rather than failure counts, retry counts, or other related but distinct metrics.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:24:14.906411"
    },
    {
      "resultType": "generated",
      "semanticType": "AccountBalance",
      "description": "Represents positive monetary balance amounts with optional decimal precision up to two places, following the pattern \\d+(\\.\\d{1,2})? for account balances, current balances, and similar financial amounts.",
      "pluginType": "regex",
      "regexPattern": "\\d+(\\.\\d{1,2})?",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "124.2",
        "345235.6",
        "1000",
        "0.50",
        "999999.99",
        "25",
        "1500.75",
        "42.1"
      ],
      "negativeContentExamples": [
        "-124.50",
        "1000.123",
        "$500.00",
        "1,250.50",
        "100.",
        "abc123",
        "500 USD"
      ],
      "positiveHeaderExamples": [
        "Account Balance",
        "Current Balance",
        "Available Balance",
        "Checking Balance",
        "Savings Balance",
        "Balance Amount",
        "Outstanding Balance",
        "Remaining Balance"
      ],
      "negativeHeaderExamples": [
        "Balance Change",
        "Credit Limit",
        "Transaction Amount",
        "Balance Sheet",
        "Payment Due",
        "Interest Rate",
        "Account Number",
        "Balance History"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*account.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Account Balance"
          ],
          "negativeExamples": [
            "Account History"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*current.*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Current Balance"
          ],
          "negativeExamples": [
            "Current Rate"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(available|remaining).*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Available Balance"
          ],
          "negativeExamples": [
            "Available Credit"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*balance.*(amount|total).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Balance Amount"
          ],
          "negativeExamples": [
            "Balance Change"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*bal.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Acct Bal"
          ],
          "negativeExamples": [
            "Balance Sheet"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*balance.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Balance"
          ],
          "negativeExamples": [
            "Credit Limit"
          ],
          "rationale": null
        }
      ],
      "priority": 5280,
      "explanation": "This semantic type identifies positive monetary balance amounts commonly found in financial datasets. It matches numeric values with optional decimal precision up to two places, representing account balances, current balances, and similar financial amounts. The pattern excludes negative values, currency symbols, and formatting characters like commas, focusing specifically on the raw numeric representation of positive balance amounts. This type is useful for identifying balance columns in banking, accounting, and financial reporting systems where precise monetary amounts are stored without additional formatting.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:24:46.202956"
    },
    {
      "resultType": "generated",
      "semanticType": "PreviousTransactionDate",
      "description": "Timestamps that reference previous or historical points in time, following patterns like M/d/yyyy H:mm:ss or yyyy-MM-dd H:mm:ss, used for tracking past events or transactions",
      "pluginType": "regex",
      "regexPattern": "\\d{1,2}/\\d{1,2}/\\d{4} \\d{1,2}:\\d{2}:\\d{2}|\\d{4}-\\d{2}-\\d{2} \\d{1,2}:\\d{2}:\\d{2}",
      "listValues": [],
      "backout": null,
      "positiveContentExamples": [
        "4/11/2023 16:29:14",
        "2023-05-11 11:29:14",
        "12/31/2022 23:59:59",
        "2023-01-15 9:45:30",
        "3/7/2023 8:12:45",
        "2022-12-25 14:30:22",
        "1/1/2023 0:00:01",
        "2023-06-30 17:45:18"
      ],
      "negativeContentExamples": [
        "2023-05-11",
        "16:29:14",
        "4/11/23 16:29:14",
        "2023/05/11 11:29:14",
        "11-05-2023 11:29:14",
        "4/11/2023 4:29:14 PM",
        "2023-05-11T11:29:14",
        "May 11, 2023 11:29:14"
      ],
      "positiveHeaderExamples": [
        "Previous Transaction Date",
        "Last Transaction Date",
        "Previous Timestamp",
        "Last Access Time",
        "Prior Event DateTime",
        "Previous Login Time",
        "Last Modified Timestamp",
        "Historical Transaction Time"
      ],
      "negativeHeaderExamples": [
        "Next Transaction Date",
        "Original Date",
        "Current Timestamp",
        "Future Date",
        "Scheduled Time",
        "Expected DateTime",
        "Upcoming Event Time",
        "Creation Date"
      ],
      "confidenceThreshold": 90.0,
      "headerPatterns": [
        {
          "regExp": "(?i).*previous.*transaction.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Previous Transaction Date"
          ],
          "negativeExamples": [
            "Next Transaction Date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*last.*transaction.*date.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Last Transaction Date"
          ],
          "negativeExamples": [
            "First Transaction Date"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*previous.*timestamp.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Previous Timestamp"
          ],
          "negativeExamples": [
            "Current Timestamp"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*last.*date.*time.*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Last Date Time"
          ],
          "negativeExamples": [
            "Next Date Time"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(prev|previous|last|prior).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "Previous"
          ],
          "negativeExamples": [
            "Future"
          ],
          "rationale": null
        },
        {
          "regExp": "(?i).*(timestamp|datetime).*",
          "confidence": 99,
          "mandatory": false,
          "positiveExamples": [
            "timestamp"
          ],
          "negativeExamples": [
            "duration"
          ],
          "rationale": null
        }
      ],
      "priority": 5290,
      "explanation": "This semantic type identifies timestamps that specifically reference previous or historical points in time. It's designed to capture datetime values that follow common timestamp formats (M/d/yyyy H:mm:ss or yyyy-MM-dd H:mm:ss) and are contextually identified as representing past events through column headers containing terms like \"previous\", \"last\", or \"prior\". This is particularly useful in transaction systems, audit logs, and historical data tracking where distinguishing between current, previous, and future timestamps is important for data analysis and business logic.",
      "existingTypeMatch": null,
      "existingTypeDescription": null,
      "existingTypePattern": null,
      "existingTypeHeaderPatterns": null,
      "existingTypeIsBuiltIn": false,
      "suggestedAction": null,
      "comparison": null,
      "description_pattern": "P4",
      "generated_at": "2025-08-08T11:25:19.703809"
    }
  ]
}