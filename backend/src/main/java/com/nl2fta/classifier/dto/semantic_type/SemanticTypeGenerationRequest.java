package com.nl2fta.classifier.dto.semantic_type;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "Request for generating a semantic type")
public class SemanticTypeGenerationRequest {

  @JsonProperty("typeName")
  @Schema(
      description = "Type name (optional - will be generated by AI if not provided)",
      example = "EMPLOYEE_ID")
  private String typeName;

  @NotBlank(message = "Description is required")
  @Schema(description = "Description of the semantic type", example = "Employee ID format")
  private String description;

  @JsonProperty("positiveContentExamples")
  @Schema(description = "Examples of data values that should match the type (optional)")
  @Builder.Default
  private List<String> positiveContentExamples = new ArrayList<>();

  @JsonProperty("negativeContentExamples")
  @Schema(description = "Examples of data values that should not match the type")
  @Builder.Default
  private List<String> negativeContentExamples = new ArrayList<>();

  @JsonProperty("positiveHeaderExamples")
  @Schema(
      description = "Examples of column headers/names that should identify this type (optional)")
  @Builder.Default
  private List<String> positiveHeaderExamples = new ArrayList<>();

  @JsonProperty("negativeHeaderExamples")
  @Schema(description = "Examples of column headers/names that should not identify this type")
  @Builder.Default
  private List<String> negativeHeaderExamples = new ArrayList<>();

  @Builder.Default
  @JsonProperty("checkExistingTypes")
  @Schema(description = "Check for similar existing types before generating", example = "true")
  private boolean checkExistingTypes = true;

  @Builder.Default
  @JsonProperty("proceedDespiteSimilarity")
  @Schema(
      description = "Proceed with generating a new type despite similarity found",
      example = "false")
  private boolean proceedDespiteSimilarity = false;

  @JsonProperty("generateExamplesForExistingType")
  @Schema(
      description = "Generate examples for an existing type (used when similarity is found)",
      example = "NAME.FIRST")
  private String generateExamplesForExistingType;

  @JsonProperty("columnHeader")
  @Schema(
      description = "Column header/name for which this semantic type is being created",
      example = "fn")
  private String columnHeader;

  // Fields populated by FTA pre-analysis (not sent by client)
  @Schema(hidden = true)
  private String detectedBaseType;

  @Schema(hidden = true)
  private String detectedPattern;
}
